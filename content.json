{"meta":{"title":"YongMaple","subtitle":"我不生产代码，我只是代码的搬运工","description":"我不生产代码，我只是代码的搬运工","author":"YongMaple","url":"http://YongMaple.github.io"},"pages":[{"title":"","date":"2017-01-17T06:03:03.000Z","updated":"2017-01-17T06:03:03.000Z","comments":false,"path":"categories/index.html","permalink":"http://YongMaple.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2017-01-17T06:02:09.000Z","updated":"2017-01-17T06:02:09.000Z","comments":false,"path":"tags/index.html","permalink":"http://YongMaple.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"JavaScript 源代码阅读工具","slug":"JavaScript-源代码阅读工具","date":"2017-01-17T08:41:07.000Z","updated":"2017-01-17T09:00:54.000Z","comments":true,"path":"2017/01/17/JavaScript-源代码阅读工具/","link":"","permalink":"http://YongMaple.github.io/2017/01/17/JavaScript-源代码阅读工具/","excerpt":"","text":"lambda-viewhttps://github.com/Jianru-Lin/lambda-view 命令行输入1lv /path/somewhere/xyz.js 1lv http://vuejs.org/js/vue.js","categories":[{"name":"工具使用","slug":"工具使用","permalink":"http://YongMaple.github.io/categories/工具使用/"}],"tags":[{"name":"源代码查看","slug":"源代码查看","permalink":"http://YongMaple.github.io/tags/源代码查看/"}]},{"title":"Atom使用eslint需要安装的包","slug":"Atom使用eslint需要安装的包","date":"2017-01-17T08:39:41.000Z","updated":"2017-01-17T09:00:59.000Z","comments":true,"path":"2017/01/17/Atom使用eslint需要安装的包/","link":"","permalink":"http://YongMaple.github.io/2017/01/17/Atom使用eslint需要安装的包/","excerpt":"","text":"1234567\"dependencies\": &#123; \"eslint\": \"^3.13.1\", \"eslint-config-airbnb\": \"^14.0.0\", \"eslint-plugin-import\": \"^2.2.0\", \"eslint-plugin-jsx-a11y\": \"^3.0.2\", \"eslint-plugin-react\": \"^6.9.0\" &#125; 123npm install eslint --saveeslint -veslint --init 1npm install eslint-config-airbnb --save 1npm install eslint-plugin-import --save 1npm install eslint-plugin-jsx-a11y --save 1npm install eslint-plugin-react --save .eslintrc.js1234567module.exports = &#123; \"extends\": \"airbnb\", //使用airbnb前端编码规范 \"installedESLint\": true, \"rules\": &#123; \"indent\": [\"error\", 4] //缩进4个空格 &#125;&#125;;","categories":[{"name":"工具使用","slug":"工具使用","permalink":"http://YongMaple.github.io/categories/工具使用/"}],"tags":[{"name":"Atom","slug":"Atom","permalink":"http://YongMaple.github.io/tags/Atom/"},{"name":"eslint","slug":"eslint","permalink":"http://YongMaple.github.io/tags/eslint/"}]},{"title":"带数字字符串排序","slug":"带数字字符串排序","date":"2017-01-17T08:35:25.000Z","updated":"2017-01-17T09:00:50.000Z","comments":true,"path":"2017/01/17/带数字字符串排序/","link":"","permalink":"http://YongMaple.github.io/2017/01/17/带数字字符串排序/","excerpt":"","text":"今天组里在Q群发了一个问题：为一个给定字符串排序，这个字符串里的每一个单词都包含一个数字，请按数字大小给这些单词排序。 例如：is2 Thi1s T4est 3a 的结果是 Thi1s is2 3a T4est然后出现了3种解题：123456789101112var a = 'is2 Thi1s T4est 3a'var newArr = a.split(' ').map(function(item)&#123; console.log(item) var arr = item.match(/\\d+/) return arr&#125;)var str = newArr.sort(function(a,b)&#123;return +a[0] &gt; +b[0]&#125;).map(function(item)&#123;return item['input']&#125;).join(' ')console.log(str) 将原字符串用’ ‘分割成数组，然后遍历，返回由match后生成的数组组成的数组将新的数组按照match数组第0个元素（匹配正则的数字）排序，然后遍历返回match数组input元素（原来的String），最后拼接成字符串123456789101112var words = 'is2 Thi1s T4est 3a'function orderNew(words)&#123; var ordered = []; var arr = words.split(' '); arr.forEach(function(item, index)&#123; var match = /\\d+/.exec(item); ordered[parseInt(match[0])] = item; &#125;); return ordered.join(' ');&#125;console.log(orderNew(words)); 同样的将原字符串用’ ‘分割成数组，然后遍历遍历时将原数组元素放入新数组第[macth数组第0个元素（匹配正则的数字）]个元素最后将新数组拼接成字符串因为是数字排序，所有将找到的数据当成索引用，但是可能存在问题，如果有重复数字时，会覆盖掉1234567var words = 'is2 Thi1s T4est 3a'function order(words)&#123; return words.split(' ').sort(function(a, b)&#123; return a.match(/\\d+/) - b.match(/\\d+/); &#125;).join(' ');&#125;console.log(order(words)); 更加简化，将原字符串分割后直接按照数组元素匹配正则后的结果排序后，拼接","categories":[{"name":"编程思考","slug":"编程思考","permalink":"http://YongMaple.github.io/categories/编程思考/"}],"tags":[{"name":"排序","slug":"排序","permalink":"http://YongMaple.github.io/tags/排序/"}]},{"title":"关于Vue生命周期的一些理解记录","slug":"关于Vue生命周期的一些理解记录","date":"2017-01-17T08:34:06.000Z","updated":"2017-01-17T09:01:06.000Z","comments":true,"path":"2017/01/17/关于Vue生命周期的一些理解记录/","link":"","permalink":"http://YongMaple.github.io/2017/01/17/关于Vue生命周期的一些理解记录/","excerpt":"","text":"今天遇到个问题，大致是这样的：从父组件向子组件传值，第三层数据终端报错undefined，先上测试代码： 12345678910111213141516171819202122232425262728293031323334//父组件&lt;template lang=\"html\"&gt; &lt;div&gt; &lt;son :data=\"data1\"&gt;&lt;/son&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Son from '../son/index.vue'export default &#123; data()&#123; return &#123; data1:&#123;&#125; &#125; &#125;, mounted()&#123; this.data1=&#123; name:'最外层', value1:&#123; name:'第一层', value2:&#123; name:'第二层', value3:&#123; name:'第三层' &#125; &#125; &#125; &#125; &#125;, components:&#123; Son &#125;&#125;&lt;/script&gt; 12345678910111213141516171819202122232425//子组件&lt;template lang=\"html\"&gt; &lt;div&gt; 最外层 &#123;&#123;data.name&#125;&#125; &lt;div&gt; 第一层 &#123;&#123;data.value1.name&#125;&#125; &lt;div&gt; 第二层 &#123;&#123;data.value1.value2.name&#125;&#125; &lt;div&gt; 第三层 &#123;&#123;data.value1.value2.value3.name&#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; props:['data']&#125;&lt;/script&gt; 解决办法是将mounted中的赋值过程，改在beforeMount或者created中进行。或者先给data一个空的数据结构。原因是子组件渲染时，data的赋值还没进行，所以属性都是undefined","categories":[{"name":"Vue笔记","slug":"Vue笔记","permalink":"http://YongMaple.github.io/categories/Vue笔记/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://YongMaple.github.io/tags/Vue/"}]},{"title":"扩展运算符(…)结合的使用","slug":"扩展运算符-…-结合的使用","date":"2017-01-17T08:32:23.000Z","updated":"2017-01-17T09:01:11.000Z","comments":true,"path":"2017/01/17/扩展运算符-…-结合的使用/","link":"","permalink":"http://YongMaple.github.io/2017/01/17/扩展运算符-…-结合的使用/","excerpt":"","text":"引入mapActions1import &#123; mapActions, mapGetters &#125; from 'vuex' 在methods中写123...mapActions([ 'SET_MAIL_LIST']), 数组中的所有方法会被引入，在使用时只要1this.SET_MAIL_LIST(&#123;mailList&#125;)","categories":[{"name":"Vue笔记","slug":"Vue笔记","permalink":"http://YongMaple.github.io/categories/Vue笔记/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://YongMaple.github.io/tags/Vue/"}]},{"title":"Mac拼音输入法","slug":"Mac拼音输入法","date":"2017-01-17T08:30:47.000Z","updated":"2017-01-17T09:01:18.000Z","comments":true,"path":"2017/01/17/Mac拼音输入法/","link":"","permalink":"http://YongMaple.github.io/2017/01/17/Mac拼音输入法/","excerpt":"","text":"中英文切换mac自身输入法：==Command＋空格== 汉字输入切换下一页（用鼠标去点，太low了吧）假如你输入的文字不再第一页，这是需要我们切换页，上一页，是键盘上的“==［==”，下一页是键盘上的“==］==”。mac自身的输入法，也可以使用上下箭头来操作，但是，总是要低头找这个箭头，不方便。 输入特殊符号如果你记住了某个特殊字符的快捷键，那么，你只需使用 ==shift+option+键盘上的任何字符==，来输入。如：==shift+option+p==是符号：∏当然，所有特殊符号都记住，是不可能的事情 ，所以，你也可以调出mac的特殊符号集，快捷键是==control+coomand+空格==，快去试试看，找到你想要的","categories":[{"name":"工具使用","slug":"工具使用","permalink":"http://YongMaple.github.io/categories/工具使用/"}],"tags":[{"name":"开发工具","slug":"开发工具","permalink":"http://YongMaple.github.io/tags/开发工具/"},{"name":"Mac","slug":"Mac","permalink":"http://YongMaple.github.io/tags/Mac/"},{"name":"输入法","slug":"输入法","permalink":"http://YongMaple.github.io/tags/输入法/"}]},{"title":"Atom已安装package记录","slug":"Atom已安装package记录","date":"2017-01-17T07:36:13.000Z","updated":"2017-01-17T07:58:22.000Z","comments":true,"path":"2017/01/17/Atom已安装package记录/","link":"","permalink":"http://YongMaple.github.io/2017/01/17/Atom已安装package记录/","excerpt":"","text":"atom-terminal-panel 命令行工具快捷键：control+`呼出 activate-power-mode 炫酷的打字特效 atom-beautify 美化、整理代码 atom-ctags 强化版的自动完成，借助于autocomplete-plus atom-ternjs JS代码智能提示 autocomplete-paths 文件路径智能提示 color-picker 颜色拾取器快捷键：commod+shift+c docblockr 代码注释自动生成 file-icons 文件图标 git-plus git插件 highlight-selected 选中高亮 language-vue 识别Vue linter 代码校验基础工具 linter-csslint 校验css linter-eslint 校验js，配合.eslintrc使用 linter-sass-lint 校验sass minimap 右边小地图 minimap-find-and-replace 在小地图上显示搜索匹配 minimap-highlight-selected 在小地图上显示选中的 pigments 根据色值直接显示颜色 simplified-chinese-menu 中文汉化包 vue-autocomplete Vue自动完成","categories":[{"name":"工具使用","slug":"工具使用","permalink":"http://YongMaple.github.io/categories/工具使用/"}],"tags":[{"name":"Atom","slug":"Atom","permalink":"http://YongMaple.github.io/tags/Atom/"},{"name":"开发工具","slug":"开发工具","permalink":"http://YongMaple.github.io/tags/开发工具/"},{"name":"配置","slug":"配置","permalink":"http://YongMaple.github.io/tags/配置/"}]}]}