{"meta":{"title":"YongMaple","subtitle":"我不生产代码，我只是代码的搬运工","description":"我不生产代码，我只是代码的搬运工","author":"YongMaple","url":"http://YongMaple.github.io"},"pages":[{"title":"","date":"2017-01-17T06:03:03.000Z","updated":"2017-01-17T06:03:03.000Z","comments":false,"path":"categories/index.html","permalink":"http://YongMaple.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2017-01-17T06:02:09.000Z","updated":"2017-01-17T06:02:09.000Z","comments":false,"path":"tags/index.html","permalink":"http://YongMaple.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Mongoose入门","slug":"Mongoose入门","date":"2017-02-07T09:05:05.000Z","updated":"2017-02-07T09:17:38.000Z","comments":true,"path":"2017/02/07/Mongoose入门/","link":"","permalink":"http://YongMaple.github.io/2017/02/07/Mongoose入门/","excerpt":"","text":"准备工作安装Node.js和MongoDB安装Node.js，地址：https://nodejs.org/安装MongoDB，地址：https://www.mongodb.com/ 启动MongoDBcd到mongodb下的bin文件夹，执行./mongod即可，但是我们执行后会出如下错误这里提示我们没有/data/db文件夹，需要我们自己来新建，这里我在mongodb-3.4.0下新建了mydata文件夹，并通过./mongod --dbpath ../mydata启动了MongoDB，--datapath是用来指定路径的那么让我们来体验一下mongodb吧，首先要新建一个tab，然后同样cd到bin目录下，执行./mongo然后我们切回之前的tab可以看到有一个新的连接 MongoDB基础命令 因为我们后期基本不会在shell里来操作，所有这里只讲几个基本的，下面的test可以随意命名，是集合名 db.test.insert()在集合中插入一条数据 db.test.find()查找集合中所有的，可以加入参数，如db.test.find({name:&quot;Jimmy&quot;}) db.test.remove({})删除集合中所有元素，{}必须写 show collections查看所有集合 mongoose的安装新建一个文件夹，通过npm init初始化，通过npm install mongoose --save安装mongoose 通过mongoose连接数据库新建一个js文件，复制以下代码并在shell运行node xxx.js，xxx为你的文件名12var mongoose = require(\"mongoose\");mongoose.connect(\"mongodb://localhost/test\") 运行之后在之前的mongod的tab中看到有了一个新的连接 Mongoose入门创建类Class的方式1var User = mongoose.model(\"User\",userSchema) &quot;User&quot;表示类名，在数据库中集合名会自动转化为小写加susers userSchema定义了对象的原型 · 举个栗子12345678910111213141516var mongoose = require(\"mongoose\");mongoose.connect(\"mongodb://localhost/test\")userSchema = new mongoose.Schema(&#123; //如果只需要指定类型的话可以直接写，如果需要其他条件，需要写成对象的形式 name:String, qq:&#123; type:String, default:\"740534248\" //默认 &#125;&#125;);const User = mongoose.model(\"User\",userSchema)const user = new User(&#123; name:\"YongMaple\"&#125;)user.save() 指定对象的属性类型 javascript内置类型 String Number Boolean Date Array node.js内置类型 Buffer mongoose特有类型 Mixed ObjectId 举个栗子1234567891011121314151617181920212223242526272829var mongoose = require(\"mongoose\")mongoose.connect(\"mongodb://localhost/test\")const ObjSchema = new mongoose.Schema(&#123; str : String, num : Number, bool : Boolean, arr : Array, //[] arr2 : [Date], arr3 : [String], time : Date, buf : Buffer, mxo : mongoose.Schema.Types.Mixed, //&#123;&#125; 混合数据类型 oid : mongoose.Schema.Types.ObjectId //唯一的&#125;)const obj = mongoose.model(\"obj\",ObjSchema)const o = new obj(&#123; time : new Date( 42342342344), //内部自动转化为Date类型，转化失败将报错 arr3 : [1234,\"jimmy\",new Date], //内部自动转化 String buf : new Buffer([22,33,44]), oid : mongoose.Types.ObjectId()&#125;)o.save(function(err)&#123; console.log(err);&#125;) 自定义类型使用自定义类型，需要： 继承mongoose.SchemaType(key,options,typeName) 重写cast(value)方法 加入mongoose.Schema.Types 举个栗子创建User.js文件1234567891011121314151617181920212223242526272829303132333435363738394041const mongoose = require(\"mongoose\")//es5版// function User(key,options)&#123;// mongoose.SchemaType.call(this,key,options,\"User\")// &#125;//// User.prototype = Object.create(mongoose.SchemaType.prototype)//// User.prototype.cast = function(val)&#123;// if(val.loginname &amp;&amp; val.password &amp;&amp; val.loginname.length &gt; 3)&#123;// return &#123;// loginname : val.loginname,// password : val.password// &#125;// &#125;else&#123;// throw new Error(\"user has error!\")// &#125;// &#125;//// mongoose.Schema.Types.User = User;//// module.exports = User;//es6版class User extends mongoose.SchemaType&#123; constructor(key,opts)&#123; super(key,opts,\"User\") &#125; cast(val)&#123; if(val.loginname &amp;&amp; val.password &amp;&amp; val.loginname.length &gt; 3)&#123; return &#123; loginname : val.loginname, password : val.password &#125; &#125;else&#123; throw new Error(\"user has error!\") &#125; &#125;&#125; 再创建一个demo.js文件来使用上面的User.js1234567891011121314151617181920const mongoose = require(\"mongoose\")mongoose.connect(\"mongodb://localhost/test\")const User = require(\"./User\")const People = mongoose.model(\"People\",new mongoose.Schema(&#123; user:User&#125;))const o = new People(&#123; user:&#123; loginname:\"jimmy\", password:\"123456\" &#125;&#125;)o.save(function callback(err,result)&#123; console.log(err);&#125;) 所有类型都具有的配置 强制不得为空（验证器） required:true 设置属性默认值 default:”qq740534248” 是否包括在查询结果中 select:false getter 和 setter 拦截器 get:v =&gt; v set:v =&gt; v 举个栗子12345678910111213141516171819202122232425262728293031323334353637383940const mongoose = require(\"mongoose\")mongoose.connect(\"mongodb://localhost/test\")const Obj = mongoose.model(\"Obj\",new mongoose.Schema(&#123; str:&#123; type:String, default:\"YongMaple\", get(v)&#123; return `my name is $&#123;v&#125;` &#125;, set(v)&#123; return 123+v &#125; &#125;, loginname:&#123; type:String, required:true &#125;, str2:&#123; type:String, select:false &#125;&#125;))const o = new Obj(&#123; str:\"Jimmy\", str2:\"111111\", loginname:\"333333\"&#125;)console.log(o.str); //my name is 123Jimmyo.save(function(err)&#123; console.log(err); Obj.findOne(&#123;&#125;,function(err,result)&#123; console.log(result); //&#123; _id: 58993a84a184201ce8ebf5f5, __v: 0, str: '123Jimmy' &#125; &#125;)&#125;) 对属性的验证和转换验证 枚举 enum:Array 正则表达式验证 match 限制字符串最大和最小长度 maxlength &amp; minlength Number和Date的最大最小值 max &amp; min 转换 字母大小写转化 lowercase &amp; uppercase 去除字符串前后空白字符 trim:true/false 举个栗子123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657const mongoose =require(\"mongoose\")mongoose.connect(\"mongodb://localhost/test\")const baseDateNum = Date.now()const Obj = mongoose.model(\"Obj\",new mongoose.Schema(&#123; str:&#123; type:String, enum:[\"aaa\",\"bbb\"] &#125;, qq:&#123; type:String, match:/^\\d*$/, maxlength:20, minlength:5 &#125;, lowerstr:&#123; type:String, lowercase:true &#125;, upperstr:&#123; type:String, uppercase:true &#125;, trimstr:&#123; type:String, trim:true &#125;, num:&#123; type:Number, min:6, max:20 &#125;, date:&#123; type:Date, min:new Date(baseDateNum - 1000), max:new Date(baseDateNum + 2000) &#125;&#125;))const o = new Obj(&#123; str:\"bbb\", qq:\"740534248\", lowerstr:\"aaaAAAA\", upperstr:\"bbbBBBB\", trimstr:\" aaa aaff\", num:6, date:new Date(baseDateNum+1000)&#125;)console.log(o);const err = o.validateSync() //同步校验，后面会讲console.log(err); 自定义验证器有三种方式来自定义验证器 validate:{ validator:Function } Class.schema.path(xxx).validate(fn) //xxx 表示要获取的属性名，然后对其验证 validator(v,[callback])同步验证器，加入第二个参数callback变为异步验证器举个栗子 123456789101112131415161718192021222324252627const mongoose = require(\"mongoose\")mongoose.connect(\"mongodb://localhost/test\")const User = mongoose.model(\"User\",new mongoose.Schema(&#123; name:&#123; type:String, // validate:&#123; //同步验证器，也可以是数组形式，同时多个验证器 // validator(value)&#123; // return value.length &lt;= 9 // &#125; // &#125; &#125;&#125;))User.schema.path(\"name\").validate(function(v)&#123; return v.length &lt;= 9&#125;)User.schema.path(\"name\").validate(function(v)&#123; //可以加入多个 return v.length &gt; 3&#125;)const u = new User(&#123; name:\"1234\"&#125;)const err = u.validateSync()console.log(err); 再举个异步的栗子1234567891011121314151617181920212223const mongoose = require(\"mongoose\")mongoose.connect(\"mongodb://localhost/test\")const User = mongoose.model(\"User\",new mongoose.Schema(&#123; loginname:&#123; type:String, validate:&#123; validator(value,cb)&#123; User.findOne(&#123;loginname:value&#125;,function(err,result)&#123; cb(!result) &#125;) &#125; &#125; &#125;&#125;))var user = new User(&#123; loginname:\"hahahaha\"&#125;)user.save(function(err)&#123; console.log(err); //运行2遍，第二遍会抛出异常&#125;) 获取错误信息 doc.validate( error =&gt; error ) 异步获得错误信息 error = doc.validateSync() 获取同步错误信息 doc.save( error =&gt; error ) 回调获得错误信息 promise = doc.save() promise方式获得错误信息 Class.update( query , update , { runValidators:true } , callback)举个栗子 123456789101112131415161718192021222324252627282930313233343536373839404142434445const mongoose = require(\"mongoose\")mongoose.connect(\"mongodb://localhost/test\")const User = mongoose.model(\"User\",new mongoose.Schema(&#123; loginname:&#123; type:String, required:true, validate:&#123; validator(value,cb)&#123; setTimeout(function() &#123; cb(false) &#125;) &#125; &#125; &#125;&#125;))const u = new User(&#123; loginname:\"aaa11\"&#125;)//1 只能获得同步const err = u.validateSync()console.log(err);// 2 同步异步都能// u.validate(function(err)&#123;// console.log(err);// &#125;)//3 同步异步都能 有可能是底层传上来的错误// u.save(function(err)&#123;// console.log(err);// &#125;)//4 同步异步都能 有可能是底层传上来的错误// const promise = u.save()// promise.catch(err =&gt; console.log(err))//5 同步异步都能 有可能是底层传上来的错误// User.update(&#123;&#125;,&#123;loginname:\"123aaa\"&#125;,&#123;runValidators:true&#125;,function(err)&#123;// console.log(err);// &#125;) 错误信息 err.errors 错误集合 err.errors.qq 得到qq属性值的错误信息 { path , value , message } = err.errors.qq举个栗子 123456789101112131415161718192021222324252627282930313233343536373839404142434445const mongoose = require(\"mongoose\")mongoose.connect(\"mongodb://localhost/test\")const User = mongoose.model(\"User\",new mongoose.Schema(&#123; loginname:&#123; type:String, required:[true,\"必须输入 &#123;PATH&#125; - &#123;VALUE&#125;\"], //除了enum以外所有内置验证器都是这样写 enum:&#123;values:[\"aaa\",\"bbb\"],message:\"没在枚举中。。。 &#123;PATH&#125; - &#123;VALUE&#125;\"&#125;, //枚举时，自定义错误信息比较特殊，是对象形式 validate:&#123; //自定义校验器要这样写，也是对象 validator(value,cb)&#123; setTimeout(function() &#123; cb(false) //模拟异步错误 &#125;) &#125;, message:\"校验错误 &#123;PATH&#125; - &#123;VALUE&#125;\" &#125; &#125;, password:&#123; type:String, required:[true,\"密码必须填写\"], minlength:[6,\"密码至少6位\"] &#125;&#125;))const u = new User(&#123; loginname:\"aaa11\"&#125;)u.validate(function(err)&#123;// const &#123;path,value,message&#125; = err.errors.loginname// console.log(path);// console.log(value);// console.log(message); if(err &amp;&amp; err.errors)&#123; const keys = Object.keys(err.errors) let str = \"\" keys.map((v,i) =&gt; &#123; str += `$&#123;v&#125;:$&#123;err.errors[v]&#125;\\n` &#125;) console.log(str); &#125; //....&#125;) 例子中{PATH}和{VALUE}是属性名和属性值 加入方法 加入实例方法 schema.methods.xxx 加入静态方法 schema.statics.xxx 加入虚拟方法 getter/setter方法 virtual(‘xxx’).get(handle) virtual(‘xxx’).set(handle)举个栗子 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253const mongoose = require(\"mongoose\")mongoose.connect(\"mongodb://localhost/test\")const userSchema = new mongoose.Schema(&#123; firstName: String, secondName: String&#125;)//methods和statics的区别在于this是谁userSchema.methods.getAllName = function()&#123; return this.firstName + '.' + this.secondName //这里的this指的是对象本身&#125;userSchema.statics.getAll = function()&#123; //可以加入回调函数 function(cb)&#123; return this.find(&#123;&#125;) //这里的this指的是User类 可以加入回调函数 this.find(&#123;&#125;,cb)&#125;userSchema.virtual(\"allname\").get(function()&#123; return this.firstName + '.' + this.secondName&#125;) //getter methoduserSchema.virtual(\"allname\").set(function(v)&#123; //Yong.Maple const names = v.split(\".\"); this.firstName = names[0]; this.secondName = names[1];&#125;); //setter methodconst User = mongoose.model(\"User\",userSchema)// const u = new User(&#123;// firstName:\"Yong \",// secondName:\"Maple\"// &#125;)//// console.log(u.getAllName());// User.remove(&#123;&#125;).then(()=&gt;&#123;// User.insertMany([// &#123;firstName:\"Yong\",secondName:\"Maple\"&#125;,// &#123;firstName:\"Zhang\",secondName:\"San\"&#125;,// &#123;firstName:\"Li\",secondName:\"Si\"&#125;// ]).then(()=&gt;&#123;// User.getAll().then(result=&gt; console.log(result))// &#125;)// &#125;)const user = new User(&#123; allname:\"Yong.Maple\"&#125;)user.save()console.log(user); 对象的增删改 obj.save / Class.create / Class.insertMany obj.remove / Class.remove obj.update / Class.update 举个栗子12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273const mongoose = require(\"mongoose\")mongoose.connect(\"mongodb://localhost/test\")const User = mongoose.model(\"User\",&#123; name:&#123;type:String,maxlength:10&#125;&#125;)User.remove(&#123;&#125;).then(function()&#123; // --------------save // const user = new User(&#123;name:\"JiaYongfeng\"&#125;) // const promise = user.save() // promise // .then(u =&gt; console.log(u)) // .catch(err =&gt; console.log(err)) // // // user.save(function (err,u)&#123; // console.log(err,u); // &#125;) // --------------create 成功的保存，失败的抛出异常 // User.create(&#123;name:\"Jia\"&#125;,&#123;name:\"Yong\"&#125;) // .then(function(u1,u2)&#123; // console.log(u1,u2); // &#125;).catch(err =&gt; console.log(err)) // User.create([&#123;name:\"Jia\"&#125;,&#123;name:\"Yong1111\"&#125;]) // .then(function(arr)&#123; // console.log(arr); // &#125;).catch(err =&gt; console.log(err)) // ------------------insertMany 必须是数组，一条失败，全部失败 // User.insertMany([&#123;name:\"Jia\"&#125;,&#123;name:\"Yong\"&#125;]) // .then(function(arr)&#123; // console.log(arr); // &#125;).catch(err =&gt; console.log(err)) // --------------------remove // User.insertMany([&#123;name:\"Jia22\"&#125;,&#123;name:\"Jia33\"&#125;,&#123;name:\"Jiasasd\"&#125;,&#123;name:\"Yong\"&#125;]) // .then(function(arr)&#123; // User.remove(&#123;name:/^Jia\\d*$/&#125;).then(r =&gt; console.log(r)) // User.remove(&#123;name:\"Jia\"&#125;).then(r =&gt; console.log(r)) // arr[0].remove() // .then(obj =&gt; User.create(&#123;name:obj.name + \" ----- reborn\"&#125;)) // .catch(err =&gt; console.log(err)) // arr[0].remove(function(err,obj)&#123; // console.log(err,obj); // &#125;) // &#125;).catch(err =&gt; console.log(err)) // -----------------------update User.insertMany([&#123;name:\"Jia22\"&#125;,&#123;name:\"Jia33\"&#125;,&#123;name:\"Jiasasd\"&#125;,&#123;name:\"Yong\"&#125;]) .then(function(arr)&#123; User.update(&#123;&#125;,&#123;name:\"YongFeng\"&#125;,&#123;multi:true&#125;,function(err,result)&#123; //默认只修改第一个符合条件的值,需要修改多个要加&#123;multi:true&#125; console.log(err,result); &#125;) // console.log(\"before update ==&gt;\",arr[0]); // arr[0].update(&#123;name:\"123123123123fsdsdfddfsdfdsasdas\"&#125;,&#123;runValidators:true&#125;).then(function(result)&#123; // console.log(result); // &#125;).catch(err =&gt; console.log(err)) &#125;).catch(err =&gt; console.log(err))&#125;) 字段更改参数 $inc 加法运算 $mul 乘法运算 $min / $max 数值和日期的限定 $currentDate 设定当前日期举个栗子 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465var mongoose = require(\"mongoose\")mongoose.connect(\"mongodb://localhost/test\")var Topic = mongoose.model(\"Topic\", new mongoose.Schema(&#123; title: &#123; type: String, required: true &#125;, body: &#123; type: String, required: true &#125;, money: &#123; type: Number, default: 0.5 &#125;, accessNum: &#123; type: Number, default: 0 &#125;, createTime: Date, updateTime: Date&#125;))Topic.remove(&#123;&#125;, function() &#123; const date = new Date var topic = new Topic(&#123; title: \"aa\", body: \"content\", createTime: date, updateTime: date &#125;) topic.save(function(err, result) &#123; Topic.update(&#123;&#125;, &#123; title: \"my js\", $currentDate:&#123; //使用当前时间修改updateTime的值 updateTime:true &#125;, $min: &#123; //最小值，和平时理解的不一样，必须小于15，不超过15变成15 accessNum: 15 //15 &#125;, // $max: &#123; //最大值，和平时理解的不一样，必须大于15，不满15变成15 // accessNum: 15 //15 // &#125; //每个参数只能在一个算法当中 // $mul: &#123; //乘 // money: 3 //1.5 // &#125;, // $inc: &#123; //加 // accessNum: 2 //2 // &#125; &#125;, function(err) &#123; &#125;) &#125;)&#125;) 数组类型字段的更改参数 $pop 删除一条数据 $addToSet 添加去重数据 $pull / $pullAll 清除 $push 加入数据举个栗子 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263var mongoose = require(\"mongoose\")mongoose.connect(\"mongodb://localhost/test\")const Topic = mongoose.model(\"Topic\", &#123; arr: []&#125;)Topic.remove(&#123;&#125;, function() &#123; Topic.create(&#123; arr: [11, 22,11, 33, 44, 55, 66] &#125;).then(function() &#123; // $pop删除一个 // Topic.update(&#123;&#125;, &#123; // $pop: &#123; // arr: 1 //[11, 22, 33, 44, 55] 正数从后往前，负数从前往后 // //arr: -1 //[ 22, 33, 44, 55, 66] // &#125; // &#125;).exec() // $addToSet添加不重复 // Topic.update(&#123;&#125;, &#123; // $addToSet: &#123; // // arr: 66 //如果重复，无法添加 // // arr: [77,88] //[11, 22, 33, 44, 55, 66, [77,88]]并不是预期的效果 // arr: &#123; // $each: [77, 88] //[ 11, 22, 33, 44, 55, 66, 77, 88 ] // &#125; // &#125; // &#125;).exec() // $pull删除一种数据 // Topic.update(&#123;&#125;,&#123; // $pull:&#123; // arr:11 //[ 22, 33, 44, 55, 66 ] // // arr:[11,22] //无效的 // &#125; // &#125;).exec() // $pullAll删除多种数据 // Topic.update(&#123;&#125;,&#123; // $pullAll:&#123; // arr:[11,22] //[ 33, 44, 55, 66 ] // &#125; // &#125;).exec() // $push添加数据，可以重复 Topic.update(&#123;&#125;,&#123; $push:&#123; // arr:66 //[ 11, 22, 11, 33, 44, 55, 66, 66 ] arr:&#123; $each: [77, 88], $position:0, //从指定位置开始添加[ 77, 88, 11, 22, 11, 33, 44, 55, 66 ] $slice:-3 //截取数组，正数从前截取，负数从后截取 &#125; &#125; &#125;).exec() &#125;)&#125;) 对象的基础查询 find(conditions , [projection] , [options] , [callback]) findById findByIdAndRemove / findByIdAndUpdate findOne findOneAndRemove / findOneAndUpdate举个栗子 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071var mongoose = require(\"mongoose\")mongoose.connect(\"mongodb://localhost/test\")const Topic = mongoose.model(\"Topic\", &#123; name: &#123; type: String, maxlength: 10 &#125;&#125;)const arr = []for (let i = 0; i &lt; 50; i++) &#123; arr.push(&#123; name: \"Jimmy\" + i &#125;)&#125;Topic.remove(&#123;&#125;, function() &#123; Topic.create(arr).then(function(objs) &#123; let id = objs[0].id // Topic.findById(id, function(err, t) &#123; // console.log(t); // &#125;) // Topic.findByIdAndRemove(id, function(err, t) &#123; // console.log(t); // &#125;) // Topic.findByIdAndUpdate(id, &#123; // name: \"hahahaha111111111\" // &#125;, &#123; // runValidators: true // &#125;, function(err, t) &#123; // console.log(err, t); // &#125;) // 上面这个和这个一样的效果 // Topic.findByIdAndUpdate(id, &#123; // name: \"hahahaha111111111\" // &#125;, &#123; // runValidators: true // &#125;).then(function(t) &#123; // console.log(t); // &#125;).catch(err =&gt; console.log(err)) // 效果还是一样的，错误交由外部处理 // return Topic.findByIdAndUpdate(id, &#123; // name: \"hahahaha111111111\" // &#125;, &#123; // runValidators: true // &#125;).then(function(t) &#123; // console.log(t); // &#125;) // Topic.findOne(&#123;name:/^Jimmy1\\d$/&#125;,function(err,t)&#123; //返回满足条件的第一个 // console.log(t); // &#125;) // Topic.find(&#123;&#125;,function(err,ts)&#123; // console.log(ts); // &#125;) // Topic.find(&#123;name:/^Jimmy1\\d$/&#125;,function(err,ts)&#123; // console.log(ts); // &#125;) // Topic.find(&#123;name:/^Jimmy1\\d$/&#125;,\"_id name\",function(err,ts)&#123; //第二个参数决定返回结果带有的属性，用空格分割，如果在属性前加-，则表示不返回这个属性 // console.log(ts); // &#125;) Topic.find(&#123;name:/^Jimmy1\\d$/&#125;,null,&#123;skip:5,limit:3&#125;,function(err,ts)&#123; //第三个参数是对结果的筛选，skip指跳过几个，limit指最多返回几个，结合这两个可以实现翻页功能 console.log(ts); &#125;) &#125;).catch(err =&gt; console.log(err))&#125;) 比较式查询 大小判断 $eq 等于 $gt 大于 $gte 大于等于 $lt 小于 $lte 小于等于 $ne 不是 $in 包含 $nin 不包含举个栗子 1234567891011121314151617181920212223242526272829303132333435363738var mongoose = require(\"mongoose\")mongoose.connect(\"mongodb://localhost/test\")const Topic = mongoose.model(\"Topic\", &#123; name: &#123; type: String, maxlength: 10 &#125;, num: Number&#125;)const arr = []for (let i = 0; i &lt; 50; i++) &#123; arr.push(&#123; name: \"Jimmy\" + i, num: i &#125;)&#125;Topic.remove(&#123;&#125;, function() &#123; Topic.create(arr).then(function(objs) &#123; Topic.find(&#123; num: &#123; // $lt: 20, //小于20 // $lte:20, //小于等于20 // $gt:10, //大于10 // $gte:10, //大于等于10 // $in: [11, 15], //值等于11或15 // $nin: [11, 15], //值不等于11或15 // $ne: 2, //不等于2的，只能一个值 $eq: 2, //等于2的 &#125; &#125;, function(err, ts) &#123; console.log(ts); &#125;) &#125;)&#125;) 逻辑式查询 $or 或 $nor ($or相反) $and 和 $not 否举个栗子 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869var mongoose = require(\"mongoose\")mongoose.connect(\"mongodb://localhost/test\")const Topic = mongoose.model(\"Topic\", &#123; name: &#123; type: String, maxlength: 10 &#125;, num: Number&#125;)const arr = []for (let i = 0; i &lt; 50; i++) &#123; arr.push(&#123; name: \"Jimmy\" + i, num: i &#125;)&#125;Topic.remove(&#123;&#125;, function() &#123; Topic.create(arr).then(function(objs) &#123; Topic.find(&#123; // $or: [&#123; //满足一个条件就会返回 // name: \"Jimmy1\" // &#125;, &#123; // num: 4 // &#125;,&#123; // num: 6 // &#125;] // $nor: [&#123; //不满足所有条件就返回 // name: \"Jimmy1\" // &#125;, &#123; // num: 4 // &#125;, &#123; // num: 6 // &#125;] // $and: [&#123; //满足所有条件才返回 // name: /^Jimmy1\\d$/ // &#125;, &#123; // num: &#123; // $lte:15 // &#125; // &#125;] // $and: [&#123; //可以混合使用 // $or: [&#123; // name: \"Jimmy1\" // &#125;, &#123; // num: 4 // &#125;, &#123; // num: 6 // &#125;] // &#125;, &#123; // num: 4 // &#125;] num: &#123; $not: &#123; //不满足条件的返回 $gte: 10 &#125; &#125; &#125;, function(err, ts) &#123; console.log(ts); &#125;) &#125;)&#125;) 数组专用查询 $all 是否包含查询条件 $elemMatch 数组元素查询条件 $size 数组大小查询条件 $where 其他举个栗子 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899var mongoose = require(\"mongoose\")mongoose.connect(\"mongodb://localhost/test\")//$all&amp;$elemMatch// const Topic = mongoose.model(\"Topic\", &#123;// arr: []// &#125;)//$all// Topic.remove(&#123;&#125;, function() &#123;// Topic.create([&#123;// arr: [11, 22, 33]// &#125;,// &#123;// arr: [33, 44, 55]// &#125;,// &#123;// arr: [55, 66, 77, 88]// &#125;// ]).then(function() &#123;// Topic.find(&#123;// arr: &#123;// $all: [33, 44] //都存在的返回// &#125;// &#125;).then((result) =&gt; &#123;// console.log(result);// &#125;)// &#125;)// &#125;)//$elemMatch// function generatorArr(size) &#123;// let arr = []// for (let i = 0; i &lt; size; i++) &#123;// arr.push(&#123;// name: \"Jimmy\" + i,// num: i// &#125;)// &#125;// return arr// &#125;//// Topic.remove(&#123;&#125;, function() &#123;// Topic.create([&#123;// arr: generatorArr(5)// &#125;,// &#123;// arr: generatorArr(10)// &#125;,// &#123;// arr: generatorArr(15)// &#125;// ]).then(function() &#123;// Topic.find(&#123;// arr: &#123;// // $elemMatch: &#123; //匹配数组内部元素的数据// // name: \"Jimmy9\"// // &#125;// $size: 5 //匹配数组length// &#125;// &#125;).then((result) =&gt; &#123;// console.log(result);// &#125;)// &#125;)// &#125;)//$whereconst Topic = mongoose.model(\"Topic\", &#123; obj: &#123;&#125;&#125;)Topic.remove(&#123;&#125;, function() &#123; Topic.create([&#123; obj: &#123; name: \"java\", num: 1 &#125; &#125;, &#123; obj: &#123; name: \"javascript\", num: 2 &#125; &#125;, &#123; obj: &#123; name: \"nodejs\", num: 3 &#125; &#125;]).then(function() &#123; Topic.find(&#123; // $where: \"this.obj.name === 'java'\" //直接写js $where: function() &#123; return /^java\\w*$/.test(this.obj.name) &amp;&amp; this.obj.num === 2 &#125; &#125;, null, &#123; //同样可以混合使用 limit: 2, skip: 0 &#125;).then(function(result) &#123; console.log(result); &#125;) &#125;)&#125;) Query查询风格另一种风格的写法，作为了解，下面例子将会改写上面的例子举个栗子123456789101112131415161718192021222324252627282930313233343536373839404142434445464748Topic.create([&#123; arr: [11, 22, 33] &#125;, &#123; arr: [33, 44, 55] &#125;, &#123; arr: [55, 66, 77, 88] &#125;]).then(function() &#123; let query = Topic.find() query.where(\"arr\") .all([33,44]) .limit(3) .skip(10) .select(\"name age\") .exec(function (err,result)&#123; console.log(result) &#125;)&#125;)//elemMatch的query写法Topic.create([&#123; arr: generatorArr(5) &#125;, &#123; arr: generatorArr(10) &#125;, &#123; arr: generatorArr(15) &#125;]).then(function() &#123; Topic.find() .where(\"arr\") .elemMatch(&#123;name:\"Jimmy9\"&#125;) .exec(function (err,result)&#123; console.log(result) &#125;) //另一种写法 Topic.find() .where(\"arr\") .elemMatch(function (elem)&#123; elem.where(\"name\").eq(\"Jimmy9\").where(\"num\").gte() .... &#125;) .exec(function (err,result)&#123; console.log(result) &#125;)&#125;) 具体可以查看文档http://mongoosejs.com/docs/queries.html 中间件会触发中间件的： validate doc.save Class.create / Class.insertMany doc.update doc.remove find findOne findAndRemove / findOneAndUpdate举个栗子 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172var mongoose = require(\"mongoose\")mongoose.connect(\"mongodb://localhost/test\")const userSchema = new mongoose.Schema(&#123; name: &#123; type: String, maxlength: 5 &#125;&#125;)userSchema.pre(\"validate\", function(next) &#123; console.log(\"pre validate\"); console.log(this.errors); next()&#125;)userSchema.post(\"validate\", function() &#123; // console.log(this.errors?this.errors.name.message:this.errors); console.log(\"post validate\");&#125;)// userSchema.pre(\"save\", function(next) &#123;// console.log(\"pre save one\");// next()// &#125;)userSchema.pre(\"save\",true, function(next,done) &#123; //默认不加true，加true表示并行,在执行完所有的pre之后在执行后面的，没什么卵用的功能，完全能用next来控制 console.log(\"pre save one\"); next() setTimeout(done,2000)&#125;)userSchema.pre(\"save\", function(next) &#123; console.log(\"pre save two\"); setTimeout(next,2000)&#125;)userSchema.post(\"save\", function() &#123; console.log(\"post save\");&#125;)userSchema.pre(\"update\", function(next) &#123; console.log(\"pre update\"); next()&#125;)userSchema.post(\"update\", function() &#123; console.log(\"post update\");&#125;)userSchema.pre(\"remove\", function(next) &#123; console.log(\"pre remove\"); next()&#125;)userSchema.post(\"remove\", function() &#123; console.log(\"post remove\");&#125;)const User = mongoose.model(\"User\", userSchema)User.remove(&#123;&#125;, function() &#123; var user = new User(&#123; name: \"Jia\" &#125;) user.save(function(err, u) &#123; u.update(&#123; name: \"Jimmy\" &#125;).then(function(result)&#123; u.remove() &#125;) &#125;)&#125;) END","categories":[{"name":"Mongoose","slug":"Mongoose","permalink":"http://YongMaple.github.io/categories/Mongoose/"}],"tags":[{"name":"mongodb","slug":"mongodb","permalink":"http://YongMaple.github.io/tags/mongodb/"},{"name":"mongoose","slug":"mongoose","permalink":"http://YongMaple.github.io/tags/mongoose/"}]},{"title":"IOS设置document.title无效的解决办法","slug":"IOS设置document-title无效的解决办法","date":"2017-02-04T08:54:52.000Z","updated":"2017-02-04T08:56:15.000Z","comments":true,"path":"2017/02/04/IOS设置document-title无效的解决办法/","link":"","permalink":"http://YongMaple.github.io/2017/02/04/IOS设置document-title无效的解决办法/","excerpt":"","text":"问题原因：因为浏览器首次加载页面初始化title后，就再也不监听 document.title的change事件。 解决方案：修改title之后，给页面加上一个内容为空的iframe，随后立即删除这个iframe，这时候会刷新title。但是如果简单的这样设置，一般是会有闪动的，所以可以设置 12345678910setTitle: function(title) &#123; let $body = $('body') document.title = title let $iframe = $('&lt;iframe src=\"/favicon.ico\"&gt;&lt;/iframe&gt;') $iframe.on('load', function() &#123; setTimeout(function() &#123; $iframe.off('load').remove() &#125;, 0) &#125;).appendTo($body) &#125; 参考地址：http://www.cnblogs.com/lihanying/p/6227192.html","categories":[{"name":"编程思考","slug":"编程思考","permalink":"http://YongMaple.github.io/categories/编程思考/"}],"tags":[{"name":"title","slug":"title","permalink":"http://YongMaple.github.io/tags/title/"},{"name":"ios","slug":"ios","permalink":"http://YongMaple.github.io/tags/ios/"},{"name":"手机端","slug":"手机端","permalink":"http://YongMaple.github.io/tags/手机端/"}]},{"title":"iTerm2配色修改","slug":"iTerm2配色修改","date":"2017-02-04T02:25:12.000Z","updated":"2017-02-04T02:57:49.000Z","comments":true,"path":"2017/02/04/iTerm2配色修改/","link":"","permalink":"http://YongMaple.github.io/2017/02/04/iTerm2配色修改/","excerpt":"","text":"首先sudo vim ~/.bash_profile，输入密码后按e进入编辑，看别人的帖子是不需要sudo的。。。但是我需要 然后i进入编辑模式，加入下面这段，然后esc输入:wq保存 1234567891011#enables colorin the terminal bash shell exportexport CLICOLOR=1#sets up thecolor scheme for list exportexport LSCOLORS=gxfxcxdxbxegedabagacad#sets up theprompt color (currently a green similar to linux terminal)export PS1='\\[\\033[01;32m\\]\\u@\\h\\[\\033[00m\\]:\\[\\033[01;36m\\]\\w\\[\\033[00m\\]\\$ '#enables colorfor iTermexport TERM=xterm-color 然后修改preference-&gt;profiles-&gt;Terminal-&gt;xterm-new 去挑选喜欢的配色方案，我在这里找的http://iterm2colorschemes.com/ 下载到你喜欢的配色后，导入导入后选择你的配色，然后注销mac，再打开就发现配色变了，之后再换配色只要直接改就行了","categories":[{"name":"工具使用","slug":"工具使用","permalink":"http://YongMaple.github.io/categories/工具使用/"}],"tags":[{"name":"开发工具","slug":"开发工具","permalink":"http://YongMaple.github.io/tags/开发工具/"},{"name":"iTerm2","slug":"iTerm2","permalink":"http://YongMaple.github.io/tags/iTerm2/"}]},{"title":"Retina视网膜屏幕适配","slug":"Retina视网膜屏幕适配","date":"2017-01-19T07:10:57.000Z","updated":"2017-01-19T07:11:49.000Z","comments":true,"path":"2017/01/19/Retina视网膜屏幕适配/","link":"","permalink":"http://YongMaple.github.io/2017/01/19/Retina视网膜屏幕适配/","excerpt":"","text":"1234567891011121314151617181920212223242526272829&lt;!DOCTYPE&gt;&lt;html&gt;&lt;header&gt; &lt;style&gt; div &#123; border: 1px solid #bbb; &#125; .hairlines div &#123; border-width: .5px; &#125; &lt;/style&gt;&lt;/header&gt;&lt;body&gt; &lt;div&gt; &lt;/div&gt;&lt;/body&gt;&lt;script&gt; if (window.devicePixelRatio &amp;&amp; devicePixelRatio &gt;= 2) &#123; var testElem = document.createElement('div'); testElem.style.border = '.5px solid transparent'; document.body.appendChild(testElem); if (testElem.offsetHeight == 1)&#123; document.querySelector('html').classList.add('hairlines'); &#125; document.body.removeChild(testElem); &#125;&lt;/script&gt;&lt;/html&gt; window.devicePixelRatio是设备上物理像素和设备独立像素(device-independent pixels (dips))的比例。公式表示就是：window.devicePixelRatio = 物理像素 / dips offsetHeight = clientHeight + 滚动条 + 边框 如果是retina屏，会先创建个div来测试浏览器是否能探测到0.5px，如果可以会才会使用0.5px的样式 原文地址：http://dieulot.net/css-retina-hairline","categories":[{"name":"编程思考","slug":"编程思考","permalink":"http://YongMaple.github.io/categories/编程思考/"}],"tags":[{"name":"手机端","slug":"手机端","permalink":"http://YongMaple.github.io/tags/手机端/"},{"name":"适配","slug":"适配","permalink":"http://YongMaple.github.io/tags/适配/"},{"name":"Retina","slug":"Retina","permalink":"http://YongMaple.github.io/tags/Retina/"}]},{"title":"ES6-遍历对象属性","slug":"ES6-遍历对象属性","date":"2017-01-19T07:07:58.000Z","updated":"2017-01-19T07:09:55.000Z","comments":true,"path":"2017/01/19/ES6-遍历对象属性/","link":"","permalink":"http://YongMaple.github.io/2017/01/19/ES6-遍历对象属性/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748class A &#123; constructor() &#123; this.name = 'leo'; &#125; getName() &#123; &#125;&#125;class B extends A&#123; constructor()&#123; super(); this.age = 22; &#125; getAge()&#123; &#125; [Symbol('fullname')]()&#123; &#125;&#125;B.prototype.getClass = function () &#123;&#125;;var b = new B;// Object.keys 能够得到自身的可枚举的属性,但得不到原型链上的属性.// 得不到 Symbols 属性console.log(Object.keys(B.prototype));// Object.getOwnPropertyNames(b) 能够得到自身属性,// 包括不可枚举的属性,但得不到原型链上的属性.// 得不到 Symbols 属性console.log(Object.getOwnPropertyNames(B.prototype));// 可以得到自身的 Symbols 属性,包括不可枚举的属性.console.log(Object.getOwnPropertySymbols(B.prototype));// 可以得到自身和继承的原型链上的属性,但必须是可枚举属性.for(let key in b)&#123; console.log(key);&#125;// 判断是否可枚举，enumerable为true可枚举console.log(Object.getOwnPropertyDescriptor(B.prototype,'getAge'));","categories":[{"name":"ES6笔记","slug":"ES6笔记","permalink":"http://YongMaple.github.io/categories/ES6笔记/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://YongMaple.github.io/tags/ES6/"}]},{"title":"ES6-Object.assign","slug":"ES6-Object-assign","date":"2017-01-19T07:07:47.000Z","updated":"2017-01-19T07:09:28.000Z","comments":true,"path":"2017/01/19/ES6-Object-assign/","link":"","permalink":"http://YongMaple.github.io/2017/01/19/ES6-Object-assign/","excerpt":"","text":"Object.assign将可以枚举的属性赋值给对象12345678910111213141516171819var obj = &#123;&#125;;var skey = Symbol('testname');var obj2 = Object.assign(obj, &#123;name: 'leo'&#125;, &#123;age: 30&#125;,&#123;[skey]:'ok good'&#125;);console.log(obj === obj2, obj);console.log(obj[skey]);const DEFAULT_OPTIONS = &#123; name: 'leo'&#125;;function test(opts) &#123; let options = Object.assign(&#123;&#125;, DEFAULT_OPTIONS, opts); console.log(options);&#125;test();test(&#123;name:'zengliang'&#125;);","categories":[{"name":"ES6笔记","slug":"ES6笔记","permalink":"http://YongMaple.github.io/categories/ES6笔记/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://YongMaple.github.io/tags/ES6/"}]},{"title":"ES6-Object.is","slug":"ES6-Object-is","date":"2017-01-19T07:07:35.000Z","updated":"2017-01-19T07:09:11.000Z","comments":true,"path":"2017/01/19/ES6-Object-is/","link":"","permalink":"http://YongMaple.github.io/2017/01/19/ES6-Object-is/","excerpt":"","text":"Object.is相当于全等又有些区别123console.log(Object.is(&#123;&#125;,&#123;&#125;) , &#123;&#125; === &#123;&#125; ); //fasle falseconsole.log(Object.is(NaN,NaN) , NaN === NaN); //true falseconsole.log(Object.is(+0,-0) , +0 === -0); //false true","categories":[{"name":"ES6笔记","slug":"ES6笔记","permalink":"http://YongMaple.github.io/categories/ES6笔记/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://YongMaple.github.io/tags/ES6/"}]},{"title":"ES6-对象属性的新写法","slug":"ES6-对象属性的新写法","date":"2017-01-19T07:07:22.000Z","updated":"2017-01-19T07:08:46.000Z","comments":true,"path":"2017/01/19/ES6-对象属性的新写法/","link":"","permalink":"http://YongMaple.github.io/2017/01/19/ES6-对象属性的新写法/","excerpt":"","text":"123456789101112131415161718192021222324252627282930313233343536373839404142434445464748class A &#123; constructor() &#123; this.name = 'leo'; &#125; getName() &#123; &#125;&#125;class B extends A&#123; constructor()&#123; super(); this.age = 22; &#125; getAge()&#123; &#125; [Symbol('fullname')]()&#123; &#125;&#125;B.prototype.getClass = function () &#123;&#125;;var b = new B;// Object.keys 能够得到自身的可枚举的属性,但得不到原型链上的属性.// 得不到 Symbols 属性console.log(Object.keys(B.prototype));// Object.getOwnPropertyNames(b) 能够得到自身属性,// 包括不可枚举的属性,但得不到原型链上的属性.// 得不到 Symbols 属性console.log(Object.getOwnPropertyNames(B.prototype));// 可以得到自身的 Symbols 属性,包括不可枚举的属性.console.log(Object.getOwnPropertySymbols(B.prototype));// 可以得到自身和继承的原型链上的属性,但必须是可枚举属性.for(let key in b)&#123; console.log(key);&#125;// 判断是否可枚举，enumerable为true可枚举console.log(Object.getOwnPropertyDescriptor(B.prototype,'getAge'));","categories":[{"name":"ES6笔记","slug":"ES6笔记","permalink":"http://YongMaple.github.io/categories/ES6笔记/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://YongMaple.github.io/tags/ES6/"}]},{"title":"JS-forEach和map","slug":"JS-forEach和map","date":"2017-01-18T02:38:49.000Z","updated":"2017-02-04T07:40:50.000Z","comments":true,"path":"2017/01/18/JS-forEach和map/","link":"","permalink":"http://YongMaple.github.io/2017/01/18/JS-forEach和map/","excerpt":"","text":"第1个是遍历的数组内容；第2个是对应的数组索引;第3个是数组本身123[].forEach(function(value, index, array) &#123; // ...&#125;); 举个栗子1234[1,2,3,4,5].map(function(v, i)&#123;return v &gt; 3;&#125;);//[false, false, false, true, true][1,2,3,4,5].forEach(function(v, i)&#123;return v &gt; 3;&#125;);//undefined map()方法：若这个回调函数有返回值，map()方法会产生一个新数组，这个新数组由原数组元素对应的回调函数的返回值构成。若没有返回值，则新数组的所有元素为undefined。forEach方法：仅仅为每个数组元素执行回调函数。 再举一个1234567var result = [1, 2, 3, 4, 5].map(function(v, i) &#123; return v+1&#125;);console.log(result); //[2, 3, 4, 5, 6][1, 2, 3, 4, 5].forEach(function(v, i) &#123; console.log(v,i) //1 0&#125;);","categories":[{"name":"JS基础","slug":"JS基础","permalink":"http://YongMaple.github.io/categories/JS基础/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://YongMaple.github.io/tags/JavaScript/"},{"name":"JS","slug":"JS","permalink":"http://YongMaple.github.io/tags/JS/"},{"name":"基础","slug":"基础","permalink":"http://YongMaple.github.io/tags/基础/"},{"name":"forEach","slug":"forEach","permalink":"http://YongMaple.github.io/tags/forEach/"},{"name":"map","slug":"map","permalink":"http://YongMaple.github.io/tags/map/"}]},{"title":"JS-sort","slug":"JS-sort","date":"2017-01-18T02:37:54.000Z","updated":"2017-02-04T07:40:16.000Z","comments":true,"path":"2017/01/18/JS-sort/","link":"","permalink":"http://YongMaple.github.io/2017/01/18/JS-sort/","excerpt":"","text":"12345var arr=new Array(1,8,7,6);arr.sort(function(a,b)&#123; return b-a&#125;);console.log(arrSimple2.join()); 解释：a,b表示数组中的任意两个元素，若return &gt; 0 b前a后；reutrn &lt; 0 a前b后；a=b时存在浏览器兼容简化一下：a-b输出从小到大排序，b-a输出从大到小排序。1234567891011121314151617var objectList = new Array();function Persion(name, age) &#123; this.name = name; this.age = age;&#125;objectList.push(new Persion('jack', 20));objectList.push(new Persion('tony', 25));objectList.push(new Persion('stone', 26));objectList.push(new Persion('mandy', 23));//按年龄从小到大排序objectList.sort(function(a, b) &#123; return a.age - b.age&#125;);for (var i = 0; i &lt; objectList.length; i++) &#123; console.log('age:' + objectList[i].age + ' name:' + objectList[i].name);&#125; 也可以对对象的属性进行排序","categories":[{"name":"JS基础","slug":"JS基础","permalink":"http://YongMaple.github.io/categories/JS基础/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://YongMaple.github.io/tags/JavaScript/"},{"name":"JS","slug":"JS","permalink":"http://YongMaple.github.io/tags/JS/"},{"name":"基础","slug":"基础","permalink":"http://YongMaple.github.io/tags/基础/"},{"name":"sort","slug":"sort","permalink":"http://YongMaple.github.io/tags/sort/"}]},{"title":"JS-match和exec","slug":"JS-match和exec","date":"2017-01-18T02:34:52.000Z","updated":"2017-01-18T02:35:35.000Z","comments":true,"path":"2017/01/18/JS-match和exec/","link":"","permalink":"http://YongMaple.github.io/2017/01/18/JS-match和exec/","excerpt":"","text":"举个栗子12345678var order = 'is2'var arr = order.match(/\\d+/)console.log(arr)//[\"2\", index: 2, input: \"is2\"]var arr2 = /\\d+/.exec(order);console.log(arr2)//[\"2\", index: 2, input: \"is2\"] 值得注意的是match和exec返回的结果都是数组","categories":[{"name":"JS基础","slug":"JS基础","permalink":"http://YongMaple.github.io/categories/JS基础/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://YongMaple.github.io/tags/JavaScript/"},{"name":"JS","slug":"JS","permalink":"http://YongMaple.github.io/tags/JS/"},{"name":"基础","slug":"基础","permalink":"http://YongMaple.github.io/tags/基础/"},{"name":"match","slug":"match","permalink":"http://YongMaple.github.io/tags/match/"},{"name":"exec","slug":"exec","permalink":"http://YongMaple.github.io/tags/exec/"},{"name":"正则","slug":"正则","permalink":"http://YongMaple.github.io/tags/正则/"}]},{"title":"JS-includes和indexOf","slug":"JS-includes和indexOf","date":"2017-01-18T02:33:03.000Z","updated":"2017-01-18T02:34:18.000Z","comments":true,"path":"2017/01/18/JS-includes和indexOf/","link":"","permalink":"http://YongMaple.github.io/2017/01/18/JS-includes和indexOf/","excerpt":"","text":"举个栗子123456var str = 'hahaha123'console.log(str.includes('1')); //trueconsole.log(str.indexOf('1')); //6var arr = [1,2,3,4,5]console.log(arr.includes(1)); //trueconsole.log(arr.indexOf(1)); //0","categories":[{"name":"JS基础","slug":"JS基础","permalink":"http://YongMaple.github.io/categories/JS基础/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://YongMaple.github.io/tags/JavaScript/"},{"name":"JS","slug":"JS","permalink":"http://YongMaple.github.io/tags/JS/"},{"name":"基础","slug":"基础","permalink":"http://YongMaple.github.io/tags/基础/"},{"name":"includes","slug":"includes","permalink":"http://YongMaple.github.io/tags/includes/"},{"name":"indexOf","slug":"indexOf","permalink":"http://YongMaple.github.io/tags/indexOf/"}]},{"title":"JS-join拼接","slug":"JS-join拼接","date":"2017-01-18T02:30:45.000Z","updated":"2017-01-18T02:32:06.000Z","comments":true,"path":"2017/01/18/JS-join拼接/","link":"","permalink":"http://YongMaple.github.io/2017/01/18/JS-join拼接/","excerpt":"","text":"123456var arr = new Array(3)arr[0] = \"George\"arr[1] = \"John\"arr[2] = \"Thomas\"console.log(arr.join(' ')) //George John Thomas","categories":[{"name":"JS基础","slug":"JS基础","permalink":"http://YongMaple.github.io/categories/JS基础/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://YongMaple.github.io/tags/JavaScript/"},{"name":"JS","slug":"JS","permalink":"http://YongMaple.github.io/tags/JS/"},{"name":"基础","slug":"基础","permalink":"http://YongMaple.github.io/tags/基础/"},{"name":"数组","slug":"数组","permalink":"http://YongMaple.github.io/tags/数组/"},{"name":"拼接","slug":"拼接","permalink":"http://YongMaple.github.io/tags/拼接/"}]},{"title":"JS-arguments","slug":"JS-arguments","date":"2017-01-18T02:29:30.000Z","updated":"2017-01-18T02:31:18.000Z","comments":true,"path":"2017/01/18/JS-arguments/","link":"","permalink":"http://YongMaple.github.io/2017/01/18/JS-arguments/","excerpt":"","text":"123456function test(a,b) &#123; console.log(arguments); //[\"123\"] console.log(arguments.length); //1 console.log(test.length); //2&#125;test('123') 通过arguments可以获取传入的参数，function.length可以获取本该传入的参数","categories":[{"name":"JS基础","slug":"JS基础","permalink":"http://YongMaple.github.io/categories/JS基础/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://YongMaple.github.io/tags/JavaScript/"},{"name":"JS","slug":"JS","permalink":"http://YongMaple.github.io/tags/JS/"},{"name":"基础","slug":"基础","permalink":"http://YongMaple.github.io/tags/基础/"},{"name":"参数","slug":"参数","permalink":"http://YongMaple.github.io/tags/参数/"}]},{"title":"JS-数组比较","slug":"JS-数组比较","date":"2017-01-18T02:27:39.000Z","updated":"2017-01-18T02:31:39.000Z","comments":true,"path":"2017/01/18/JS-数组比较/","link":"","permalink":"http://YongMaple.github.io/2017/01/18/JS-数组比较/","excerpt":"","text":"12345var x = [1,2];var y = [1,2];console.log(x == y); //falseconsole.log(x === y ); //false javascript不能直接用==或者===来判断两个数组是否相等，无论是相等还是全等都不行。要判断数组是否相等，要先将数组转换为字符串，再作比较123var x = [1,2];var y = [1,2];console.log(x.toString() == y.toString())","categories":[{"name":"JS基础","slug":"JS基础","permalink":"http://YongMaple.github.io/categories/JS基础/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://YongMaple.github.io/tags/JavaScript/"},{"name":"JS","slug":"JS","permalink":"http://YongMaple.github.io/tags/JS/"},{"name":"基础","slug":"基础","permalink":"http://YongMaple.github.io/tags/基础/"},{"name":"数组","slug":"数组","permalink":"http://YongMaple.github.io/tags/数组/"},{"name":"比较","slug":"比较","permalink":"http://YongMaple.github.io/tags/比较/"}]},{"title":"JS-String转数字类型","slug":"JS-String转数字类型","date":"2017-01-18T02:24:43.000Z","updated":"2017-01-18T02:31:48.000Z","comments":true,"path":"2017/01/18/JS-String转数字类型/","link":"","permalink":"http://YongMaple.github.io/2017/01/18/JS-String转数字类型/","excerpt":"","text":"需要将string转成数字时，如果需要保留小数，只要用+就行了123456var str = '123'console.log(parseInt(str))//转整数时没问题var str1 = '123.45'console.log(+str1)//只要用+就行了","categories":[{"name":"JS基础","slug":"JS基础","permalink":"http://YongMaple.github.io/categories/JS基础/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://YongMaple.github.io/tags/JavaScript/"},{"name":"JS","slug":"JS","permalink":"http://YongMaple.github.io/tags/JS/"},{"name":"基础","slug":"基础","permalink":"http://YongMaple.github.io/tags/基础/"},{"name":"转换","slug":"转换","permalink":"http://YongMaple.github.io/tags/转换/"}]},{"title":"ES6-set","slug":"ES6-set","date":"2017-01-18T02:22:29.000Z","updated":"2017-01-18T02:22:52.000Z","comments":true,"path":"2017/01/18/ES6-set/","link":"","permalink":"http://YongMaple.github.io/2017/01/18/ES6-set/","excerpt":"","text":"是什么？set是类数组 可以用来做什么？可以用来给数组去重123let arr = ['jiayongfeng','jimmy','jimmy']let newArr = Array.from(new Set(arr))console.log(newArr) 怎么用？12345678910let user = &#123;name:'jiayongfeng',age:'28'&#125;let st = new Set() st.add(user) //添加st.delete(user) //删除st.has(user) //判断有无st.clear() //清空console.log(st.size) //查看数量for(let o of st)&#123; //遍历 console.log(o)&#125;","categories":[{"name":"ES6笔记","slug":"ES6笔记","permalink":"http://YongMaple.github.io/categories/ES6笔记/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://YongMaple.github.io/tags/ES6/"}]},{"title":"ES6-map","slug":"ES6-map","date":"2017-01-18T02:21:15.000Z","updated":"2017-01-18T02:21:46.000Z","comments":true,"path":"2017/01/18/ES6-map/","link":"","permalink":"http://YongMaple.github.io/2017/01/18/ES6-map/","excerpt":"","text":"是什么？map是键值对的类数组 可以用来做什么？对象中的key必须是string，map中key可以是任意值123456789let user = &#123; name : 'jiayongfeng', age : 28, 'english name':'jimmy'&#125;let map = new Map([ [user,'shuai'], //key可以是对象 ['qq','740534248']]) 怎么用？12345678910111213141516171819202122232425262728293031let map = new Map()map.set('name','jiayongfeng') //赋值map.set('age',28)console.log(map.get('age')) //取值console.log(map.size) //查看大小map.delete('age') //删除map.has('name') //判断有无map.clear() //清空//值得注意NaN在map和set是全等的console.log(NaN === NaN) //falsemap.set(NaN,'1111');map.set(NaN,'2222');console.log(map.get(NaN)); //2222for(let o of map)&#123; //遍历 console.log(o)&#125;let keys = map.keys() //获取所有的keylet values = map.values() //获取所有的valuelet entries = map.ertries() //获取所有的键值对for(let o of entries)&#123; console.log(o) //等同于上面的遍历&#125;var _this = &#123; des : 'shuai'&#125;;map.forEach(function (k, v) &#123; //遍历，同时可以传入this console.log(this.des,k, v);&#125;,_this);","categories":[{"name":"ES6笔记","slug":"ES6笔记","permalink":"http://YongMaple.github.io/categories/ES6笔记/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://YongMaple.github.io/tags/ES6/"}]},{"title":"ES6-Array","slug":"ES6-Array","date":"2017-01-18T02:20:04.000Z","updated":"2017-01-18T02:20:46.000Z","comments":true,"path":"2017/01/18/ES6-Array/","link":"","permalink":"http://YongMaple.github.io/2017/01/18/ES6-Array/","excerpt":"","text":"Array.from类似数组的数据结构转换为数组可以把带有length属性的对象和实现了iterator接口的对象转换为数组123456789101112var arr = Array.from(&#123;'0':'qq 740534248','1':'jimmy','length':2&#125;,function(item,index)&#123; return item + '---' + index&#125;);//必须是这种样子的对象，其他的不行console.log(arr);var set = new Set(['me','book','leo']);console.log(Array.from(set)); querySelectorAll查询出的类数组也能转换12345678910111213&lt;ul&gt; &lt;li&gt;item1&lt;/li&gt; &lt;li&gt;item2&lt;/li&gt; &lt;li&gt;item3&lt;/li&gt; &lt;li&gt;item4&lt;/li&gt; &lt;li&gt;item5&lt;/li&gt;&lt;/ul&gt;&lt;script&gt; var list = document.querySelectorAll('li'); console.log(list) //NodeList[5] console.log(Array.from(list)); //ArrayList[5]&lt;/script&gt; Array.of用来构建数组，防止Array(7)这种情况发生12345Array.of(7); // [7]Array.of(1, 2, 3); // [1, 2, 3]Array(7); // [ , , , , , , ]Array(1, 2, 3); // [1, 2, 3] find找到符合函数的第一个值1234567var arr = [ 22,33,44,55 ];var value = arr.find(function(value,index,arr)&#123; //值，索引，原数组 return value &gt; 33;&#125;);console.log(value); //44 findIndex找到符合函数的第一个值的索引1234567var arr = [ 22,33,44,55 ];var value = arr.findIndex(function(value,index,arr)&#123; //值，索引，原数组 return value &gt; 33;&#125;);console.log(value); //2 IndexOf比较123456var arr2 = [22,NaN];console.log(arr2.indexOf(NaN)) //-1console.log(arr2.findIndex(function(v)&#123; return Object.is(NaN,v);&#125;)); //1 copyWithincopyWithin(position,start,end);要被替换的开始位置，用于替换的起始位置，用于替换的结束位置（不包含）也可以用负数，代表从后往前数第几个，如-3代表正数第4个12345ar arr = [1,2,3,4,5,6,7];//arr.copyWithin(1,5,7); //[ 1, 6, 7, 4, 5, 6, 7 ]arr.copyWithin(2,-3,6); //[ 1, 2, 5, 6, 5, 6, 7 ]console.log(arr); fill填充数组fill(value,start,end)用来填充的值，被填充的起始位置，被填充的结束位置12345var arr = [1,2,3,4,5,6,7];//arr.fill(10)console.log(arr) //[10,10,10,10,10,10,10]arr.fill(10,2,5)console.log(arr) //[1,2,10,10,10,6,7]","categories":[{"name":"ES6笔记","slug":"ES6笔记","permalink":"http://YongMaple.github.io/categories/ES6笔记/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://YongMaple.github.io/tags/ES6/"}]},{"title":"JavaScript 源代码阅读工具","slug":"JavaScript-源代码阅读工具","date":"2017-01-17T08:41:07.000Z","updated":"2017-01-17T09:00:54.000Z","comments":true,"path":"2017/01/17/JavaScript-源代码阅读工具/","link":"","permalink":"http://YongMaple.github.io/2017/01/17/JavaScript-源代码阅读工具/","excerpt":"","text":"lambda-viewhttps://github.com/Jianru-Lin/lambda-view 命令行输入1lv /path/somewhere/xyz.js 1lv http://vuejs.org/js/vue.js","categories":[{"name":"工具使用","slug":"工具使用","permalink":"http://YongMaple.github.io/categories/工具使用/"}],"tags":[{"name":"源代码查看","slug":"源代码查看","permalink":"http://YongMaple.github.io/tags/源代码查看/"}]},{"title":"Atom使用eslint需要安装的包","slug":"Atom使用eslint需要安装的包","date":"2017-01-17T08:39:41.000Z","updated":"2017-01-17T09:00:59.000Z","comments":true,"path":"2017/01/17/Atom使用eslint需要安装的包/","link":"","permalink":"http://YongMaple.github.io/2017/01/17/Atom使用eslint需要安装的包/","excerpt":"","text":"1234567\"dependencies\": &#123; \"eslint\": \"^3.13.1\", \"eslint-config-airbnb\": \"^14.0.0\", \"eslint-plugin-import\": \"^2.2.0\", \"eslint-plugin-jsx-a11y\": \"^3.0.2\", \"eslint-plugin-react\": \"^6.9.0\" &#125; 123npm install eslint --saveeslint -veslint --init 1npm install eslint-config-airbnb --save 1npm install eslint-plugin-import --save 1npm install eslint-plugin-jsx-a11y --save 1npm install eslint-plugin-react --save .eslintrc.js1234567module.exports = &#123; \"extends\": \"airbnb\", //使用airbnb前端编码规范 \"installedESLint\": true, \"rules\": &#123; \"indent\": [\"error\", 4] //缩进4个空格 &#125;&#125;;","categories":[{"name":"工具使用","slug":"工具使用","permalink":"http://YongMaple.github.io/categories/工具使用/"}],"tags":[{"name":"Atom","slug":"Atom","permalink":"http://YongMaple.github.io/tags/Atom/"},{"name":"eslint","slug":"eslint","permalink":"http://YongMaple.github.io/tags/eslint/"}]},{"title":"带数字字符串排序","slug":"带数字字符串排序","date":"2017-01-17T08:35:25.000Z","updated":"2017-01-17T09:00:50.000Z","comments":true,"path":"2017/01/17/带数字字符串排序/","link":"","permalink":"http://YongMaple.github.io/2017/01/17/带数字字符串排序/","excerpt":"","text":"今天组里在Q群发了一个问题：为一个给定字符串排序，这个字符串里的每一个单词都包含一个数字，请按数字大小给这些单词排序。 例如：is2 Thi1s T4est 3a 的结果是 Thi1s is2 3a T4est然后出现了3种解题：123456789101112var a = 'is2 Thi1s T4est 3a'var newArr = a.split(' ').map(function(item)&#123; console.log(item) var arr = item.match(/\\d+/) return arr&#125;)var str = newArr.sort(function(a,b)&#123;return +a[0] &gt; +b[0]&#125;).map(function(item)&#123;return item['input']&#125;).join(' ')console.log(str) 将原字符串用’ ‘分割成数组，然后遍历，返回由match后生成的数组组成的数组将新的数组按照match数组第0个元素（匹配正则的数字）排序，然后遍历返回match数组input元素（原来的String），最后拼接成字符串123456789101112var words = 'is2 Thi1s T4est 3a'function orderNew(words)&#123; var ordered = []; var arr = words.split(' '); arr.forEach(function(item, index)&#123; var match = /\\d+/.exec(item); ordered[parseInt(match[0])] = item; &#125;); return ordered.join(' ');&#125;console.log(orderNew(words)); 同样的将原字符串用’ ‘分割成数组，然后遍历遍历时将原数组元素放入新数组第[macth数组第0个元素（匹配正则的数字）]个元素最后将新数组拼接成字符串因为是数字排序，所有将找到的数据当成索引用，但是可能存在问题，如果有重复数字时，会覆盖掉1234567var words = 'is2 Thi1s T4est 3a'function order(words)&#123; return words.split(' ').sort(function(a, b)&#123; return a.match(/\\d+/) - b.match(/\\d+/); &#125;).join(' ');&#125;console.log(order(words)); 更加简化，将原字符串分割后直接按照数组元素匹配正则后的结果排序后，拼接","categories":[{"name":"编程思考","slug":"编程思考","permalink":"http://YongMaple.github.io/categories/编程思考/"}],"tags":[{"name":"排序","slug":"排序","permalink":"http://YongMaple.github.io/tags/排序/"}]},{"title":"关于Vue生命周期的一些理解记录","slug":"关于Vue生命周期的一些理解记录","date":"2017-01-17T08:34:06.000Z","updated":"2017-01-17T09:01:06.000Z","comments":true,"path":"2017/01/17/关于Vue生命周期的一些理解记录/","link":"","permalink":"http://YongMaple.github.io/2017/01/17/关于Vue生命周期的一些理解记录/","excerpt":"","text":"今天遇到个问题，大致是这样的：从父组件向子组件传值，第三层数据终端报错undefined，先上测试代码： 12345678910111213141516171819202122232425262728293031323334//父组件&lt;template lang=\"html\"&gt; &lt;div&gt; &lt;son :data=\"data1\"&gt;&lt;/son&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Son from '../son/index.vue'export default &#123; data()&#123; return &#123; data1:&#123;&#125; &#125; &#125;, mounted()&#123; this.data1=&#123; name:'最外层', value1:&#123; name:'第一层', value2:&#123; name:'第二层', value3:&#123; name:'第三层' &#125; &#125; &#125; &#125; &#125;, components:&#123; Son &#125;&#125;&lt;/script&gt; 12345678910111213141516171819202122232425//子组件&lt;template lang=\"html\"&gt; &lt;div&gt; 最外层 &#123;&#123;data.name&#125;&#125; &lt;div&gt; 第一层 &#123;&#123;data.value1.name&#125;&#125; &lt;div&gt; 第二层 &#123;&#123;data.value1.value2.name&#125;&#125; &lt;div&gt; 第三层 &#123;&#123;data.value1.value2.value3.name&#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; props:['data']&#125;&lt;/script&gt; 解决办法是将mounted中的赋值过程，改在beforeMount或者created中进行。或者先给data一个空的数据结构。原因是子组件渲染时，data的赋值还没进行，所以属性都是undefined","categories":[{"name":"Vue笔记","slug":"Vue笔记","permalink":"http://YongMaple.github.io/categories/Vue笔记/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://YongMaple.github.io/tags/Vue/"}]},{"title":"扩展运算符(…)结合的使用","slug":"扩展运算符-…-结合的使用","date":"2017-01-17T08:32:23.000Z","updated":"2017-01-17T09:01:11.000Z","comments":true,"path":"2017/01/17/扩展运算符-…-结合的使用/","link":"","permalink":"http://YongMaple.github.io/2017/01/17/扩展运算符-…-结合的使用/","excerpt":"","text":"引入mapActions1import &#123; mapActions, mapGetters &#125; from 'vuex' 在methods中写123...mapActions([ 'SET_MAIL_LIST']), 数组中的所有方法会被引入，在使用时只要1this.SET_MAIL_LIST(&#123;mailList&#125;)","categories":[{"name":"Vue笔记","slug":"Vue笔记","permalink":"http://YongMaple.github.io/categories/Vue笔记/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://YongMaple.github.io/tags/Vue/"}]},{"title":"Mac拼音输入法","slug":"Mac拼音输入法","date":"2017-01-17T08:30:47.000Z","updated":"2017-02-04T07:39:16.000Z","comments":true,"path":"2017/01/17/Mac拼音输入法/","link":"","permalink":"http://YongMaple.github.io/2017/01/17/Mac拼音输入法/","excerpt":"","text":"中英文切换mac自身输入法：Command＋空格 汉字输入切换下一页（用鼠标去点，太low了吧）假如你输入的文字不再第一页，这是需要我们切换页，上一页，是键盘上的“［”，下一页是键盘上的“］”。mac自身的输入法，也可以使用上下箭头来操作，但是，总是要低头找这个箭头，不方便。 输入特殊符号如果你记住了某个特殊字符的快捷键，那么，你只需使用 shift+option+键盘上的任何字符，来输入。如：shift+option+p是符号：∏当然，所有特殊符号都记住，是不可能的事情 ，所以，你也可以调出mac的特殊符号集，快捷键是control+coomand+空格，快去试试看，找到你想要的","categories":[{"name":"工具使用","slug":"工具使用","permalink":"http://YongMaple.github.io/categories/工具使用/"}],"tags":[{"name":"开发工具","slug":"开发工具","permalink":"http://YongMaple.github.io/tags/开发工具/"},{"name":"Mac","slug":"Mac","permalink":"http://YongMaple.github.io/tags/Mac/"},{"name":"输入法","slug":"输入法","permalink":"http://YongMaple.github.io/tags/输入法/"}]},{"title":"Atom已安装package记录","slug":"Atom已安装package记录","date":"2017-01-17T07:36:13.000Z","updated":"2017-02-04T06:59:56.000Z","comments":true,"path":"2017/01/17/Atom已安装package记录/","link":"","permalink":"http://YongMaple.github.io/2017/01/17/Atom已安装package记录/","excerpt":"","text":"platformio-ide-terminal 命令行工具快捷键：control+`呼出 activate-power-mode 炫酷的打字特效 atom-beautify 美化、整理代码 atom-ctags 强化版的自动完成，借助于autocomplete-plus atom-ternjs JS代码智能提示 autocomplete-paths 文件路径智能提示 color-picker 颜色拾取器快捷键：commod+shift+c docblockr 代码注释自动生成 file-icons 文件图标 git-plus git插件 highlight-selected 选中高亮 language-vue 识别Vue linter 代码校验基础工具 linter-csslint 校验css linter-eslint 校验js，配合.eslintrc使用 linter-sass-lint 校验sass minimap 右边小地图 minimap-find-and-replace 在小地图上显示搜索匹配 minimap-highlight-selected 在小地图上显示选中的 pigments 根据色值直接显示颜色 simplified-chinese-menu 中文汉化包 vue-autocomplete Vue自动完成","categories":[{"name":"工具使用","slug":"工具使用","permalink":"http://YongMaple.github.io/categories/工具使用/"}],"tags":[{"name":"Atom","slug":"Atom","permalink":"http://YongMaple.github.io/tags/Atom/"},{"name":"开发工具","slug":"开发工具","permalink":"http://YongMaple.github.io/tags/开发工具/"},{"name":"配置","slug":"配置","permalink":"http://YongMaple.github.io/tags/配置/"}]}]}