{"meta":{"title":"YongMaple","subtitle":"我不生产代码，我只是代码的搬运工","description":"我不生产代码，我只是代码的搬运工","author":"YongMaple","url":"http://YongMaple.github.io"},"pages":[{"title":"","date":"2017-01-17T06:03:03.000Z","updated":"2017-01-17T06:03:03.000Z","comments":false,"path":"categories/index.html","permalink":"http://YongMaple.github.io/categories/index.html","excerpt":"","text":""},{"title":"","date":"2017-01-17T06:02:09.000Z","updated":"2017-01-17T06:02:09.000Z","comments":false,"path":"tags/index.html","permalink":"http://YongMaple.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"JS-forEach和map","slug":"JS-forEach和map","date":"2017-01-18T02:38:49.000Z","updated":"2017-01-18T02:39:35.000Z","comments":true,"path":"2017/01/18/JS-forEach和map/","link":"","permalink":"http://YongMaple.github.io/2017/01/18/JS-forEach和map/","excerpt":"","text":"第1个是遍历的数组内容；第2个是对应的数组索引;第3个是数组本身123[].forEach(function(value, index, array) &#123; // ...&#125;); 举个栗子1234[1,2,3,4,5].map(function(v, i)&#123;return v &gt; 3;&#125;);//[false, false, false, true, true][1,2,3,4,5].forEach(function(v, i)&#123;return v &gt; 3;&#125;);//undefined ==map()方法==：若这个回调函数有返回值，map()方法会产生一个新数组，这个新数组由原数组元素对应的回调函数的返回值构成。若没有返回值，则新数组的所有元素为undefined。==forEach方法==：仅仅为每个数组元素执行回调函数。 再举一个1234567var result = [1, 2, 3, 4, 5].map(function(v, i) &#123; return v+1&#125;);console.log(result); //[2, 3, 4, 5, 6][1, 2, 3, 4, 5].forEach(function(v, i) &#123; console.log(v,i) //1 0&#125;);","categories":[{"name":"JS基础","slug":"JS基础","permalink":"http://YongMaple.github.io/categories/JS基础/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://YongMaple.github.io/tags/JavaScript/"},{"name":"JS","slug":"JS","permalink":"http://YongMaple.github.io/tags/JS/"},{"name":"基础","slug":"基础","permalink":"http://YongMaple.github.io/tags/基础/"},{"name":"forEach","slug":"forEach","permalink":"http://YongMaple.github.io/tags/forEach/"},{"name":"map","slug":"map","permalink":"http://YongMaple.github.io/tags/map/"}]},{"title":"JS-sort","slug":"JS-sort","date":"2017-01-18T02:37:54.000Z","updated":"2017-01-18T02:38:23.000Z","comments":true,"path":"2017/01/18/JS-sort/","link":"","permalink":"http://YongMaple.github.io/2017/01/18/JS-sort/","excerpt":"","text":"12345var arr=new Array(1,8,7,6);arr.sort(function(a,b)&#123; return b-a&#125;);console.log(arrSimple2.join()); ==解释==：a,b表示数组中的任意两个元素，若return &gt; 0 b前a后；reutrn &lt; 0 a前b后；a=b时存在浏览器兼容==简化一下==：a-b输出从小到大排序，b-a输出从大到小排序。1234567891011121314151617var objectList = new Array();function Persion(name, age) &#123; this.name = name; this.age = age;&#125;objectList.push(new Persion('jack', 20));objectList.push(new Persion('tony', 25));objectList.push(new Persion('stone', 26));objectList.push(new Persion('mandy', 23));//按年龄从小到大排序objectList.sort(function(a, b) &#123; return a.age - b.age&#125;);for (var i = 0; i &lt; objectList.length; i++) &#123; console.log('age:' + objectList[i].age + ' name:' + objectList[i].name);&#125; 也可以对对象的属性进行排序","categories":[{"name":"JS基础","slug":"JS基础","permalink":"http://YongMaple.github.io/categories/JS基础/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://YongMaple.github.io/tags/JavaScript/"},{"name":"JS","slug":"JS","permalink":"http://YongMaple.github.io/tags/JS/"},{"name":"基础","slug":"基础","permalink":"http://YongMaple.github.io/tags/基础/"},{"name":"sort","slug":"sort","permalink":"http://YongMaple.github.io/tags/sort/"}]},{"title":"JS-match和exec","slug":"JS-match和exec","date":"2017-01-18T02:34:52.000Z","updated":"2017-01-18T02:35:35.000Z","comments":true,"path":"2017/01/18/JS-match和exec/","link":"","permalink":"http://YongMaple.github.io/2017/01/18/JS-match和exec/","excerpt":"","text":"举个栗子12345678var order = 'is2'var arr = order.match(/\\d+/)console.log(arr)//[\"2\", index: 2, input: \"is2\"]var arr2 = /\\d+/.exec(order);console.log(arr2)//[\"2\", index: 2, input: \"is2\"] 值得注意的是match和exec返回的结果都是数组","categories":[{"name":"JS基础","slug":"JS基础","permalink":"http://YongMaple.github.io/categories/JS基础/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://YongMaple.github.io/tags/JavaScript/"},{"name":"JS","slug":"JS","permalink":"http://YongMaple.github.io/tags/JS/"},{"name":"基础","slug":"基础","permalink":"http://YongMaple.github.io/tags/基础/"},{"name":"match","slug":"match","permalink":"http://YongMaple.github.io/tags/match/"},{"name":"exec","slug":"exec","permalink":"http://YongMaple.github.io/tags/exec/"},{"name":"正则","slug":"正则","permalink":"http://YongMaple.github.io/tags/正则/"}]},{"title":"JS-includes和indexOf","slug":"JS-includes和indexOf","date":"2017-01-18T02:33:03.000Z","updated":"2017-01-18T02:34:18.000Z","comments":true,"path":"2017/01/18/JS-includes和indexOf/","link":"","permalink":"http://YongMaple.github.io/2017/01/18/JS-includes和indexOf/","excerpt":"","text":"举个栗子123456var str = 'hahaha123'console.log(str.includes('1')); //trueconsole.log(str.indexOf('1')); //6var arr = [1,2,3,4,5]console.log(arr.includes(1)); //trueconsole.log(arr.indexOf(1)); //0","categories":[{"name":"JS基础","slug":"JS基础","permalink":"http://YongMaple.github.io/categories/JS基础/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://YongMaple.github.io/tags/JavaScript/"},{"name":"JS","slug":"JS","permalink":"http://YongMaple.github.io/tags/JS/"},{"name":"基础","slug":"基础","permalink":"http://YongMaple.github.io/tags/基础/"},{"name":"includes","slug":"includes","permalink":"http://YongMaple.github.io/tags/includes/"},{"name":"indexOf","slug":"indexOf","permalink":"http://YongMaple.github.io/tags/indexOf/"}]},{"title":"JS-join拼接","slug":"JS-join拼接","date":"2017-01-18T02:30:45.000Z","updated":"2017-01-18T02:32:06.000Z","comments":true,"path":"2017/01/18/JS-join拼接/","link":"","permalink":"http://YongMaple.github.io/2017/01/18/JS-join拼接/","excerpt":"","text":"123456var arr = new Array(3)arr[0] = \"George\"arr[1] = \"John\"arr[2] = \"Thomas\"console.log(arr.join(' ')) //George John Thomas","categories":[{"name":"JS基础","slug":"JS基础","permalink":"http://YongMaple.github.io/categories/JS基础/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://YongMaple.github.io/tags/JavaScript/"},{"name":"JS","slug":"JS","permalink":"http://YongMaple.github.io/tags/JS/"},{"name":"基础","slug":"基础","permalink":"http://YongMaple.github.io/tags/基础/"},{"name":"数组","slug":"数组","permalink":"http://YongMaple.github.io/tags/数组/"},{"name":"拼接","slug":"拼接","permalink":"http://YongMaple.github.io/tags/拼接/"}]},{"title":"JS-arguments","slug":"JS-arguments","date":"2017-01-18T02:29:30.000Z","updated":"2017-01-18T02:31:18.000Z","comments":true,"path":"2017/01/18/JS-arguments/","link":"","permalink":"http://YongMaple.github.io/2017/01/18/JS-arguments/","excerpt":"","text":"123456function test(a,b) &#123; console.log(arguments); //[\"123\"] console.log(arguments.length); //1 console.log(test.length); //2&#125;test('123') 通过arguments可以获取传入的参数，function.length可以获取本该传入的参数","categories":[{"name":"JS基础","slug":"JS基础","permalink":"http://YongMaple.github.io/categories/JS基础/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://YongMaple.github.io/tags/JavaScript/"},{"name":"JS","slug":"JS","permalink":"http://YongMaple.github.io/tags/JS/"},{"name":"基础","slug":"基础","permalink":"http://YongMaple.github.io/tags/基础/"},{"name":"参数","slug":"参数","permalink":"http://YongMaple.github.io/tags/参数/"}]},{"title":"JS-数组比较","slug":"JS-数组比较","date":"2017-01-18T02:27:39.000Z","updated":"2017-01-18T02:31:39.000Z","comments":true,"path":"2017/01/18/JS-数组比较/","link":"","permalink":"http://YongMaple.github.io/2017/01/18/JS-数组比较/","excerpt":"","text":"12345var x = [1,2];var y = [1,2];console.log(x == y); //falseconsole.log(x === y ); //false javascript不能直接用==或者===来判断两个数组是否相等，无论是相等还是全等都不行。要判断数组是否相等，要先将数组转换为字符串，再作比较123var x = [1,2];var y = [1,2];console.log(x.toString() == y.toString())","categories":[{"name":"JS基础","slug":"JS基础","permalink":"http://YongMaple.github.io/categories/JS基础/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://YongMaple.github.io/tags/JavaScript/"},{"name":"JS","slug":"JS","permalink":"http://YongMaple.github.io/tags/JS/"},{"name":"基础","slug":"基础","permalink":"http://YongMaple.github.io/tags/基础/"},{"name":"数组","slug":"数组","permalink":"http://YongMaple.github.io/tags/数组/"},{"name":"比较","slug":"比较","permalink":"http://YongMaple.github.io/tags/比较/"}]},{"title":"JS-String转数字类型","slug":"JS-String转数字类型","date":"2017-01-18T02:24:43.000Z","updated":"2017-01-18T02:31:48.000Z","comments":true,"path":"2017/01/18/JS-String转数字类型/","link":"","permalink":"http://YongMaple.github.io/2017/01/18/JS-String转数字类型/","excerpt":"","text":"需要将string转成数字时，如果需要保留小数，只要用+就行了123456var str = '123'console.log(parseInt(str))//转整数时没问题var str1 = '123.45'console.log(+str1)//只要用+就行了","categories":[{"name":"JS基础","slug":"JS基础","permalink":"http://YongMaple.github.io/categories/JS基础/"}],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://YongMaple.github.io/tags/JavaScript/"},{"name":"JS","slug":"JS","permalink":"http://YongMaple.github.io/tags/JS/"},{"name":"基础","slug":"基础","permalink":"http://YongMaple.github.io/tags/基础/"},{"name":"转换","slug":"转换","permalink":"http://YongMaple.github.io/tags/转换/"}]},{"title":"ES6-set","slug":"ES6-set","date":"2017-01-18T02:22:29.000Z","updated":"2017-01-18T02:22:52.000Z","comments":true,"path":"2017/01/18/ES6-set/","link":"","permalink":"http://YongMaple.github.io/2017/01/18/ES6-set/","excerpt":"","text":"是什么？set是类数组 可以用来做什么？可以用来给数组去重123let arr = ['jiayongfeng','jimmy','jimmy']let newArr = Array.from(new Set(arr))console.log(newArr) 怎么用？12345678910let user = &#123;name:'jiayongfeng',age:'28'&#125;let st = new Set() st.add(user) //添加st.delete(user) //删除st.has(user) //判断有无st.clear() //清空console.log(st.size) //查看数量for(let o of st)&#123; //遍历 console.log(o)&#125;","categories":[{"name":"ES6笔记","slug":"ES6笔记","permalink":"http://YongMaple.github.io/categories/ES6笔记/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://YongMaple.github.io/tags/ES6/"}]},{"title":"ES6-map","slug":"ES6-map","date":"2017-01-18T02:21:15.000Z","updated":"2017-01-18T02:21:46.000Z","comments":true,"path":"2017/01/18/ES6-map/","link":"","permalink":"http://YongMaple.github.io/2017/01/18/ES6-map/","excerpt":"","text":"是什么？map是键值对的类数组 可以用来做什么？对象中的key必须是string，map中key可以是任意值123456789let user = &#123; name : 'jiayongfeng', age : 28, 'english name':'jimmy'&#125;let map = new Map([ [user,'shuai'], //key可以是对象 ['qq','740534248']]) 怎么用？12345678910111213141516171819202122232425262728293031let map = new Map()map.set('name','jiayongfeng') //赋值map.set('age',28)console.log(map.get('age')) //取值console.log(map.size) //查看大小map.delete('age') //删除map.has('name') //判断有无map.clear() //清空//值得注意NaN在map和set是全等的console.log(NaN === NaN) //falsemap.set(NaN,'1111');map.set(NaN,'2222');console.log(map.get(NaN)); //2222for(let o of map)&#123; //遍历 console.log(o)&#125;let keys = map.keys() //获取所有的keylet values = map.values() //获取所有的valuelet entries = map.ertries() //获取所有的键值对for(let o of entries)&#123; console.log(o) //等同于上面的遍历&#125;var _this = &#123; des : 'shuai'&#125;;map.forEach(function (k, v) &#123; //遍历，同时可以传入this console.log(this.des,k, v);&#125;,_this);","categories":[{"name":"ES6笔记","slug":"ES6笔记","permalink":"http://YongMaple.github.io/categories/ES6笔记/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://YongMaple.github.io/tags/ES6/"}]},{"title":"ES6-Array","slug":"ES6-Array","date":"2017-01-18T02:20:04.000Z","updated":"2017-01-18T02:20:46.000Z","comments":true,"path":"2017/01/18/ES6-Array/","link":"","permalink":"http://YongMaple.github.io/2017/01/18/ES6-Array/","excerpt":"","text":"Array.from类似数组的数据结构转换为数组可以把带有length属性的对象和实现了iterator接口的对象转换为数组123456789101112var arr = Array.from(&#123;'0':'qq 740534248','1':'jimmy','length':2&#125;,function(item,index)&#123; return item + '---' + index&#125;);//必须是这种样子的对象，其他的不行console.log(arr);var set = new Set(['me','book','leo']);console.log(Array.from(set)); querySelectorAll查询出的类数组也能转换12345678910111213&lt;ul&gt; &lt;li&gt;item1&lt;/li&gt; &lt;li&gt;item2&lt;/li&gt; &lt;li&gt;item3&lt;/li&gt; &lt;li&gt;item4&lt;/li&gt; &lt;li&gt;item5&lt;/li&gt;&lt;/ul&gt;&lt;script&gt; var list = document.querySelectorAll('li'); console.log(list) //NodeList[5] console.log(Array.from(list)); //ArrayList[5]&lt;/script&gt; Array.of用来构建数组，防止Array(7)这种情况发生12345Array.of(7); // [7]Array.of(1, 2, 3); // [1, 2, 3]Array(7); // [ , , , , , , ]Array(1, 2, 3); // [1, 2, 3] find找到符合函数的第一个值1234567var arr = [ 22,33,44,55 ];var value = arr.find(function(value,index,arr)&#123; //值，索引，原数组 return value &gt; 33;&#125;);console.log(value); //44 findIndex找到符合函数的第一个值的索引1234567var arr = [ 22,33,44,55 ];var value = arr.findIndex(function(value,index,arr)&#123; //值，索引，原数组 return value &gt; 33;&#125;);console.log(value); //2 IndexOf比较123456var arr2 = [22,NaN];console.log(arr2.indexOf(NaN)) //-1console.log(arr2.findIndex(function(v)&#123; return Object.is(NaN,v);&#125;)); //1 copyWithincopyWithin(position,start,end);要被替换的开始位置，用于替换的起始位置，用于替换的结束位置（不包含）也可以用负数，代表从后往前数第几个，如-3代表正数第4个12345ar arr = [1,2,3,4,5,6,7];//arr.copyWithin(1,5,7); //[ 1, 6, 7, 4, 5, 6, 7 ]arr.copyWithin(2,-3,6); //[ 1, 2, 5, 6, 5, 6, 7 ]console.log(arr); fill填充数组fill(value,start,end)用来填充的值，被填充的起始位置，被填充的结束位置12345var arr = [1,2,3,4,5,6,7];//arr.fill(10)console.log(arr) //[10,10,10,10,10,10,10]arr.fill(10,2,5)console.log(arr) //[1,2,10,10,10,6,7]","categories":[{"name":"ES6笔记","slug":"ES6笔记","permalink":"http://YongMaple.github.io/categories/ES6笔记/"}],"tags":[{"name":"ES6","slug":"ES6","permalink":"http://YongMaple.github.io/tags/ES6/"}]},{"title":"JavaScript 源代码阅读工具","slug":"JavaScript-源代码阅读工具","date":"2017-01-17T08:41:07.000Z","updated":"2017-01-17T09:00:54.000Z","comments":true,"path":"2017/01/17/JavaScript-源代码阅读工具/","link":"","permalink":"http://YongMaple.github.io/2017/01/17/JavaScript-源代码阅读工具/","excerpt":"","text":"lambda-viewhttps://github.com/Jianru-Lin/lambda-view 命令行输入1lv /path/somewhere/xyz.js 1lv http://vuejs.org/js/vue.js","categories":[{"name":"工具使用","slug":"工具使用","permalink":"http://YongMaple.github.io/categories/工具使用/"}],"tags":[{"name":"源代码查看","slug":"源代码查看","permalink":"http://YongMaple.github.io/tags/源代码查看/"}]},{"title":"Atom使用eslint需要安装的包","slug":"Atom使用eslint需要安装的包","date":"2017-01-17T08:39:41.000Z","updated":"2017-01-17T09:00:59.000Z","comments":true,"path":"2017/01/17/Atom使用eslint需要安装的包/","link":"","permalink":"http://YongMaple.github.io/2017/01/17/Atom使用eslint需要安装的包/","excerpt":"","text":"1234567\"dependencies\": &#123; \"eslint\": \"^3.13.1\", \"eslint-config-airbnb\": \"^14.0.0\", \"eslint-plugin-import\": \"^2.2.0\", \"eslint-plugin-jsx-a11y\": \"^3.0.2\", \"eslint-plugin-react\": \"^6.9.0\" &#125; 123npm install eslint --saveeslint -veslint --init 1npm install eslint-config-airbnb --save 1npm install eslint-plugin-import --save 1npm install eslint-plugin-jsx-a11y --save 1npm install eslint-plugin-react --save .eslintrc.js1234567module.exports = &#123; \"extends\": \"airbnb\", //使用airbnb前端编码规范 \"installedESLint\": true, \"rules\": &#123; \"indent\": [\"error\", 4] //缩进4个空格 &#125;&#125;;","categories":[{"name":"工具使用","slug":"工具使用","permalink":"http://YongMaple.github.io/categories/工具使用/"}],"tags":[{"name":"Atom","slug":"Atom","permalink":"http://YongMaple.github.io/tags/Atom/"},{"name":"eslint","slug":"eslint","permalink":"http://YongMaple.github.io/tags/eslint/"}]},{"title":"带数字字符串排序","slug":"带数字字符串排序","date":"2017-01-17T08:35:25.000Z","updated":"2017-01-17T09:00:50.000Z","comments":true,"path":"2017/01/17/带数字字符串排序/","link":"","permalink":"http://YongMaple.github.io/2017/01/17/带数字字符串排序/","excerpt":"","text":"今天组里在Q群发了一个问题：为一个给定字符串排序，这个字符串里的每一个单词都包含一个数字，请按数字大小给这些单词排序。 例如：is2 Thi1s T4est 3a 的结果是 Thi1s is2 3a T4est然后出现了3种解题：123456789101112var a = 'is2 Thi1s T4est 3a'var newArr = a.split(' ').map(function(item)&#123; console.log(item) var arr = item.match(/\\d+/) return arr&#125;)var str = newArr.sort(function(a,b)&#123;return +a[0] &gt; +b[0]&#125;).map(function(item)&#123;return item['input']&#125;).join(' ')console.log(str) 将原字符串用’ ‘分割成数组，然后遍历，返回由match后生成的数组组成的数组将新的数组按照match数组第0个元素（匹配正则的数字）排序，然后遍历返回match数组input元素（原来的String），最后拼接成字符串123456789101112var words = 'is2 Thi1s T4est 3a'function orderNew(words)&#123; var ordered = []; var arr = words.split(' '); arr.forEach(function(item, index)&#123; var match = /\\d+/.exec(item); ordered[parseInt(match[0])] = item; &#125;); return ordered.join(' ');&#125;console.log(orderNew(words)); 同样的将原字符串用’ ‘分割成数组，然后遍历遍历时将原数组元素放入新数组第[macth数组第0个元素（匹配正则的数字）]个元素最后将新数组拼接成字符串因为是数字排序，所有将找到的数据当成索引用，但是可能存在问题，如果有重复数字时，会覆盖掉1234567var words = 'is2 Thi1s T4est 3a'function order(words)&#123; return words.split(' ').sort(function(a, b)&#123; return a.match(/\\d+/) - b.match(/\\d+/); &#125;).join(' ');&#125;console.log(order(words)); 更加简化，将原字符串分割后直接按照数组元素匹配正则后的结果排序后，拼接","categories":[{"name":"编程思考","slug":"编程思考","permalink":"http://YongMaple.github.io/categories/编程思考/"}],"tags":[{"name":"排序","slug":"排序","permalink":"http://YongMaple.github.io/tags/排序/"}]},{"title":"关于Vue生命周期的一些理解记录","slug":"关于Vue生命周期的一些理解记录","date":"2017-01-17T08:34:06.000Z","updated":"2017-01-17T09:01:06.000Z","comments":true,"path":"2017/01/17/关于Vue生命周期的一些理解记录/","link":"","permalink":"http://YongMaple.github.io/2017/01/17/关于Vue生命周期的一些理解记录/","excerpt":"","text":"今天遇到个问题，大致是这样的：从父组件向子组件传值，第三层数据终端报错undefined，先上测试代码： 12345678910111213141516171819202122232425262728293031323334//父组件&lt;template lang=\"html\"&gt; &lt;div&gt; &lt;son :data=\"data1\"&gt;&lt;/son&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Son from '../son/index.vue'export default &#123; data()&#123; return &#123; data1:&#123;&#125; &#125; &#125;, mounted()&#123; this.data1=&#123; name:'最外层', value1:&#123; name:'第一层', value2:&#123; name:'第二层', value3:&#123; name:'第三层' &#125; &#125; &#125; &#125; &#125;, components:&#123; Son &#125;&#125;&lt;/script&gt; 12345678910111213141516171819202122232425//子组件&lt;template lang=\"html\"&gt; &lt;div&gt; 最外层 &#123;&#123;data.name&#125;&#125; &lt;div&gt; 第一层 &#123;&#123;data.value1.name&#125;&#125; &lt;div&gt; 第二层 &#123;&#123;data.value1.value2.name&#125;&#125; &lt;div&gt; 第三层 &#123;&#123;data.value1.value2.value3.name&#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default &#123; props:['data']&#125;&lt;/script&gt; 解决办法是将mounted中的赋值过程，改在beforeMount或者created中进行。或者先给data一个空的数据结构。原因是子组件渲染时，data的赋值还没进行，所以属性都是undefined","categories":[{"name":"Vue笔记","slug":"Vue笔记","permalink":"http://YongMaple.github.io/categories/Vue笔记/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://YongMaple.github.io/tags/Vue/"}]},{"title":"扩展运算符(…)结合的使用","slug":"扩展运算符-…-结合的使用","date":"2017-01-17T08:32:23.000Z","updated":"2017-01-17T09:01:11.000Z","comments":true,"path":"2017/01/17/扩展运算符-…-结合的使用/","link":"","permalink":"http://YongMaple.github.io/2017/01/17/扩展运算符-…-结合的使用/","excerpt":"","text":"引入mapActions1import &#123; mapActions, mapGetters &#125; from 'vuex' 在methods中写123...mapActions([ 'SET_MAIL_LIST']), 数组中的所有方法会被引入，在使用时只要1this.SET_MAIL_LIST(&#123;mailList&#125;)","categories":[{"name":"Vue笔记","slug":"Vue笔记","permalink":"http://YongMaple.github.io/categories/Vue笔记/"}],"tags":[{"name":"Vue","slug":"Vue","permalink":"http://YongMaple.github.io/tags/Vue/"}]},{"title":"Mac拼音输入法","slug":"Mac拼音输入法","date":"2017-01-17T08:30:47.000Z","updated":"2017-01-17T09:01:18.000Z","comments":true,"path":"2017/01/17/Mac拼音输入法/","link":"","permalink":"http://YongMaple.github.io/2017/01/17/Mac拼音输入法/","excerpt":"","text":"中英文切换mac自身输入法：==Command＋空格== 汉字输入切换下一页（用鼠标去点，太low了吧）假如你输入的文字不再第一页，这是需要我们切换页，上一页，是键盘上的“==［==”，下一页是键盘上的“==］==”。mac自身的输入法，也可以使用上下箭头来操作，但是，总是要低头找这个箭头，不方便。 输入特殊符号如果你记住了某个特殊字符的快捷键，那么，你只需使用 ==shift+option+键盘上的任何字符==，来输入。如：==shift+option+p==是符号：∏当然，所有特殊符号都记住，是不可能的事情 ，所以，你也可以调出mac的特殊符号集，快捷键是==control+coomand+空格==，快去试试看，找到你想要的","categories":[{"name":"工具使用","slug":"工具使用","permalink":"http://YongMaple.github.io/categories/工具使用/"}],"tags":[{"name":"开发工具","slug":"开发工具","permalink":"http://YongMaple.github.io/tags/开发工具/"},{"name":"Mac","slug":"Mac","permalink":"http://YongMaple.github.io/tags/Mac/"},{"name":"输入法","slug":"输入法","permalink":"http://YongMaple.github.io/tags/输入法/"}]},{"title":"Atom已安装package记录","slug":"Atom已安装package记录","date":"2017-01-17T07:36:13.000Z","updated":"2017-01-17T07:58:22.000Z","comments":true,"path":"2017/01/17/Atom已安装package记录/","link":"","permalink":"http://YongMaple.github.io/2017/01/17/Atom已安装package记录/","excerpt":"","text":"atom-terminal-panel 命令行工具快捷键：control+`呼出 activate-power-mode 炫酷的打字特效 atom-beautify 美化、整理代码 atom-ctags 强化版的自动完成，借助于autocomplete-plus atom-ternjs JS代码智能提示 autocomplete-paths 文件路径智能提示 color-picker 颜色拾取器快捷键：commod+shift+c docblockr 代码注释自动生成 file-icons 文件图标 git-plus git插件 highlight-selected 选中高亮 language-vue 识别Vue linter 代码校验基础工具 linter-csslint 校验css linter-eslint 校验js，配合.eslintrc使用 linter-sass-lint 校验sass minimap 右边小地图 minimap-find-and-replace 在小地图上显示搜索匹配 minimap-highlight-selected 在小地图上显示选中的 pigments 根据色值直接显示颜色 simplified-chinese-menu 中文汉化包 vue-autocomplete Vue自动完成","categories":[{"name":"工具使用","slug":"工具使用","permalink":"http://YongMaple.github.io/categories/工具使用/"}],"tags":[{"name":"Atom","slug":"Atom","permalink":"http://YongMaple.github.io/tags/Atom/"},{"name":"开发工具","slug":"开发工具","permalink":"http://YongMaple.github.io/tags/开发工具/"},{"name":"配置","slug":"配置","permalink":"http://YongMaple.github.io/tags/配置/"}]}]}