<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大枫</title>
  
  <subtitle>Stay Hungry.Stay Foolish.</subtitle>
  <link href="https://yongmaple.com/atom.xml" rel="self"/>
  
  <link href="https://yongmaple.com/"/>
  <updated>2021-03-31T09:10:54.093Z</updated>
  <id>https://yongmaple.com/</id>
  
  <author>
    <name>YongMaple</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vite2工程化</title>
    <link href="https://yongmaple.com/2021/03/30/Vite2%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    <id>https://yongmaple.com/2021/03/30/Vite2%E5%B7%A5%E7%A8%8B%E5%8C%96/</id>
    <published>2021-03-30T16:18:49.000Z</published>
    <updated>2021-03-31T09:10:54.093Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Vite是什么"><a href="#Vite是什么" class="headerlink" title="Vite是什么"></a>Vite是什么</h4><p>Vite是一个开发构建工具，开发中它利用浏览器<strong>native ES Module</strong>特性按需导入源码，预打包依赖。<br>特点：</p><ul><li>启动快</li><li>更新快</li></ul><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init @vite/app</span><br></pre></td></tr></table></figure><h4 id="将资源引入为URL"><a href="#将资源引入为URL" class="headerlink" title="将资源引入为URL"></a>将资源引入为URL</h4><p>服务时引入一个静态资源会返回解析后的公共路径：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析为地址</span></span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./assets/logo.png&#x27;</span>  <span class="comment">// 输出/src/assets/logo.png</span></span><br></pre></td></tr></table></figure><p>使用这个路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;logo&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>可以打开Chrome Network，看App.vue，可以看到里面的地址是被解析后的公共路径<br><img src="/2021/03/30/Vite2%E5%B7%A5%E7%A8%8B%E5%8C%96/20210330162917.jpg" alt="image"></p><h4 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h4><p>vite.config.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  ...</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: resolve(<span class="string">&#x27;./src&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;comps&#x27;</span>: resolve(<span class="string">&#x27;./src/components&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>style中同样可以使用别名来引入图片等</p><h4 id="TS整合"><a href="#TS整合" class="headerlink" title="TS整合"></a>TS整合</h4><p>默认整合ts，可以直接使用，<code>&lt;script lang=&quot;ts&quot;&gt;</code>即可，需要固定ts版本的话，在<code>package.json</code>的<code>devDependencies</code>中直接添加<code>&quot;typescript&quot;: &quot;4.1.5&quot;</code>即可</p><p>tsconfig.json可以自行配置后放入项目即可</p><h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><p><code>vite.config.js</code>中添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  ...</span><br><span class="line">  server: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        target: <span class="string">&quot;***&quot;</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        rewrite: <span class="function">(<span class="params">path</span>) =&gt;</span> path.replace(<span class="regexp">/^\api/</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="数据mock"><a href="#数据mock" class="headerlink" title="数据mock"></a>数据mock</h4><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i mockjs -S</span><br><span class="line">npm i vite-plugin-mock -D</span><br></pre></td></tr></table></figure><p>引入插件，<code>vite.config.js</code>中添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; viteMockServe &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-mock&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  ...</span><br><span class="line">  plugins: [ viteMockServe(&#123;&#125;) ]</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>项目下创建<code>mock</code>文件夹，文件夹下就可以创建mock数据了，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    url: <span class="string">&quot;/api/users&quot;</span>,</span><br><span class="line">    method: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    response: <span class="function"><span class="params">req</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        code: <span class="number">0</span>,</span><br><span class="line">        data: [&#123; <span class="attr">name</span>: <span class="string">&quot;foo&quot;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&quot;bar&quot;</span> &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h4><p>使用<code>eslint + prettier</code>规范代码<br>添加如下依赖：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@typescript-eslint/eslint-plugin&quot;</span>: <span class="string">&quot;^4.15.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@typescript-eslint/parser&quot;</span>: <span class="string">&quot;^4.15.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vue/eslint-config-prettier&quot;</span>: <span class="string">&quot;^6.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vue/eslint-config-typescript&quot;</span>: <span class="string">&quot;^7.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vuedx/typescript-plugin-vue&quot;</span>: <span class="string">&quot;^0.6.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span>: <span class="string">&quot;^7.20.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint-plugin-prettier&quot;</span>: <span class="string">&quot;^3.3.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint-plugin-vue&quot;</span>: <span class="string">&quot;^7.6.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;prettier&quot;</span>: <span class="string">&quot;^2.2.1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>未完待续</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Vite是什么&quot;&gt;&lt;a href=&quot;#Vite是什么&quot; class=&quot;headerlink&quot; title=&quot;Vite是什么&quot;&gt;&lt;/a&gt;Vite是什么&lt;/h4&gt;&lt;p&gt;Vite是一个开发构建工具，开发中它利用浏览器&lt;strong&gt;native ES Module&lt;/s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>React中的nextTick</title>
    <link href="https://yongmaple.com/2021/03/29/React%E4%B8%AD%E7%9A%84nextTick/"/>
    <id>https://yongmaple.com/2021/03/29/React%E4%B8%AD%E7%9A%84nextTick/</id>
    <published>2021-03-29T15:57:09.000Z</published>
    <updated>2021-03-31T09:10:54.093Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在项目开发中，使用 AntV-L7 的 Draw-Control，需要实现在弹框中地图画圈框选范围。<br>使用了 hooks 的写法，在弹框出现后地图正常显示，点击画圈或其他绘图功能后，绘图的 canvas 只有约一半大小。<br>思考后认为应该是在<code>new DrawControl()</code>时，useState 还没执行赋值，错误范例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleDrawCircle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  setShowModal(<span class="literal">true</span>)</span><br><span class="line">  scene = <span class="keyword">new</span> Scene(&#123;</span><br><span class="line">    id: <span class="string">&#x27;drawCircleWrap&#x27;</span>,</span><br><span class="line">    map: <span class="keyword">new</span> GaodeMap(&#123;</span><br><span class="line">      style: <span class="string">&#x27;dark&#x27;</span>,</span><br><span class="line">      center: [<span class="number">120.190494</span>, <span class="number">30.189643</span>],</span><br><span class="line">      pitch: <span class="number">0</span>,</span><br><span class="line">      zoom: <span class="number">4</span>,</span><br><span class="line">      token: GAODE_TOKEN,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;)</span><br><span class="line">  scene.on(<span class="string">&#x27;loaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    drawControl = <span class="keyword">new</span> DrawControl(scene, &#123;</span><br><span class="line">      position: <span class="string">&#x27;topright&#x27;</span>,</span><br><span class="line">      layout: <span class="string">&#x27;horizontal&#x27;</span>,</span><br><span class="line">      controls: &#123;</span><br><span class="line">        point: <span class="literal">false</span>,</span><br><span class="line">        line: <span class="literal">false</span>,</span><br><span class="line">        polygon: <span class="literal">false</span>,</span><br><span class="line">        circle: <span class="literal">true</span>,</span><br><span class="line">        rect: <span class="literal">false</span>,</span><br><span class="line">        <span class="keyword">delete</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    scene.addControl(drawControl)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照以前写Vue的经验，只要用nextTick就能解决了，但是搜了一下，React中没有nextTick，但是有两种替代方式</p><ol><li><code>setTimeout(() =&gt; &#123;&#125;, 0)</code></li><li><code>useEffect(() =&gt; &#123;&#125;, [showModal])</code><br>两种方式在我看来都不是很好看……最后还是决定用<code>setTimeout</code>，因为用<code>useEffect</code>还需要判断下showModal是否为true</li></ol><p>如果用Class的写法，也可以这样<code>setState(&#123;&#125;,() =&gt; &#123;&#125;)</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;在项目开发中，使用 AntV-L7 的 Draw-Control，需要实现在弹框中地图画圈框选范围。&lt;br&gt;使用了 hooks 的写法，在弹</summary>
      
    
    
    
    
    <category term="React" scheme="https://yongmaple.com/tags/React/"/>
    
    <category term="AntV" scheme="https://yongmaple.com/tags/AntV/"/>
    
    <category term="nextTick" scheme="https://yongmaple.com/tags/nextTick/"/>
    
    <category term="hooks" scheme="https://yongmaple.com/tags/hooks/"/>
    
  </entry>
  
  <entry>
    <title>设置iTerm2免密登陆ssh远程服务器</title>
    <link href="https://yongmaple.com/2021/03/27/%E8%AE%BE%E7%BD%AEiTerm2%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86ssh%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://yongmaple.com/2021/03/27/%E8%AE%BE%E7%BD%AEiTerm2%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86ssh%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2021-03-27T15:51:52.000Z</published>
    <updated>2021-03-31T09:10:54.093Z</updated>
    
    <content type="html"><![CDATA[<p>转载自<a href="https://zhuanlan.zhihu.com/p/180500618">https://zhuanlan.zhihu.com/p/180500618</a></p><p>原文中代码存在bug，已修改，如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/expect -f</span></span><br><span class="line"><span class="comment">#trap sigwinch spawned</span></span><br><span class="line">  <span class="built_in">trap</span> &#123;</span><br><span class="line">    <span class="built_in">set</span> rows [stty rows]</span><br><span class="line">    <span class="built_in">set</span> cols [stty columns]</span><br><span class="line">    stty rows <span class="variable">$rows</span> columns <span class="variable">$cols</span> &lt; <span class="variable">$spawn_out</span>(slave,name)</span><br><span class="line">   &#125; WINCH</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> user username</span><br><span class="line"><span class="built_in">set</span> host 0.0.0.0</span><br><span class="line"><span class="built_in">set</span> password keys</span><br><span class="line"><span class="built_in">set</span> timeout -1</span><br><span class="line">spawn ssh -XY <span class="variable">$user</span>@<span class="variable">$host</span></span><br><span class="line">expect <span class="string">&quot;*password:*&quot;</span></span><br><span class="line">send <span class="string">&quot;<span class="variable">$password</span>\r&quot;</span></span><br><span class="line">interact</span><br><span class="line">expect eof</span><br></pre></td></tr></table></figure><p>简述下逻辑就是，</p><ol><li>在本地你想存在命令的地方建个文件夹</li><li>把上面的代码写好，保存进去</li><li>然后在iterm2里配置好</li><li>之后iterm2就可以一键执行代码了，用来登录服务器，并窗口可以自适应<br>具体可以看原文</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;转载自&lt;a href=&quot;https://zhuanlan.zhihu.com/p/180500618&quot;&gt;https://zhuanlan.zhihu.com/p/180500618&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原文中代码存在bug，已修改，如下：&lt;/p&gt;
&lt;figure clas</summary>
      
    
    
    
    
    <category term="iTerm2" scheme="https://yongmaple.com/tags/iTerm2/"/>
    
  </entry>
  
  <entry>
    <title>React递归渲染AntD菜单</title>
    <link href="https://yongmaple.com/2021/03/25/React%E9%80%92%E5%BD%92%E6%B8%B2%E6%9F%93AntD%E8%8F%9C%E5%8D%95/"/>
    <id>https://yongmaple.com/2021/03/25/React%E9%80%92%E5%BD%92%E6%B8%B2%E6%9F%93AntD%E8%8F%9C%E5%8D%95/</id>
    <published>2021-03-25T10:30:55.000Z</published>
    <updated>2021-03-31T09:10:54.093Z</updated>
    
    <content type="html"><![CDATA[<h3 id="layouts的写法"><a href="#layouts的写法" class="headerlink" title="layouts的写法"></a>layouts的写法</h3><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> renderMenu = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> data.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.routes &amp;&amp; item.routes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;SubMenu</span><br><span class="line">          key=&#123;item.name&#125;</span><br><span class="line">          title=&#123;item.name&#125;</span><br><span class="line">          icon=&#123;item.icon ? createIcon(item.icon) : <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;renderMenu(item.routes)&#125;</span><br><span class="line">        &lt;/SubMenu&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (item.other) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Menu.Item key=&#123;item.path&#125; icon=&#123;item.icon ? createIcon(item.icon) : <span class="string">&#x27;&#x27;</span>&#125;&gt;</span><br><span class="line">        &#123;item.name&#125;</span><br><span class="line">      &lt;/Menu.Item&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> handleMenu = <span class="function">(<span class="params">&#123; key &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  history.push(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  ...</span><br><span class="line">  &lt;Menu</span><br><span class="line">    defaultSelectedKeys=&#123;[location.pathname]&#125;</span><br><span class="line">    mode=<span class="string">&quot;inline&quot;</span></span><br><span class="line">    inlineCollapsed=&#123;collapsed&#125;</span><br><span class="line">    className=&#123;style.menu&#125;</span><br><span class="line">    onClick=&#123;handleMenu&#125;</span><br><span class="line">  &gt;</span><br><span class="line">    &#123;renderMenu(routes)&#125;</span><br><span class="line">  &lt;/Menu&gt;</span><br><span class="line">  ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="routes的写法"><a href="#routes的写法" class="headerlink" title="routes的写法"></a>routes的写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  exact: <span class="literal">true</span>,</span><br><span class="line">  path: <span class="string">&#x27;/foo&#x27;</span>,</span><br><span class="line">  component: <span class="string">&#x27;@/pages/foo&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">  icon: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  exact: <span class="literal">true</span>,</span><br><span class="line">  path: <span class="string">&#x27;/foobar&#x27;</span>,</span><br><span class="line">  component: <span class="string">&#x27;@/pages/foobar&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;Foobar&#x27;</span>,</span><br><span class="line">  icon: <span class="string">&#x27;foobar&#x27;</span>,</span><br><span class="line">  other: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  exact: <span class="literal">true</span>,</span><br><span class="line">  name: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">  icon: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      exact: <span class="literal">true</span>,</span><br><span class="line">      path: <span class="string">&#x27;/baz&#x27;</span>,</span><br><span class="line">      component: <span class="string">&#x27;@/pages/baz&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;Baz&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">exact</span>: <span class="literal">true</span>, </span><br><span class="line">      path: <span class="string">&#x27;/qux&#x27;</span>, </span><br><span class="line">      component: <span class="string">&#x27;@/pages/qux&#x27;</span>, </span><br><span class="line">      name: <span class="string">&#x27;Qux&#x27;</span> </span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;layouts的写法&quot;&gt;&lt;a href=&quot;#layouts的写法&quot; class=&quot;headerlink&quot; title=&quot;layouts的写法&quot;&gt;&lt;/a&gt;layouts的写法&lt;/h3&gt;</summary>
    
    
    
    
    <category term="AntD" scheme="https://yongmaple.com/tags/AntD/"/>
    
    <category term="React" scheme="https://yongmaple.com/tags/React/"/>
    
    <category term="Menu" scheme="https://yongmaple.com/tags/Menu/"/>
    
  </entry>
  
  <entry>
    <title>hexo中图片组件hexo-asset-image的使用</title>
    <link href="https://yongmaple.com/2021/03/16/hexo%E4%B8%AD%E5%9B%BE%E7%89%87%E7%BB%84%E4%BB%B6hexo-asset-image%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://yongmaple.com/2021/03/16/hexo%E4%B8%AD%E5%9B%BE%E7%89%87%E7%BB%84%E4%BB%B6hexo-asset-image%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-03-16T17:30:10.000Z</published>
    <updated>2021-03-31T09:10:54.093Z</updated>
    
    <content type="html"><![CDATA[<p>hexo中直接通过<code>npm i hexo-asset-image</code>下载的组件由于没人维护，目前无法直接使用。<br>根据<a href="https://blog.csdn.net/xjm850552586/article/details/84101345">https://blog.csdn.net/xjm850552586/article/details/84101345</a>的代码.<br>我fork了原<code>hexo-asset-image</code>项目，在npm上发布了<code>hexo-assets-images</code>组件。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-<span class="built_in">image</span> --<span class="built_in">save</span></span><br></pre></td></tr></table></figure><p><code>hexo new post [title]</code>后，会在_posts文件夹下生成同名文件夹<br>在需要插入图片的地方写<code>![logo](logo.jpg)</code>，将插入<code>[title]</code>文件夹下logo.jpg.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;hexo中直接通过&lt;code&gt;npm i hexo-asset-image&lt;/code&gt;下载的组件由于没人维护，目前无法直接使用。&lt;br&gt;根据&lt;a href=&quot;https://blog.csdn.net/xjm850552586/article/details/841013</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>移动端100VH时高度不满</title>
    <link href="https://yongmaple.com/2021/03/09/%E7%A7%BB%E5%8A%A8%E7%AB%AF100VH%E6%97%B6%E9%AB%98%E5%BA%A6%E4%B8%8D%E6%BB%A1/"/>
    <id>https://yongmaple.com/2021/03/09/%E7%A7%BB%E5%8A%A8%E7%AB%AF100VH%E6%97%B6%E9%AB%98%E5%BA%A6%E4%B8%8D%E6%BB%A1/</id>
    <published>2021-03-09T14:31:44.000Z</published>
    <updated>2021-03-31T09:10:54.093Z</updated>
    
    <content type="html"><![CDATA[<p>参考自<a href="https://blog.csdn.net/lgno2/article/details/109446447">移动端避免使用100vh</a></p><h4 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h4><p>钉钉H5开发，使用<code>dd_full_screen=true&amp;showmenu=false</code>设置为全屏，在iphoneX上，高度不足，底部缺失部分<br><img src="/2021/03/09/%E7%A7%BB%E5%8A%A8%E7%AB%AF100VH%E6%97%B6%E9%AB%98%E5%BA%A6%E4%B8%8D%E6%BB%A1/image.png" alt="image"></p><h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>核心问题是移动浏览器（我正在为您浏览，Chrome和Safari）具有“帮助”功能，其中地址栏有时可见，有时隐藏，从而改变了视口的可见大小。这些浏览器没有将100vh高度调整为视口高度变化时屏幕的可见部分，而是将100vh设置为浏览器的高度，并隐藏了地址栏。结果是，当地址栏可见时，屏幕的底部将被切除。</p><p>如下所示：<br><img src="/2021/03/09/%E7%A7%BB%E5%8A%A8%E7%AB%AF100VH%E6%97%B6%E9%AB%98%E5%BA%A6%E4%B8%8D%E6%BB%A1/image2.jpg" alt="image2"></p><p>当显示地址栏时，由于移动浏览器错误地将100vh设置为屏幕高度而没有显示地址栏，因此屏幕底部被切断。在上图中，应隐藏在屏幕底部的按钮。更糟糕的是，当用户首次访问移动设备上的网站时，地址栏将在顶部可见，因此默认的体验是破碎的体验。</p><h4 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h4><p>使用window.innerHeight动态设置高度</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;参考自&lt;a href=&quot;https://blog.csdn.net/lgno2/article/details/109446447&quot;&gt;移动端避免使用100vh&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;复现：&quot;&gt;&lt;a href=&quot;#复现：&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="移动端适配" scheme="https://yongmaple.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>AntD中menu动态生成，及动态生成Icon</title>
    <link href="https://yongmaple.com/2021/03/09/AntD%E4%B8%ADmenu%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%EF%BC%8C%E5%8F%8A%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90Icon/"/>
    <id>https://yongmaple.com/2021/03/09/AntD%E4%B8%ADmenu%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%EF%BC%8C%E5%8F%8A%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90Icon/</id>
    <published>2021-03-09T14:28:30.000Z</published>
    <updated>2021-03-31T09:10:54.093Z</updated>
    
    <content type="html"><![CDATA[<p>在 routes.ts 里面配置路由，menu 根据 routes 动态生成</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    exact: <span class="literal">false</span>,</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    component: <span class="string">&#x27;@/layouts/index&#x27;</span>,</span><br><span class="line">    routes: [</span><br><span class="line">      &#123;</span><br><span class="line">        exact: <span class="literal">true</span>,</span><br><span class="line">        path: <span class="string">&#x27;/overview&#x27;</span>,</span><br><span class="line">        component: <span class="string">&#x27;@/pages/Overview&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;总览&#x27;</span>,</span><br><span class="line">        icon: <span class="string">&#x27;RadarChartOutlined&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        exact: <span class="literal">true</span>,</span><br><span class="line">        path: <span class="string">&#x27;/events&#x27;</span>,</span><br><span class="line">        component: <span class="string">&#x27;@/pages/Events&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;事件列表&#x27;</span>,</span><br><span class="line">        icon: <span class="string">&#x27;BarsOutlined&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        exact: <span class="literal">true</span>,</span><br><span class="line">        path: <span class="string">&#x27;/feedback&#x27;</span>,</span><br><span class="line">        component: <span class="string">&#x27;@/pages/Feedback&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;情报反馈&#x27;</span>,</span><br><span class="line">        icon: <span class="string">&#x27;AlertOutlined&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        exact: <span class="literal">true</span>,</span><br><span class="line">        path: <span class="string">&#x27;/contacts&#x27;</span>,</span><br><span class="line">        component: <span class="string">&#x27;@/pages/Contacts&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;联系人&#x27;</span>,</span><br><span class="line">        icon: <span class="string">&#x27;DeploymentUnitOutlined&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        exact: <span class="literal">true</span>,</span><br><span class="line">        name: <span class="string">&#x27;后台管理&#x27;</span>,</span><br><span class="line">        icon: <span class="string">&#x27;SlidersOutlined&#x27;</span>,</span><br><span class="line">        routes: [</span><br><span class="line">          &#123;</span><br><span class="line">            exact: <span class="literal">true</span>,</span><br><span class="line">            path: <span class="string">&#x27;/classifications&#x27;</span>,</span><br><span class="line">            component: <span class="string">&#x27;@/pages/Classifications&#x27;</span>,</span><br><span class="line">            name: <span class="string">&#x27;分类管理&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            exact: <span class="literal">true</span>,</span><br><span class="line">            path: <span class="string">&#x27;/records&#x27;</span>,</span><br><span class="line">            component: <span class="string">&#x27;@/pages/Records&#x27;</span>,</span><br><span class="line">            name: <span class="string">&#x27;操作日志&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>生成 menu</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Icon <span class="keyword">from</span> <span class="string">&#x27;@alipay/bigfish/icons&#x27;</span>;</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">// 用React.createElement动态创建元素</span></span><br><span class="line"><span class="keyword">const</span> createIcon = <span class="function">(<span class="params">name: string</span>) =&gt;</span></span><br><span class="line">  React.createElement(Icon &amp;&amp; (Icon <span class="keyword">as</span> any)[name], &#123;</span><br><span class="line">    style: &#123; <span class="attr">fontSize</span>: <span class="string">&#x27;16px&#x27;</span> &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="keyword">const</span> renderMenu = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> data.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.routes &amp;&amp; item.routes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;SubMenu key=&#123;item.name&#125; title=&#123;item.name&#125; icon=&#123;item.icon ? createIcon(item.icon) : <span class="string">&#x27;&#x27;</span>&#125;&gt;</span><br><span class="line">          &#123;renderMenu(item.routes)&#125;</span><br><span class="line">        &lt;/SubMenu&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Menu.Item key=&#123;item.path&#125; icon=&#123;item.icon ? createIcon(item.icon) : <span class="string">&#x27;&#x27;</span>&#125;&gt;</span><br><span class="line">        &#123;item.name&#125;</span><br><span class="line">      &lt;/Menu.Item&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  ...</span><br><span class="line">    &lt;Menu</span><br><span class="line">      defaultSelectedKeys=&#123;[location.pathname]&#125;</span><br><span class="line">      <span class="comment">// defaultOpenKeys=&#123;[&#x27;sub1&#x27;]&#125;</span></span><br><span class="line">      mode=<span class="string">&quot;inline&quot;</span></span><br><span class="line">      inlineCollapsed=&#123;collapsed&#125;</span><br><span class="line">      className=&#123;style.menu&#125;</span><br><span class="line">      onClick=&#123;handleMenu&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123; renderMenu(routes) &#125;</span><br><span class="line">    &lt;/Menu&gt;</span><br><span class="line">  ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 routes.ts 里面配置路由，menu 根据 routes 动态生成&lt;/p&gt;</summary>
    
    
    
    
    <category term="AntD" scheme="https://yongmaple.com/tags/AntD/"/>
    
  </entry>
  
  <entry>
    <title>在mac上使用android模拟器通过chrome调试webview内页面</title>
    <link href="https://yongmaple.com/2021/02/09/%E5%9C%A8mac%E4%B8%8A%E4%BD%BF%E7%94%A8android%E6%A8%A1%E6%8B%9F%E5%99%A8%E9%80%9A%E8%BF%87chrome%E8%B0%83%E8%AF%95webview%E5%86%85%E9%A1%B5%E9%9D%A2/"/>
    <id>https://yongmaple.com/2021/02/09/%E5%9C%A8mac%E4%B8%8A%E4%BD%BF%E7%94%A8android%E6%A8%A1%E6%8B%9F%E5%99%A8%E9%80%9A%E8%BF%87chrome%E8%B0%83%E8%AF%95webview%E5%86%85%E9%A1%B5%E9%9D%A2/</id>
    <published>2021-02-09T14:23:05.000Z</published>
    <updated>2021-03-31T09:10:54.093Z</updated>
    
    <content type="html"><![CDATA[<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol><li>钉钉dev App <a href="http://download.alicdn.com/wireless/dingtalk/latest/rimet_10006337.apk?spm=ding_open_doc.document.0.0.4f077391n1eV6r&file=rimet_10006337.apk">下载地址</a></li><li>网易mumu模拟器（不使用VirtualBox等违规软件）</li><li>adb工具包<br>• 检查是否安装过 <code>adb devices</code><br>• 通过brew安装 <code>brew cask install android-platform-tools</code><br>• 检查不通过的话，重启一下 <code>adb kill-server &amp;&amp; adb server &amp;&amp; adb shell</code></li><li>android开发工具(只为了android的驱动，如果可以连接，那就不用装了) <a href="https://developer.android.com/">下载地址</a></li><li>chrome浏览器<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4></li><li>在mumu中安钉钉dev.apk，拖进去就行</li><li>在mumu中打开<code>开发者模式</code>，并启用<code>usb调试</code></li><li>在mumu文件管理中点击左上角图标，再点击左下角设置图标，选择常规设置-访问模式，选择超级用户访问模式</li><li>在mumu文件管理中搜索hosts，添加mac的ip地址和local.alipay.net 如：<code>30.38.33.35       local.alipay.net</code></li><li>打开钉钉dev，前往要调试的页面</li><li>打开chrome，输入<code>chrome://inspect</code></li><li>选择对应页面调试<h4 id="可能存在的问题"><a href="#可能存在的问题" class="headerlink" title="可能存在的问题"></a>可能存在的问题</h4></li><li>如果手机打开页面后，inspect中仍然看不到，就重启adb  <code>adb kill-server &amp;&amp; adb server &amp;&amp; adb shell</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;钉钉dev App &lt;a href=&quot;http://download.alicdn.com/wireless/d</summary>
      
    
    
    
    
    <category term="android模拟器" scheme="https://yongmaple.com/tags/android%E6%A8%A1%E6%8B%9F%E5%99%A8/"/>
    
    <category term="webview" scheme="https://yongmaple.com/tags/webview/"/>
    
  </entry>
  
  <entry>
    <title>用JS获取translate3d中的数值</title>
    <link href="https://yongmaple.com/2021/02/09/%E7%94%A8JS%E8%8E%B7%E5%8F%96translate3d%E4%B8%AD%E7%9A%84%E6%95%B0%E5%80%BC/"/>
    <id>https://yongmaple.com/2021/02/09/%E7%94%A8JS%E8%8E%B7%E5%8F%96translate3d%E4%B8%AD%E7%9A%84%E6%95%B0%E5%80%BC/</id>
    <published>2021-02-09T14:21:42.000Z</published>
    <updated>2021-03-31T09:10:54.093Z</updated>
    
    <content type="html"><![CDATA[<p>代码如下：</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取DOM</span></span><br><span class="line"><span class="keyword">const</span> scrollContainer = <span class="built_in">document</span>.getElementsByClassName(</span><br><span class="line">  <span class="string">&#x27;viewer-container__viewer-image-container&#x27;</span></span><br><span class="line">)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">const</span> imgDom = scrollContainer.childNodes[<span class="number">0</span>]</span><br><span class="line"><span class="comment">// 获取transform</span></span><br><span class="line"><span class="keyword">const</span> translates = <span class="built_in">document</span>.defaultView.getComputedStyle(imgDom, <span class="literal">null</span>).transform <span class="comment">//  matrix(a,b,c,d,e,f)</span></span><br><span class="line"><span class="comment">// 分割matrix矩阵，需要先清除多出来的一个)</span></span><br><span class="line"><span class="keyword">const</span> split = translates.replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="comment">// 获取y轴值</span></span><br><span class="line"><span class="keyword">const</span> y = <span class="built_in">Number</span>(split[split.length - <span class="number">1</span>])</span><br><span class="line"><span class="comment">// 获取x轴值</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="built_in">Number</span>(split[split.length - <span class="number">2</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;代码如下：&lt;/p&gt;</summary>
    
    
    
    
    <category term="translate3d" scheme="https://yongmaple.com/tags/translate3d/"/>
    
  </entry>
  
  <entry>
    <title>JS十大经典排序</title>
    <link href="https://yongmaple.com/2021/01/05/JS%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F/"/>
    <id>https://yongmaple.com/2021/01/05/JS%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F/</id>
    <published>2021-01-05T15:07:22.000Z</published>
    <updated>2021-03-31T09:10:54.093Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/yinhao-jack/p/10838401.html">https://www.cnblogs.com/yinhao-jack/p/10838401.html</a></p><h4 id="1-冒泡排序（Bubble-Sort）"><a href="#1-冒泡排序（Bubble-Sort）" class="headerlink" title="1. 冒泡排序（Bubble Sort）"></a>1. 冒泡排序（Bubble Sort）</h4><p>冒泡排序须知：<br>作为最简单的排序算法之一，冒泡排序给我的感觉就像 Abandon 在单词书里出现的感觉一样，每次都在第一页第一位，所以最熟悉。。。冒泡排序还有一种优化算法，就是立一个 flag，当在一趟序列遍历中元素没有发生交换，则证明该序列已经有序。但这种改进对于提升性能来说并没有什么太大作用。。。</p><p>什么时候最快（Best Cases）：<br>当输入的数据已经是正序时（都已经是正序了，我还要你冒泡排序有何用啊。。。。）</p><p>什么时候最慢（Worst Cases）：<br>当输入的数据是反序时（写一个 for 循环反序输出数据不就行了，干嘛要用你冒泡排序呢，我是闲的吗。。。）</p><p>冒泡排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="comment">//相邻元素两两对比</span></span><br><span class="line">        <span class="keyword">var</span> temp = arr[j + <span class="number">1</span>] <span class="comment">//元素交换</span></span><br><span class="line">        arr[j + <span class="number">1</span>] = arr[j]</span><br><span class="line">        arr[j] = temp</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-选择排序（Selection-Sort）"><a href="#2-选择排序（Selection-Sort）" class="headerlink" title="2. 选择排序（Selection Sort）"></a>2. 选择排序（Selection Sort）</h4><p>选择排序须知：<br>在时间复杂度上表现最稳定的排序算法之一，因为无论什么数据进去都是 O(n²)的时间复杂度。。。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p><p>选择排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length</span><br><span class="line">  <span class="keyword">var</span> minIndex, temp</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    minIndex = i</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">        <span class="comment">//寻找最小的数</span></span><br><span class="line">        minIndex = j <span class="comment">//将最小数的索引保存</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = arr[i]</span><br><span class="line">    arr[i] = arr[minIndex]</span><br><span class="line">    arr[minIndex] = temp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-插入排序（Insertion-Sort）"><a href="#3-插入排序（Insertion-Sort）" class="headerlink" title="3. 插入排序（Insertion Sort）"></a>3. 插入排序（Insertion Sort）</h4><p>插入排序须知：<br>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。当然，如果你说你打扑克牌摸牌的时候从来不按牌的大小整理牌，那估计这辈子你对插入排序的算法都不会产生任何兴趣了。。。<br>插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。对于这种算法，得了懒癌的我就套用教科书上的一句经典的话吧：感兴趣的同学可以在课后自行研究。。。</p><p>插入排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length</span><br><span class="line">  <span class="keyword">var</span> preIndex, current</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    preIndex = i - <span class="number">1</span></span><br><span class="line">    current = arr[i]</span><br><span class="line">    <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class="line">      arr[preIndex + <span class="number">1</span>] = arr[preIndex]</span><br><span class="line">      preIndex--</span><br><span class="line">    &#125;</span><br><span class="line">    arr[preIndex + <span class="number">1</span>] = current</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-希尔排序（Shell-Sort）"><a href="#4-希尔排序（Shell-Sort）" class="headerlink" title="4. 希尔排序（Shell Sort）"></a>4. 希尔排序（Shell Sort）</h5><p>希尔排序须知：<br>希尔排序是插入排序的一种更高效率的实现。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第 4 版》的合著者 Robert Sedgewick 提出的。在这里，我就使用了这种方法。</p><p>希尔排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length,</span><br><span class="line">    temp,</span><br><span class="line">    gap = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> (gap &lt; len / <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">//动态定义间隔序列</span></span><br><span class="line">    gap = gap * <span class="number">3</span> + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (gap; gap &gt; <span class="number">0</span>; gap = <span class="built_in">Math</span>.floor(gap / <span class="number">3</span>)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = gap; i &lt; len; i++) &#123;</span><br><span class="line">      temp = arr[i]</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = i - gap; j &gt; <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j -= gap) &#123;</span><br><span class="line">        arr[j + gap] = arr[j]</span><br><span class="line">      &#125;</span><br><span class="line">      arr[j + gap] = temp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-归并排序（Merge-Sort）"><a href="#5-归并排序（Merge-Sort）" class="headerlink" title="5. 归并排序（Merge Sort）"></a>5. 归并排序（Merge Sort）</h4><p>归并排序须知：<br>作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：</p><p>自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）<br>自下而上的迭代<br>在《数据结构与算法 JavaScript 描述》中，作者给出了自下而上的迭代方法。但是对于递归法，作者却认为：</p><blockquote><p>However, it is not possible to do so in JavaScript, as the recursion goes too deep for the language to handle.<br>然而,在 JavaScript 中这种方式不太可行,因为这个算法的递归深度对它来讲太深了。</p></blockquote><p>说实话，我不太理解这句话。意思是 JavaScript 编译器内存太小，递归太深容易造成内存溢出吗？还望有大神能够指教。<br>更新：<br>在《JavaScript 语言精粹》的第四章里提到了递归问题。对我之前的疑问进行了解答：</p><blockquote><p>Some languages offer the tail recursion optimization. This means that if a function returns the result of invoking itself recursively, then the invocation is replaced with a loop, which can significantly speed things up. Unfortunately, JavaScript does not currently provide tail recursion optimization. Functions that recurse very deeply can fail by exhausting the return stack.<br>一些语言提供了尾递归优化。这意味着如果一个函数返回自身递归调用的结果，那么调用的过程会被替换为一个循环，它可以显著提高速度。遗憾的是，JavaScript 当前并没有提供尾递归优化。深度递归的函数可能会因为堆栈溢出而运行失败。</p></blockquote><p>简而言之，就是 JavaScript 没有对递归进行优化。运用递归函数不仅没有运行速度上的优势，还可能造成程序运行失败。因此不建议使用递归。</p><p>和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是 O(n log n）的时间复杂度。代价是需要额外的内存空间。</p><p>归并排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//采用自上而下的递归方法</span></span><br><span class="line">  <span class="keyword">var</span> len = arr.length</span><br><span class="line">  <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> middle = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>),</span><br><span class="line">    left = arr.slice(<span class="number">0</span>, middle),</span><br><span class="line">    right = arr.slice(middle)</span><br><span class="line">  <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (left.length &gt; <span class="number">0</span> &amp;&amp; right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]) &#123;</span><br><span class="line">      result.push(left.shift())</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.push(right.shift())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (left.length) result.push(left.shift())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (right.length) result.push(right.shift())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-快速排序（Quick-Sort）"><a href="#6-快速排序（Quick-Sort）" class="headerlink" title="6. 快速排序（Quick Sort）"></a>6. 快速排序（Quick Sort）</h4><p>快速排序须知：<br>又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。<br>快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高! 它是处理大数据最快的排序算法之一了。虽然 Worst Case 的时间复杂度达到了 O(n²)，但是人家就是优秀，在大多数情况下都比平均时间复杂度为 O(n log n) 的排序算法表现要更好，可是这是为什么呢，我也不知道。。。好在我的强迫症又犯了，查了 N 多资料终于在《算法艺术与信息学竞赛》上找到了满意的答案：</p><p>快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(n log n) ，且 O(n log n)记号中隐含的常数因子很小，比复杂度稳定等于 O(n log n)的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。</p><p>更新：<br>《算法 第四版》里对于快速排序的优缺点进行了更加明确的解释：</p><p>快速排序的内循环比大多数排序算法都要短小，这意味着它无论是在理论上还是在实际中都要更快。它的主要缺点是非常脆弱，在实现时要非常小心才能避免低劣的性能。</p><p>快速排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr, left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length,</span><br><span class="line">    partitionIndex,</span><br><span class="line">    left = <span class="keyword">typeof</span> left != <span class="string">&#x27;number&#x27;</span> ? <span class="number">0</span> : left,</span><br><span class="line">    right = <span class="keyword">typeof</span> right != <span class="string">&#x27;number&#x27;</span> ? len - <span class="number">1</span> : right</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">    partitionIndex = partition(arr, left, right)</span><br><span class="line">    quickSort(arr, left, partitionIndex - <span class="number">1</span>)</span><br><span class="line">    quickSort(arr, partitionIndex + <span class="number">1</span>, right)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">arr, left, right</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//分区操作</span></span><br><span class="line">  <span class="keyword">var</span> pivot = left, <span class="comment">//设定基准值（pivot）</span></span><br><span class="line">    index = pivot + <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = index; i &lt;= right; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; arr[pivot]) &#123;</span><br><span class="line">      swap(arr, i, index)</span><br><span class="line">      index++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  swap(arr, pivot, index - <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> index - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> temp = arr[i]</span><br><span class="line">  arr[i] = arr[j]</span><br><span class="line">  arr[j] = temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-堆排序（Heap-Sort）"><a href="#7-堆排序（Heap-Sort）" class="headerlink" title="7. 堆排序（Heap Sort）"></a>7. 堆排序（Heap Sort）</h4><p>堆排序须知：<br>堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：</p><pre><code>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列</code></pre><p>堆排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> len;    <span class="comment">//因为声明的多个函数都需要数据长度，所以把len设置成为全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildMaxHeap</span>(<span class="params">arr</span>) </span>&#123;   <span class="comment">//建立大顶堆</span></span><br><span class="line">     len = arr.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="built_in">Math</span>.floor(len/<span class="number">2</span>); i &amp;gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        heapify(arr, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapify</span>(<span class="params">arr, i</span>) </span>&#123;     <span class="comment">//堆调整</span></span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">2</span> * i + <span class="number">1</span>,</span><br><span class="line">         right = <span class="number">2</span> * i + <span class="number">2</span>,</span><br><span class="line">         largest = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">         largest = right;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line">         swap(arr, i, largest);</span><br><span class="line">        heapify(arr, largest);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">heapSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">     buildMaxHeap(arr);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length-<span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">         swap(arr, <span class="number">0</span>, i);</span><br><span class="line">        len--;</span><br><span class="line">        heapify(arr, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-计数排序（Counting-Sort）"><a href="#8-计数排序（Counting-Sort）" class="headerlink" title="8. 计数排序（Counting Sort）"></a>8. 计数排序（Counting Sort）</h4><p>计数排序须知：<br>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。<br>作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p><p>计数排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countingSort</span>(<span class="params">arr, maxValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bucket = <span class="keyword">new</span> <span class="built_in">Array</span>(maxValue + <span class="number">1</span>),</span><br><span class="line">    sortedIndex = <span class="number">0</span></span><br><span class="line">  ;(arrLen = arr.length), (bucketLen = maxValue + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrLen; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!bucket[arr[i]]) &#123;</span><br><span class="line">      bucket[arr[i]] = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    bucket[arr[i]]++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; bucketLen; j++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (bucket[j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      arr[sortedIndex++] = j</span><br><span class="line">      bucket[j]--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-桶排序（Bucket-Sort）"><a href="#9-桶排序（Bucket-Sort）" class="headerlink" title="9. 桶排序（Bucket Sort）"></a>9. 桶排序（Bucket Sort）</h4><p>桶排序须知：<br>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。<br>为了使桶排序更加高效，我们需要做到这两点：</p><p>在额外空间充足的情况下，尽量增大桶的数量<br>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中<br>同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。</p><p>什么时候最快（Best Cases）：<br>当输入的数据可以均匀的分配到每一个桶中</p><p>什么时候最慢（Worst Cases）：<br>当输入的数据被分配到了同一个桶中</p><p>桶排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bucketSort</span>(<span class="params">arr, bucketSize</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> i</span><br><span class="line">  <span class="keyword">var</span> minValue = arr[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">var</span> maxValue = arr[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; minValue) &#123;</span><br><span class="line">      minValue = arr[i] <span class="comment">//输入数据的最小值</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] &gt; maxValue) &#123;</span><br><span class="line">      maxValue = arr[i] <span class="comment">//输入数据的最大值</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//桶的初始化</span></span><br><span class="line">  <span class="keyword">var</span> DEFAULT_BUCKET_SIZE = <span class="number">5</span> <span class="comment">//设置桶的默认数量为5</span></span><br><span class="line">  bucketSize = bucketSize || DEFAULT_BUCKET_SIZE</span><br><span class="line">  <span class="keyword">var</span> bucketCount = <span class="built_in">Math</span>.floor((maxValue - minValue) / bucketSize) + <span class="number">1</span></span><br><span class="line">  <span class="keyword">var</span> buckets = <span class="keyword">new</span> <span class="built_in">Array</span>(bucketCount)</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; buckets.length; i++) &#123;</span><br><span class="line">    buckets[i] = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//利用映射函数将数据分配到各个桶中</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    buckets[<span class="built_in">Math</span>.floor((arr[i] - minValue) / bucketSize)].push(arr[i])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  arr.length = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; buckets.length; i++) &#123;</span><br><span class="line">    insertionSort(buckets[i]) <span class="comment">//对每个桶进行排序，这里使用了插入排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; buckets[i].length; j++) &#123;</span><br><span class="line">      arr.push(buckets[i][j])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-基数排序（Radix-Sort）"><a href="#10-基数排序（Radix-Sort）" class="headerlink" title="10. 基数排序（Radix Sort）"></a>10. 基数排序（Radix Sort）</h4><p>基数排序须知：<br>基数排序有两种方法：</p><p>MSD 从高位开始进行排序<br>LSD 从低位开始进行排序<br>基数排序 vs 计数排序 vs 桶排序<br>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：<br>基数排序：根据键值的每位数字来分配桶<br>计数排序：每个桶只存储单一键值<br>桶排序：每个桶存储一定范围的数值</p><p>基数排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LSD Radix Sort</span></span><br><span class="line"><span class="keyword">var</span> counter = []</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">radixSort</span>(<span class="params">arr, maxDigit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> mod = <span class="number">10</span></span><br><span class="line">  <span class="keyword">var</span> dev = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxDigit; i++, dev *= <span class="number">10</span>, mod *= <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">      <span class="keyword">var</span> bucket = <span class="built_in">parseInt</span>((arr[j] % mod) / dev)</span><br><span class="line">      <span class="keyword">if</span> (counter[bucket] == <span class="literal">null</span>) &#123;</span><br><span class="line">        counter[bucket] = []</span><br><span class="line">      &#125;</span><br><span class="line">      counter[bucket].push(arr[j])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> pos = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; counter.length; j++) &#123;</span><br><span class="line">      <span class="keyword">var</span> value = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">if</span> (counter[j] != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> ((value = counter[j].shift()) != <span class="literal">null</span>) &#123;</span><br><span class="line">          arr[pos++] = value</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/yinhao-jack/p/10838401.html&quot;&gt;https://www.cnblogs.com/yinhao-jack/p/10838401.html&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-冒泡排序（</summary>
      
    
    
    
    
    <category term="排序" scheme="https://yongmaple.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>this指向的4种情况</title>
    <link href="https://yongmaple.com/2021/01/05/this%E6%8C%87%E5%90%91%E7%9A%844%E7%A7%8D%E6%83%85%E5%86%B5/"/>
    <id>https://yongmaple.com/2021/01/05/this%E6%8C%87%E5%90%91%E7%9A%844%E7%A7%8D%E6%83%85%E5%86%B5/</id>
    <published>2021-01-05T15:07:22.000Z</published>
    <updated>2021-03-31T09:10:54.093Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-在对象属性中的-this"><a href="#1-在对象属性中的-this" class="headerlink" title="1. 在对象属性中的 this"></a>1. 在对象属性中的 this</h4><p>对象的属性是函数，那么函数中的 this 指向对象本身</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  x: <span class="number">123</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// &#123;x: 123, fn: ƒ&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.x) <span class="comment">// 123</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">obj.fn()</span><br></pre></td></tr></table></figure><p>对象的属性是函数，函数内部还有函数，那么二级（及以上）函数的 this 都指向 window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  x: <span class="number">456</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;fn&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// &#123;x: 456, fn: ƒ&#125;</span></span><br><span class="line">    <span class="keyword">var</span> f1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;fn.f1&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …&#125;</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.x) <span class="comment">// undefined</span></span><br><span class="line">      <span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;fn.f2&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …&#125;</span></span><br><span class="line">      &#125;</span><br><span class="line">      f2()</span><br><span class="line">    &#125;</span><br><span class="line">    f1()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">obj.fn()</span><br></pre></td></tr></table></figure><h4 id="2-构造函数中的-this"><a href="#2-构造函数中的-this" class="headerlink" title="2. 构造函数中的 this"></a>2. 构造函数中的 this</h4><p>构造函数中的一级函数，this 指向通过构造函数 new 出来的实例（例子中的 person）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&#x27;linlif&#x27;</span></span><br><span class="line">  <span class="built_in">this</span>.fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;fn&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// &#123;name: &quot;linlif&quot;, fn: ƒ&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</span><br><span class="line">person.fn()</span><br></pre></td></tr></table></figure><p>构造函数中的二级(及以上)函数，this 指向的是 window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&#x27;linlif&#x27;</span></span><br><span class="line">  <span class="built_in">this</span>.fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;fn&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// &#123;name: &quot;linlif&quot;, fn: ƒ&#125;</span></span><br><span class="line">    <span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;f2&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …&#125;</span></span><br><span class="line">      <span class="keyword">var</span> f3 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;f3&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …&#125;</span></span><br><span class="line">      &#125;</span><br><span class="line">      f3()</span><br><span class="line">    &#125;</span><br><span class="line">    f2()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</span><br><span class="line">person.fn()</span><br></pre></td></tr></table></figure><h4 id="3-全局上下文环境中-this"><a href="#3-全局上下文环境中-this" class="headerlink" title="3. 全局上下文环境中 this"></a>3. 全局上下文环境中 this</h4><p>全局上下文环境，this 指向浏览器的 window 对象，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局的this</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span> === <span class="built_in">window</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局的普通函数</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">global</span> = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">global</span>()</span><br></pre></td></tr></table></figure><h4 id="4-call-和-apply-对-this-指向的影响"><a href="#4-call-和-apply-对-this-指向的影响" class="headerlink" title="4. call()和 apply()对 this 指向的影响"></a>4. call()和 apply()对 this 指向的影响</h4><p>使用 call()方法后，this 指向 call()方法的参数。使用 apply()的结果和 call()是一致的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改变调用对象为gObj</span></span><br><span class="line"><span class="keyword">var</span> gObj = &#123;</span><br><span class="line">  name: <span class="string">&#x27;gName&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> aaa = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// &#123;name: &quot;gName&quot;&#125;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name) <span class="comment">// gName</span></span><br><span class="line">&#125;</span><br><span class="line">aaa.call(gObj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变调用对象为window</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;global&#x27;</span></span><br><span class="line"><span class="keyword">var</span> bbb = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …&#125;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name) <span class="comment">// global</span></span><br><span class="line">&#125;</span><br><span class="line">bbb.call(<span class="built_in">this</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;1-在对象属性中的-this&quot;&gt;&lt;a href=&quot;#1-在对象属性中的-this&quot; class=&quot;headerlink&quot; title=&quot;1. 在对象属性中的 this&quot;&gt;&lt;/a&gt;1. 在对象属性中的 this&lt;/h4&gt;&lt;p&gt;对象的属性是函数，那么函数中的 this 指向对象本身&lt;/p&gt;</summary>
    
    
    
    
    <category term="this" scheme="https://yongmaple.com/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://yongmaple.com/2021/01/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://yongmaple.com/2021/01/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2021-01-05T15:07:22.000Z</published>
    <updated>2021-03-31T09:10:54.093Z</updated>
    
    <content type="html"><![CDATA[<h4 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h4><p>1、单例模式<br>这种设计模式的思想是确保一个类只有唯一实例，一般用于全局缓存，比如全局window，唯一登录浮窗等。采用闭包的方式实现如下：</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> single = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="comment">// 如果该实例存在，则直接返回，否则就对其实例化</span></span><br><span class="line">        <span class="keyword">if</span>( instance=== <span class="literal">undefined</span> )&#123;</span><br><span class="line">            instance= <span class="keyword">new</span> Construct();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// ... 生成单例的构造函数的代码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getInstance : getInstance</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>2、工厂模式<br>工厂模式是创建对象的常用设计模式，为了不暴露创建对象的具体逻辑，将逻辑封装在一个函数中，这个函数就称为一个工厂。本质上是一个负责生产对象实例的工厂。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安全模式创建的工厂方法函数</span></span><br><span class="line"><span class="keyword">let</span> UserFactory = <span class="function"><span class="keyword">function</span>(<span class="params">role</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">this</span> <span class="keyword">instanceof</span> UserFactory) &#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">this</span>[role]();</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UserFactory(role);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工厂方法函数的原型中设置所有对象的构造函数</span></span><br><span class="line">UserFactory.prototype = &#123;</span><br><span class="line">  SuperAdmin: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;超级管理员&quot;</span>,</span><br><span class="line">    <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;通讯录&#x27;</span>, <span class="string">&#x27;发现页&#x27;</span>, <span class="string">&#x27;应用数据&#x27;</span>, <span class="string">&#x27;权限管理&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  Admin: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;管理员&quot;</span>,</span><br><span class="line">    <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;通讯录&#x27;</span>, <span class="string">&#x27;发现页&#x27;</span>, <span class="string">&#x27;应用数据&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  NormalUser: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;普通用户&#x27;</span>,</span><br><span class="line">    <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;通讯录&#x27;</span>, <span class="string">&#x27;发现页&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">let</span> superAdmin = UserFactory(<span class="string">&#x27;SuperAdmin&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> admin = UserFactory(<span class="string">&#x27;Admin&#x27;</span>) </span><br><span class="line"><span class="keyword">let</span> normalUser = UserFactory(<span class="string">&#x27;NormalUser&#x27;</span>)</span><br></pre></td></tr></table></figure><p>3、策略模式<br>策略模式的本意将算法的使用与算法的实现分离开来，避免多重判断调用哪些算法。适用于有多个判断分支的场景，如解决表单验证的问题。你可以创建一个validator对象，有一个validate()方法。这个方法被调用时不用区分具体的表单类型，它总是会返回同样的结果——一个没有通过验证的列表和错误信息。实现方式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于vip客户</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">vipPrice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.discount = <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">vipPrice.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">　　<span class="keyword">return</span> price * <span class="built_in">this</span>.discount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对于老客户</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oldPrice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.discount = <span class="number">0.3</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">oldPrice.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> price * <span class="built_in">this</span>.discount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对于普通客户</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Price</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.discount = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Price.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> price ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下文，对于客户端的使用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Context</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.strategy = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.price = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Context.prototype.set = <span class="function"><span class="keyword">function</span>(<span class="params">name, strategy, price</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">    <span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line">Context.prototype.getResult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27; 的结账价为: &#x27;</span> + <span class="built_in">this</span>.strategy.getPrice(<span class="built_in">this</span>.price));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> context = <span class="keyword">new</span> Context();</span><br><span class="line"><span class="keyword">var</span> vip = <span class="keyword">new</span> vipPrice();</span><br><span class="line">context.set (<span class="string">&#x27;vip客户&#x27;</span>, vip, <span class="number">200</span>);</span><br><span class="line">context.getResult();   <span class="comment">// vip客户 的结账价为: 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> old = <span class="keyword">new</span> oldPrice();</span><br><span class="line">context.set (<span class="string">&#x27;老客户&#x27;</span>, old, <span class="number">200</span>);</span><br><span class="line">context.getResult();  <span class="comment">// 老客户 的结账价为: 60</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Price = <span class="keyword">new</span> Price();</span><br><span class="line">context.set (<span class="string">&#x27;普通客户&#x27;</span>, Price, <span class="number">200</span>);</span><br><span class="line">context.getResult();  <span class="comment">// 普通客户 的结账价为: 200</span></span><br></pre></td></tr></table></figure><p>4、代理模式<br>代理模式是为其他对象提供一种代理，也就是当其他对象直接访问该对象时，如果开销较大，就可以通过这个代理层控制对该对象的访问。常见的使用场景为懒加载，合并http请求和缓存。代理模式的实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 目标对象，是真正被代理的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Subject</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    Subject.prototype.request = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Proxy</span>(<span class="params">realSubject</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.realSubject = realSubject;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Proxy</span>.prototype.request = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.realSubject.request();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p>5、观察者模式<br>也叫发布订阅模式，在这种模式中，一个订阅者订阅发布者，当一个特定的事件发生的时候，发布者会通知（调用）所有的订阅者。实现代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventCenter = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> events = &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">on</span>(<span class="params">event, handler</span>)</span>&#123;</span><br><span class="line">        events[event] = events[event] || [];</span><br><span class="line">        events[event].push(&#123;</span><br><span class="line">            handler: handler</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fire</span>(<span class="params">event, args</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!events[event]) &#123;<span class="keyword">return</span>&#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; events[event].length; i++) &#123;</span><br><span class="line">            events[event][i].handler(args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">off</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> events[event];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        on: on,</span><br><span class="line">        fire: fire,</span><br><span class="line">        off: off</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">EventCenter.on(<span class="string">&#x27;event&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;event received...&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>6、模块模式<br>模块模式可以指定类想暴露的属性和方法，并且不会污染全局。采用闭包的形式，实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        name: name,</span><br><span class="line">        sayName: sayName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>7、构造函数模式和混合模式<br>构造函数和混合模式就是js中继承的两种实现方式，前者通过构造函数的形式定义类，通过new新增实例。而后者是将构造函数的引用属性和方法放到其原型上，子类是父类原型的一个实例。</p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h4&gt;&lt;p&gt;1、单例模式&lt;br&gt;这种设计模式的思想是确保一个类只有唯一实例，一般用于全局缓存，比如全局window，唯一登录浮窗等。采用闭包的方式实现如下：&lt;/p&gt;</summary>
    
    
    
    
    <category term="设计模式" scheme="https://yongmaple.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>VueCli中代理websocket</title>
    <link href="https://yongmaple.com/2020/09/29/VueCli%E4%B8%AD%E4%BB%A3%E7%90%86websocket/"/>
    <id>https://yongmaple.com/2020/09/29/VueCli%E4%B8%AD%E4%BB%A3%E7%90%86websocket/</id>
    <published>2020-09-29T19:58:03.000Z</published>
    <updated>2021-03-31T09:10:54.093Z</updated>
    
    <content type="html"><![CDATA[<p>vue.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    host: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">    port: <span class="string">&#x27;9007&#x27;</span>,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">        <span class="string">&#x27;/socket&#x27;</span>: &#123;</span><br><span class="line">            target: <span class="string">`ws://<span class="subst">$&#123;baseUrl&#125;</span>`</span>,</span><br><span class="line">            ws: <span class="literal">true</span>,</span><br><span class="line">            pathRewrite: &#123; <span class="string">&#x27;^/socket&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">            changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> socket = <span class="keyword">new</span> WebSocket(</span><br><span class="line">  <span class="string">&#x27;ws://&#x27;</span> + location.host + <span class="string">&#x27;/socket/wx-cyberspace/websocket/attack&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>nginx 关键配置</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"><span class="keyword">map</span> $http_upgrade $connection_upgrade &#123;</span><br><span class="line">default upgrade;</span><br><span class="line"><span class="string">&#x27;&#x27;</span>      <span class="keyword">close</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        <span class="keyword">listen</span>       <span class="number">8083</span>;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">location ^~ /<span class="keyword">socket</span> &#123;</span><br><span class="line">            proxy_pass http:<span class="regexp">//l</span>ocalhost:<span class="number">8080</span>/;</span><br><span class="line">            proxy_http_version <span class="number">1.1</span>;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_read_timeout <span class="number">120</span>s;</span><br><span class="line">            proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">            proxy_set_header Connection $connection_upgrade;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;vue.config.js&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/sp</summary>
      
    
    
    
    
    <category term="websocket" scheme="https://yongmaple.com/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>Vue3中app.config.globalProperties在build后指向错误</title>
    <link href="https://yongmaple.com/2020/09/29/Vue3%E4%B8%ADapp.config.globalProperties%E5%9C%A8build%E5%90%8E%E6%8C%87%E5%90%91%E9%94%99%E8%AF%AF/"/>
    <id>https://yongmaple.com/2020/09/29/Vue3%E4%B8%ADapp.config.globalProperties%E5%9C%A8build%E5%90%8E%E6%8C%87%E5%90%91%E9%94%99%E8%AF%AF/</id>
    <published>2020-09-29T07:44:09.000Z</published>
    <updated>2021-03-31T09:10:54.093Z</updated>
    
    <content type="html"><![CDATA[<p>在 Vue2 中，我们这样在全局挂载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span></span><br><span class="line">Vue.prototype.$moment = moment</span><br></pre></td></tr></table></figure><p>在 Vue3 中，我们需要这样挂载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dayjs <span class="keyword">from</span> <span class="string">&#x27;dayjs&#x27;</span></span><br><span class="line">app.config.globalProperties.$dayjs = dayjs</span><br></pre></td></tr></table></figure><p>在引用时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = getCurrentInstance()</span><br><span class="line">    ctx.$dayjs()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述方式在 dev 中没有问题，但是 build 之后就会报错<br>应该改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; proxy &#125; = getCurrentInstance()</span><br><span class="line">    proxy.$dayjs()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 Vue2 中，我们这样在全局挂载&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;</summary>
      
    
    
    
    
    <category term="报错" scheme="https://yongmaple.com/tags/%E6%8A%A5%E9%94%99/"/>
    
    <category term="Vue3" scheme="https://yongmaple.com/tags/Vue3/"/>
    
  </entry>
  
  <entry>
    <title>安装yarn create nuxt-app xxx时报错</title>
    <link href="https://yongmaple.com/2020/08/30/%E5%AE%89%E8%A3%85yarn%20create%20nuxt-app%20xxx%E6%97%B6%E6%8A%A5%E9%94%99/"/>
    <id>https://yongmaple.com/2020/08/30/%E5%AE%89%E8%A3%85yarn%20create%20nuxt-app%20xxx%E6%97%B6%E6%8A%A5%E9%94%99/</id>
    <published>2020-08-30T13:20:09.000Z</published>
    <updated>2021-03-31T09:10:54.093Z</updated>
    
    <content type="html"><![CDATA[<p>如下：</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/Users/jimmy/.config/yarn/global/node_modules/sao/lib/installPackages.js:108</span><br><span class="line">throw new SAOError(Failed to install <span class="variable">$&#123;packageName&#125;</span> <span class="keyword">in</span> <span class="variable">$&#123;cwd&#125;</span>)</span><br><span class="line">^</span><br><span class="line">SAOError: Failed to install packages <span class="keyword">in</span> /Users/jimmy/work/tuliang/cross-border-pc-ssr-ts</span><br><span class="line">at ChildProcess. (/Users/jimmy/.config/yarn/global/node_modules/sao/lib/installPackages.js:108:15)</span><br><span class="line">at ChildProcess.emit (events.js:315:20)</span><br><span class="line">at maybeClose (internal/child_process.js:1021:16)</span><br><span class="line">at Socket. (internal/child_process.js:443:11)</span><br><span class="line">at Socket.emit (events.js:315:20)</span><br><span class="line">at Pipe. (net.js:674:12) &#123;</span><br><span class="line">__sao: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">error Command failed.</span><br><span class="line">Exit code: 1</span><br><span class="line">Command: /usr/<span class="built_in">local</span>/bin/create-nuxt-app</span><br><span class="line">Arguments: cross-border-pc-ssr-ts</span><br><span class="line">Directory: /Users/jimmy/work/tuliang</span><br><span class="line">Output:</span><br><span class="line">info Visit https://yarnpkg.com/en/docs/cli/create <span class="keyword">for</span> documentation about this <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>升级 yarn 到 1.22.4 版本后解决</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;如下：&lt;/p&gt;</summary>
    
    
    
    
    <category term="报错" scheme="https://yongmaple.com/tags/%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>css裁切不规则图形</title>
    <link href="https://yongmaple.com/2020/08/28/css%E8%A3%81%E5%88%87%E4%B8%8D%E8%A7%84%E5%88%99%E5%9B%BE%E5%BD%A2/"/>
    <id>https://yongmaple.com/2020/08/28/css%E8%A3%81%E5%88%87%E4%B8%8D%E8%A7%84%E5%88%99%E5%9B%BE%E5%BD%A2/</id>
    <published>2020-08-28T15:07:58.000Z</published>
    <updated>2021-03-31T09:10:54.093Z</updated>
    
    <content type="html"><![CDATA[<p>使用 clip-path 属性，简单的可以用 polygon 属性画不规则多边形，复杂的可以用 svg 的 path 处理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;0&quot;</span> <span class="attr">preserveAspectRatio</span>=<span class="string">&quot;xMinYMin meet&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">clipPath</span> <span class="attr">id</span>=<span class="string">&quot;svgPath&quot;</span>&gt;</span></span><br><span class="line">      &lt;path</span><br><span class="line">        d=&quot;M215,100.3c97.8-32.6,90.5-71.9,336-77.6</span><br><span class="line">          c92.4-2.1,98.1,81.6,121.8,116.4c101.7,149.9,53.5,155.9,14.7,178c-96.4,54.9,5.4,269-257,115.1c-57-33.5-203,46.3-263.7,20.1</span><br><span class="line">          c-33.5-14.5-132.5-45.5-95-111.1C125.9,246.6,98.6,139.1,215,100.3z&quot;</span><br><span class="line">      &gt;<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">clipPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="comment">/* clip-path:polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%); */</span></span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">url</span>(<span class="string">&#x27;#svgPath&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用 clip-path 属性，简单的可以用 polygon 属性画不规则多边形，复杂的可以用 svg 的 path 处理&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
      
    
    
    
    
    <category term="css" scheme="https://yongmaple.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Cesium相机高度自适应多个坐标</title>
    <link href="https://yongmaple.com/2020/08/26/Cesium%E7%9B%B8%E6%9C%BA%E9%AB%98%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94%E5%A4%9A%E4%B8%AA%E5%9D%90%E6%A0%87/"/>
    <id>https://yongmaple.com/2020/08/26/Cesium%E7%9B%B8%E6%9C%BA%E9%AB%98%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94%E5%A4%9A%E4%B8%AA%E5%9D%90%E6%A0%87/</id>
    <published>2020-08-26T15:07:58.000Z</published>
    <updated>2021-03-31T09:10:54.093Z</updated>
    
    <content type="html"><![CDATA[<p>获取东南西北经纬度，使用 Rectangle.fromDegrees 构建矩形</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> west, south, east, north</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> item = arr[i]</span><br><span class="line">  <span class="keyword">if</span> (!west || item.assetIpLng &lt; west) west = item.assetIpLng</span><br><span class="line">  <span class="keyword">if</span> (!south || item.assetIpLat &lt; south) south = item.assetIpLat</span><br><span class="line">  <span class="keyword">if</span> (!east || item.assetIpLng &gt; east) east = item.assetIpLng</span><br><span class="line">  <span class="keyword">if</span> (!north || item.assetIpLat &gt; north) north = item.assetIpLat</span><br><span class="line">  _this.$emit(</span><br><span class="line">    <span class="string">&#x27;addPoint&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      lon: item.assetIpLng,</span><br><span class="line">      lat: item.assetIpLat,</span><br><span class="line">    &#125;,</span><br><span class="line">    []</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再 flyTo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>._viewer.scene.camera.flyTo(&#123;</span><br><span class="line">  destination: Cesium.Rectangle.fromDegrees(west, south, east, north),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;获取东南西北经纬度，使用 Rectangle.fromDegrees 构建矩形&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;b</summary>
      
    
    
    
    
    <category term="Cesium" scheme="https://yongmaple.com/tags/Cesium/"/>
    
  </entry>
  
  <entry>
    <title>flex-direction为column时，子元素宽度自动撑满</title>
    <link href="https://yongmaple.com/2020/08/11/flex-direction%E4%B8%BAcolumn%E6%97%B6%EF%BC%8C%E5%AD%90%E5%85%83%E7%B4%A0%E5%AE%BD%E5%BA%A6%E8%87%AA%E5%8A%A8%E6%92%91%E6%BB%A1/"/>
    <id>https://yongmaple.com/2020/08/11/flex-direction%E4%B8%BAcolumn%E6%97%B6%EF%BC%8C%E5%AD%90%E5%85%83%E7%B4%A0%E5%AE%BD%E5%BA%A6%E8%87%AA%E5%8A%A8%E6%92%91%E6%BB%A1/</id>
    <published>2020-08-11T17:30:10.000Z</published>
    <updated>2021-03-31T09:10:54.093Z</updated>
    
    <content type="html"><![CDATA[<p>父元素添加<code>align-content: flex-start;</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;父元素添加&lt;code&gt;align-content: flex-start;&lt;/code&gt;&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="css" scheme="https://yongmaple.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>throw new _ValidationError2.default(ajv.errors, name)</title>
    <link href="https://yongmaple.com/2020/08/11/throw%20new%20_ValidationError2.default(ajv.errors,%20name)/"/>
    <id>https://yongmaple.com/2020/08/11/throw%20new%20_ValidationError2.default(ajv.errors,%20name)/</id>
    <published>2020-08-11T15:07:22.000Z</published>
    <updated>2021-03-31T09:10:54.093Z</updated>
    
    <content type="html"><![CDATA[<h3 id="错误如图"><a href="#错误如图" class="headerlink" title="错误如图"></a>错误如图</h3><p><img src="http://okmneu7zl.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-11%20%E4%B8%8B%E5%8D%887.43.40.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tc-travel-frontend-activity@ build /Users/jimmy/work/tc-flight/project/tc-travel-frontend-activity</span><br><span class="line">&gt; rimraf dist &amp;&amp; npm run build:client &amp;&amp; npm run build:server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; tc-travel-frontend-activity@ build:client /Users/jimmy/work/tc-flight/project/tc-travel-frontend-activity</span><br><span class="line">&gt; cross-env NODE_ENV=product webpack --config build/webpack.client.config.js --progress --hide-modules</span><br><span class="line"></span><br><span class="line">/Users/jimmy/work/tc-flight/project/tc-travel-frontend-activity/node_modules/schema-utils/dist/validateOptions.js:40</span><br><span class="line">    throw new _ValidationError2.default(ajv.errors, name);</span><br><span class="line">    ^</span><br><span class="line"></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>webpack 版本升级导致</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>修改<code>webpack.client.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vueConfig.loaders = &#123;</span><br><span class="line">  <span class="comment">// stylus: ExtractTextPlugin.extract(&#123;</span></span><br><span class="line">  <span class="comment">//   loader: &#x27;css-loader!stylus-loader&#x27;,</span></span><br><span class="line">  <span class="comment">//   fallbackLoader: &#x27;vue-style-loader&#x27; // &lt;- this is a dep of vue-loader</span></span><br><span class="line">  <span class="comment">// &#125;),</span></span><br><span class="line">  less: ExtractTextPlugin.extract(&#123;</span><br><span class="line">    loader: <span class="string">&#x27;css-loader!less-loader&#x27;</span>,</span><br><span class="line">    fallbackLoader: <span class="string">&#x27;vue-style-loader&#x27;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vueConfig.loaders = &#123;</span><br><span class="line">    <span class="regexp">//</span> stylus: ExtractTextPlugin.extract(&#123;</span><br><span class="line">    <span class="regexp">//</span>   loader: <span class="string">&#x27;css-loader!stylus-loader&#x27;</span>,</span><br><span class="line">    <span class="regexp">//</span>   fallbackLoader: <span class="string">&#x27;vue-style-loader&#x27;</span> <span class="regexp">//</span> &lt;- this is a dep of vue-loader</span><br><span class="line">    <span class="regexp">//</span> &#125;),</span><br><span class="line">    less: ExtractTextPlugin.extract(&#123;</span><br><span class="line">        use: <span class="string">&quot;css-loader!less-loader&quot;</span>,</span><br><span class="line">        fallback: <span class="string">&quot;vue-style-loader&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;错误如图&quot;&gt;&lt;a href=&quot;#错误如图&quot; class=&quot;headerlink&quot; title=&quot;错误如图&quot;&gt;&lt;/a&gt;错误如图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://okmneu7zl.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%</summary>
      
    
    
    
    
    <category term="报错" scheme="https://yongmaple.com/tags/%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
  <entry>
    <title>NUXT第三方组件只在客户端运行</title>
    <link href="https://yongmaple.com/2020/08/11/NUXT%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BB%84%E4%BB%B6%E5%8F%AA%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%90%E8%A1%8C/"/>
    <id>https://yongmaple.com/2020/08/11/NUXT%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BB%84%E4%BB%B6%E5%8F%AA%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%90%E8%A1%8C/</id>
    <published>2020-08-11T10:30:55.000Z</published>
    <updated>2021-03-31T09:10:54.093Z</updated>
    
    <content type="html"><![CDATA[<p>报错：<code>navigator is no defined</code><br>原因：<code>navigator</code>只在客户端存在<br>解决：<code>plugins</code>下新建<code>vue-range-component.js</code>，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vue-range-component/dist/vue-range-slider.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRangeSlider <span class="keyword">from</span> <span class="string">&#x27;vue-range-component&#x27;</span></span><br><span class="line">Vue.use(VueRangeSlider)</span><br><span class="line">nuxt.config.js内新增</span><br><span class="line">  plugins: [</span><br><span class="line">    &#123; <span class="attr">src</span>: <span class="string">&quot;@/plugins/vue-range-component&quot;</span>, <span class="attr">ssr</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><p>ssr 设为 false 即可</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;报错：&lt;code&gt;navigator is no defined&lt;/code&gt;&lt;br&gt;原因：&lt;code&gt;navigator&lt;/code&gt;只在客户端存在&lt;br&gt;解决：&lt;code&gt;plugins&lt;/code&gt;下新建&lt;code&gt;vue-range-component.js&lt;/co</summary>
      
    
    
    
    
    <category term="报错" scheme="https://yongmaple.com/tags/%E6%8A%A5%E9%94%99/"/>
    
  </entry>
  
</feed>
