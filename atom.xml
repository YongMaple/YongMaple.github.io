<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YongMaple</title>
  <subtitle>我不生产代码，我只是代码的搬运工</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://YongMaple.github.io/"/>
  <updated>2017-02-07T09:17:38.000Z</updated>
  <id>http://YongMaple.github.io/</id>
  
  <author>
    <name>YongMaple</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mongoose入门</title>
    <link href="http://YongMaple.github.io/2017/02/07/Mongoose%E5%85%A5%E9%97%A8/"/>
    <id>http://YongMaple.github.io/2017/02/07/Mongoose入门/</id>
    <published>2017-02-07T09:05:05.000Z</published>
    <updated>2017-02-07T09:17:38.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装Node-js和MongoDB"><a href="#安装Node-js和MongoDB" class="headerlink" title="安装Node.js和MongoDB"></a>安装Node.js和MongoDB</h3><p>安装Node.js，地址：<a href="https://nodejs.org/" target="_blank" rel="external">https://nodejs.org/</a><br>安装MongoDB，地址：<a href="https://www.mongodb.com/download-center?jmp=nav#community" target="_blank" rel="external">https://www.mongodb.com/</a>    </p>
<h3 id="启动MongoDB"><a href="#启动MongoDB" class="headerlink" title="启动MongoDB"></a>启动MongoDB</h3><p>cd到mongodb下的bin文件夹，执行<code>./mongod</code>即可，但是我们执行后会出如下错误<br><img src="http://okmneu7zl.bkt.clouddn.com/WX20170131-131657.png" alt=""><br>这里提示我们没有/data/db文件夹，需要我们自己来新建，这里我在mongodb-3.4.0下新建了mydata文件夹，并通过<code>./mongod --dbpath ../mydata</code>启动了MongoDB，<code>--datapath</code>是用来指定路径的<br><img src="http://okmneu7zl.bkt.clouddn.com/WX20170131-133558@2x.png" alt=""><br>那么让我们来体验一下mongodb吧，首先要新建一个tab，然后同样cd到bin目录下，执行<code>./mongo</code><br><img src="http://okmneu7zl.bkt.clouddn.com/WX20170131-134433.png" alt=""><br>然后我们切回之前的tab可以看到有一个新的连接<br><img src="http://okmneu7zl.bkt.clouddn.com/WX20170131-134649.png" alt="">   </p>
<h3 id="MongoDB基础命令"><a href="#MongoDB基础命令" class="headerlink" title="MongoDB基础命令"></a>MongoDB基础命令</h3><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="http://okmneu7zl.bkt.clouddn.com/WX20170131-135808.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>   
<p>因为我们后期基本不会在shell里来操作，所有这里只讲几个基本的，下面的test可以随意命名，是集合名   </p>
<blockquote>
<p><code>db.test.insert()</code>在集合中插入一条数据   </p>
<p><code>db.test.find()</code>查找集合中所有的，可以加入参数，如<code>db.test.find({name:&quot;Jimmy&quot;})</code>  </p>
<p><code>db.test.remove({})</code>删除集合中所有元素，<code>{}</code>必须写   </p>
<p><code>show collections</code>查看所有集合   </p>
</blockquote>
<h3 id="mongoose的安装"><a href="#mongoose的安装" class="headerlink" title="mongoose的安装"></a>mongoose的安装</h3><p>新建一个文件夹，通过<code>npm init</code>初始化，通过<code>npm install mongoose --save</code>安装mongoose<br><img src="http://okmneu7zl.bkt.clouddn.com/WX20170131-142334.png" alt="">   </p>
<h3 id="通过mongoose连接数据库"><a href="#通过mongoose连接数据库" class="headerlink" title="通过mongoose连接数据库"></a>通过mongoose连接数据库</h3><p>新建一个js文件，复制以下代码并在shell运行<code>node xxx.js</code>，xxx为你的文件名<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>);</div><div class="line">mongoose.connect(<span class="string">"mongodb://localhost/test"</span>)</div></pre></td></tr></table></figure></p>
<p>运行之后在之前的mongod的tab中看到有了一个新的连接   </p>
<h2 id="Mongoose入门"><a href="#Mongoose入门" class="headerlink" title="Mongoose入门"></a>Mongoose入门</h2><h3 id="创建类Class的方式"><a href="#创建类Class的方式" class="headerlink" title="创建类Class的方式"></a>创建类Class的方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> User = mongoose.model(<span class="string">"User"</span>,userSchema)</div></pre></td></tr></table></figure>
<blockquote>
<p><code>&quot;User&quot;</code>表示类名，在数据库中集合名会自动转化为小写加s<code>users</code>    </p>
<p><code>userSchema</code>定义了对象的原型   ·</p>
</blockquote>
<p><strong><em>举个栗子</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>);</div><div class="line">mongoose.connect(<span class="string">"mongodb://localhost/test"</span>)</div><div class="line"></div><div class="line">userSchema = <span class="keyword">new</span> mongoose.Schema(&#123;  <span class="comment">//如果只需要指定类型的话可以直接写，如果需要其他条件，需要写成对象的形式</span></div><div class="line">    name:<span class="built_in">String</span>,</div><div class="line">    <span class="attr">qq</span>:&#123;</div><div class="line">        <span class="attr">type</span>:<span class="built_in">String</span>,</div><div class="line">        <span class="attr">default</span>:<span class="string">"740534248"</span> <span class="comment">//默认</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">"User"</span>,userSchema)</div><div class="line"></div><div class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> User(&#123;</div><div class="line">    <span class="attr">name</span>:<span class="string">"YongMaple"</span></div><div class="line">&#125;)</div><div class="line">user.save()</div></pre></td></tr></table></figure></p>
<h3 id="指定对象的属性类型"><a href="#指定对象的属性类型" class="headerlink" title="指定对象的属性类型"></a>指定对象的属性类型</h3><ul>
<li><p>javascript内置类型</p>
<ul>
<li>String</li>
<li>Number</li>
<li>Boolean</li>
<li>Date</li>
<li>Array   </li>
</ul>
</li>
<li><p>node.js内置类型</p>
<ul>
<li>Buffer</li>
</ul>
</li>
<li><p>mongoose特有类型</p>
<ul>
<li>Mixed</li>
<li>ObjectId</li>
</ul>
</li>
</ul>
<p><strong><em>举个栗子</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose  = <span class="built_in">require</span>(<span class="string">"mongoose"</span>)</div><div class="line">mongoose.connect(<span class="string">"mongodb://localhost/test"</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> ObjSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</div><div class="line">    <span class="attr">str</span> : <span class="built_in">String</span>,</div><div class="line">    <span class="attr">num</span> : <span class="built_in">Number</span>,</div><div class="line">    <span class="attr">bool</span> : <span class="built_in">Boolean</span>,</div><div class="line">    <span class="attr">arr</span> : <span class="built_in">Array</span>,    <span class="comment">//[]</span></div><div class="line">    arr2 : [<span class="built_in">Date</span>],</div><div class="line">    <span class="attr">arr3</span> : [<span class="built_in">String</span>],</div><div class="line">    <span class="attr">time</span> : <span class="built_in">Date</span>,</div><div class="line"></div><div class="line">    <span class="attr">buf</span> : Buffer,</div><div class="line"></div><div class="line">    <span class="attr">mxo</span> : mongoose.Schema.Types.Mixed,  <span class="comment">//&#123;&#125;    混合数据类型</span></div><div class="line">    oid : mongoose.Schema.Types.ObjectId    <span class="comment">//唯一的</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">const</span> obj = mongoose.model(<span class="string">"obj"</span>,ObjSchema)</div><div class="line"><span class="keyword">const</span> o = <span class="keyword">new</span> obj(&#123;</div><div class="line">    <span class="attr">time</span> : <span class="keyword">new</span> <span class="built_in">Date</span>( <span class="number">42342342344</span>),  <span class="comment">//内部自动转化为Date类型，转化失败将报错</span></div><div class="line">    arr3 : [<span class="number">1234</span>,<span class="string">"jimmy"</span>,<span class="keyword">new</span> <span class="built_in">Date</span>],     <span class="comment">//内部自动转化 String</span></div><div class="line">    buf : <span class="keyword">new</span> Buffer([<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]),</div><div class="line"></div><div class="line">    <span class="attr">oid</span> : mongoose.Types.ObjectId()</div><div class="line">&#125;)</div><div class="line"></div><div class="line">o.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(err);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h3><p>使用自定义类型，需要：</p>
<ul>
<li>继承mongoose.SchemaType(key,options,typeName)</li>
<li>重写cast(value)方法</li>
<li>加入mongoose.Schema.Types</li>
</ul>
<p><strong><em>举个栗子</em></strong><br>创建User.js文件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>)</div><div class="line"></div><div class="line"><span class="comment">//es5版</span></div><div class="line"><span class="comment">// function User(key,options)&#123;</span></div><div class="line"><span class="comment">//     mongoose.SchemaType.call(this,key,options,"User")</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// User.prototype = Object.create(mongoose.SchemaType.prototype)</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// User.prototype.cast = function(val)&#123;</span></div><div class="line"><span class="comment">//     if(val.loginname &amp;&amp; val.password &amp;&amp; val.loginname.length &gt; 3)&#123;</span></div><div class="line"><span class="comment">//         return &#123;</span></div><div class="line"><span class="comment">//             loginname : val.loginname,</span></div><div class="line"><span class="comment">//             password : val.password</span></div><div class="line"><span class="comment">//         &#125;</span></div><div class="line"><span class="comment">//     &#125;else&#123;</span></div><div class="line"><span class="comment">//         throw new Error("user has error!")</span></div><div class="line"><span class="comment">//     &#125;</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// mongoose.Schema.Types.User = User;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// module.exports = User;</span></div><div class="line"></div><div class="line"><span class="comment">//es6版</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">mongoose</span>.<span class="title">SchemaType</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>(key,opts)&#123;</div><div class="line">        <span class="keyword">super</span>(key,opts,<span class="string">"User"</span>)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    cast(val)&#123;</div><div class="line">        <span class="keyword">if</span>(val.loginname &amp;&amp; val.password &amp;&amp; val.loginname.length &gt; <span class="number">3</span>)&#123;</div><div class="line">            <span class="keyword">return</span> &#123;</div><div class="line">                <span class="attr">loginname</span> : val.loginname,</div><div class="line">                <span class="attr">password</span> : val.password</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"user has error!"</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>再创建一个demo.js文件来使用上面的User.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>)</div><div class="line"></div><div class="line">mongoose.connect(<span class="string">"mongodb://localhost/test"</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">"./User"</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> People = mongoose.model(<span class="string">"People"</span>,<span class="keyword">new</span> mongoose.Schema(&#123;</div><div class="line">    <span class="attr">user</span>:User</div><div class="line">&#125;))</div><div class="line"></div><div class="line"><span class="keyword">const</span> o = <span class="keyword">new</span> People(&#123;</div><div class="line">    <span class="attr">user</span>:&#123;</div><div class="line">        <span class="attr">loginname</span>:<span class="string">"jimmy"</span>,</div><div class="line">        <span class="attr">password</span>:<span class="string">"123456"</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line">o.save(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">err,result</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(err);</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="所有类型都具有的配置"><a href="#所有类型都具有的配置" class="headerlink" title="所有类型都具有的配置"></a>所有类型都具有的配置</h3><ul>
<li>强制不得为空（验证器）   <ul>
<li>required:true</li>
</ul>
</li>
<li>设置属性默认值   <ul>
<li>default:”qq740534248”</li>
</ul>
</li>
<li>是否包括在查询结果中   <ul>
<li>select:false</li>
</ul>
</li>
<li>getter 和 setter 拦截器   <ul>
<li>get:v =&gt; v   </li>
<li>set:v =&gt; v   </li>
</ul>
</li>
</ul>
<p><strong><em>举个栗子</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>)</div><div class="line"></div><div class="line">mongoose.connect(<span class="string">"mongodb://localhost/test"</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> Obj = mongoose.model(<span class="string">"Obj"</span>,<span class="keyword">new</span> mongoose.Schema(&#123;</div><div class="line">    <span class="attr">str</span>:&#123;</div><div class="line">        <span class="attr">type</span>:<span class="built_in">String</span>,</div><div class="line">        <span class="attr">default</span>:<span class="string">"YongMaple"</span>,</div><div class="line">        get(v)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">`my name is <span class="subst">$&#123;v&#125;</span>`</span></div><div class="line">        &#125;,</div><div class="line">        set(v)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="number">123</span>+v</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">loginname</span>:&#123;</div><div class="line">        <span class="attr">type</span>:<span class="built_in">String</span>,</div><div class="line">        <span class="attr">required</span>:<span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">str2</span>:&#123;</div><div class="line">        <span class="attr">type</span>:<span class="built_in">String</span>,</div><div class="line">        <span class="attr">select</span>:<span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">&#125;))</div><div class="line"></div><div class="line"><span class="keyword">const</span> o = <span class="keyword">new</span> Obj(&#123;</div><div class="line">    <span class="attr">str</span>:<span class="string">"Jimmy"</span>,</div><div class="line">    <span class="attr">str2</span>:<span class="string">"111111"</span>,</div><div class="line">    <span class="attr">loginname</span>:<span class="string">"333333"</span></div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(o.str);     <span class="comment">//my name is 123Jimmy</span></div><div class="line"></div><div class="line">o.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(err);</div><div class="line">    Obj.findOne(&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(result);    <span class="comment">//&#123; _id: 58993a84a184201ce8ebf5f5, __v: 0, str: '123Jimmy' &#125;</span></div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="对属性的验证和转换"><a href="#对属性的验证和转换" class="headerlink" title="对属性的验证和转换"></a>对属性的验证和转换</h3><p><strong>验证</strong></p>
<ul>
<li>枚举<ul>
<li>enum:Array</li>
</ul>
</li>
<li>正则表达式验证<ul>
<li>match</li>
</ul>
</li>
<li>限制字符串最大和最小长度<ul>
<li>maxlength &amp; minlength   </li>
</ul>
</li>
<li>Number和Date的最大最小值<ul>
<li>max &amp; min   </li>
</ul>
</li>
</ul>
<p><strong>转换</strong></p>
<ul>
<li>字母大小写转化<ul>
<li>lowercase &amp; uppercase</li>
</ul>
</li>
<li>去除字符串前后空白字符<ul>
<li>trim:true/false</li>
</ul>
</li>
</ul>
<p><strong><em>举个栗子</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mongoose =<span class="built_in">require</span>(<span class="string">"mongoose"</span>)</div><div class="line"></div><div class="line">mongoose.connect(<span class="string">"mongodb://localhost/test"</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> baseDateNum = <span class="built_in">Date</span>.now()</div><div class="line"></div><div class="line"><span class="keyword">const</span> Obj = mongoose.model(<span class="string">"Obj"</span>,<span class="keyword">new</span> mongoose.Schema(&#123;</div><div class="line"></div><div class="line">    <span class="attr">str</span>:&#123;</div><div class="line">        <span class="attr">type</span>:<span class="built_in">String</span>,</div><div class="line">        <span class="attr">enum</span>:[<span class="string">"aaa"</span>,<span class="string">"bbb"</span>]</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">qq</span>:&#123;</div><div class="line">        <span class="attr">type</span>:<span class="built_in">String</span>,</div><div class="line">        <span class="attr">match</span>:<span class="regexp">/^\d*$/</span>,</div><div class="line">        <span class="attr">maxlength</span>:<span class="number">20</span>,</div><div class="line">        <span class="attr">minlength</span>:<span class="number">5</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">lowerstr</span>:&#123;</div><div class="line">        <span class="attr">type</span>:<span class="built_in">String</span>,</div><div class="line">        <span class="attr">lowercase</span>:<span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">upperstr</span>:&#123;</div><div class="line">        <span class="attr">type</span>:<span class="built_in">String</span>,</div><div class="line">        <span class="attr">uppercase</span>:<span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">trimstr</span>:&#123;</div><div class="line">        <span class="attr">type</span>:<span class="built_in">String</span>,</div><div class="line">        <span class="attr">trim</span>:<span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">num</span>:&#123;</div><div class="line">        <span class="attr">type</span>:<span class="built_in">Number</span>,</div><div class="line">        <span class="attr">min</span>:<span class="number">6</span>,</div><div class="line">        <span class="attr">max</span>:<span class="number">20</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">date</span>:&#123;</div><div class="line">        <span class="attr">type</span>:<span class="built_in">Date</span>,</div><div class="line">        <span class="attr">min</span>:<span class="keyword">new</span> <span class="built_in">Date</span>(baseDateNum - <span class="number">1000</span>),</div><div class="line">        <span class="attr">max</span>:<span class="keyword">new</span> <span class="built_in">Date</span>(baseDateNum + <span class="number">2000</span>)</div><div class="line">    &#125;</div><div class="line">&#125;))</div><div class="line"></div><div class="line"><span class="keyword">const</span> o = <span class="keyword">new</span> Obj(&#123;</div><div class="line">    <span class="attr">str</span>:<span class="string">"bbb"</span>,</div><div class="line">    <span class="attr">qq</span>:<span class="string">"740534248"</span>,</div><div class="line">    <span class="attr">lowerstr</span>:<span class="string">"aaaAAAA"</span>,</div><div class="line">    <span class="attr">upperstr</span>:<span class="string">"bbbBBBB"</span>,</div><div class="line">    <span class="attr">trimstr</span>:<span class="string">"    aaa  aaff"</span>,</div><div class="line">    <span class="attr">num</span>:<span class="number">6</span>,</div><div class="line">    <span class="attr">date</span>:<span class="keyword">new</span> <span class="built_in">Date</span>(baseDateNum+<span class="number">1000</span>)</div><div class="line">&#125;)</div><div class="line"><span class="built_in">console</span>.log(o);</div><div class="line"><span class="keyword">const</span> err = o.validateSync()    <span class="comment">//同步校验，后面会讲</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(err);</div></pre></td></tr></table></figure></p>
<h3 id="自定义验证器"><a href="#自定义验证器" class="headerlink" title="自定义验证器"></a>自定义验证器</h3><p>有三种方式来自定义验证器</p>
<ul>
<li>validate:{ validator:Function }</li>
<li>Class.schema.path(xxx).validate(fn)    //xxx 表示要获取的属性名，然后对其验证</li>
<li>validator(v,[callback])同步验证器，加入第二个参数callback变为异步验证器<br><strong><em>举个栗子</em></strong>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>)</div><div class="line"></div><div class="line">mongoose.connect(<span class="string">"mongodb://localhost/test"</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">"User"</span>,<span class="keyword">new</span> mongoose.Schema(&#123;</div><div class="line">    <span class="attr">name</span>:&#123;</div><div class="line">        <span class="attr">type</span>:<span class="built_in">String</span>,</div><div class="line">        <span class="comment">// validate:&#123;   //同步验证器，也可以是数组形式，同时多个验证器</span></div><div class="line">        <span class="comment">//     validator(value)&#123;</span></div><div class="line">        <span class="comment">//         return value.length &lt;= 9</span></div><div class="line">        <span class="comment">//     &#125;</span></div><div class="line">        <span class="comment">// &#125;</span></div><div class="line">    &#125;</div><div class="line">&#125;))</div><div class="line"></div><div class="line">User.schema.path(<span class="string">"name"</span>).validate(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> v.length &lt;= <span class="number">9</span></div><div class="line">&#125;)</div><div class="line">User.schema.path(<span class="string">"name"</span>).validate(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;  <span class="comment">//可以加入多个</span></div><div class="line">    <span class="keyword">return</span> v.length &gt; <span class="number">3</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> User(&#123;</div><div class="line">    <span class="attr">name</span>:<span class="string">"1234"</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">const</span> err = u.validateSync()</div><div class="line"><span class="built_in">console</span>.log(err);</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><em>再举个异步的栗子</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>)</div><div class="line"></div><div class="line">mongoose.connect(<span class="string">"mongodb://localhost/test"</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">"User"</span>,<span class="keyword">new</span> mongoose.Schema(&#123;</div><div class="line">    <span class="attr">loginname</span>:&#123;</div><div class="line">        <span class="attr">type</span>:<span class="built_in">String</span>,</div><div class="line">        <span class="attr">validate</span>:&#123;</div><div class="line">            validator(value,cb)&#123;</div><div class="line">                User.findOne(&#123;<span class="attr">loginname</span>:value&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</div><div class="line">                    cb(!result)</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;))</div><div class="line"></div><div class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(&#123;</div><div class="line">    <span class="attr">loginname</span>:<span class="string">"hahahaha"</span></div><div class="line">&#125;)</div><div class="line">user.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(err);   <span class="comment">//运行2遍，第二遍会抛出异常</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="获取错误信息"><a href="#获取错误信息" class="headerlink" title="获取错误信息"></a>获取错误信息</h3><ul>
<li>doc.validate( error =&gt; error )    <strong><em>异步获得错误信息</em></strong></li>
<li>error = doc.validateSync()        <strong><em>获取同步错误信息</em></strong></li>
<li>doc.save( error =&gt; error )        <strong><em>回调获得错误信息</em></strong></li>
<li>promise = doc.save()              <strong><em>promise方式获得错误信息</em></strong></li>
<li>Class.update( query , update , { runValidators:true } , callback)<br><strong><em>举个栗子</em></strong>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>)</div><div class="line"></div><div class="line">mongoose.connect(<span class="string">"mongodb://localhost/test"</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">"User"</span>,<span class="keyword">new</span> mongoose.Schema(&#123;</div><div class="line">    <span class="attr">loginname</span>:&#123;</div><div class="line">        <span class="attr">type</span>:<span class="built_in">String</span>,</div><div class="line">        <span class="attr">required</span>:<span class="literal">true</span>,</div><div class="line">        <span class="attr">validate</span>:&#123;</div><div class="line">            validator(value,cb)&#123;</div><div class="line">                setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    cb(<span class="literal">false</span>)</div><div class="line">                &#125;)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;))</div><div class="line"></div><div class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> User(&#123;</div><div class="line">    <span class="attr">loginname</span>:<span class="string">"aaa11"</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//1 只能获得同步</span></div><div class="line"><span class="keyword">const</span> err = u.validateSync()</div><div class="line"><span class="built_in">console</span>.log(err);</div><div class="line"></div><div class="line"><span class="comment">// 2 同步异步都能</span></div><div class="line"><span class="comment">// u.validate(function(err)&#123;</span></div><div class="line"><span class="comment">//     console.log(err);</span></div><div class="line"><span class="comment">// &#125;)</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//3 同步异步都能  有可能是底层传上来的错误</span></div><div class="line"><span class="comment">// u.save(function(err)&#123;</span></div><div class="line"><span class="comment">//     console.log(err);</span></div><div class="line"><span class="comment">// &#125;)</span></div><div class="line"></div><div class="line"><span class="comment">//4 同步异步都能  有可能是底层传上来的错误</span></div><div class="line"><span class="comment">// const promise = u.save()</span></div><div class="line"><span class="comment">// promise.catch(err =&gt; console.log(err))</span></div><div class="line"></div><div class="line"><span class="comment">//5 同步异步都能  有可能是底层传上来的错误</span></div><div class="line"><span class="comment">// User.update(&#123;&#125;,&#123;loginname:"123aaa"&#125;,&#123;runValidators:true&#125;,function(err)&#123;</span></div><div class="line"><span class="comment">//     console.log(err);</span></div><div class="line"><span class="comment">// &#125;)</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h3><ul>
<li>err.errors    <strong><em>错误集合</em></strong></li>
<li>err.errors.qq   <strong><em>得到qq属性值的错误信息</em></strong></li>
<li>{ path , value , message } = err.errors.qq<br><strong><em>举个栗子</em></strong>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>)</div><div class="line"></div><div class="line">mongoose.connect(<span class="string">"mongodb://localhost/test"</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">"User"</span>,<span class="keyword">new</span> mongoose.Schema(&#123;</div><div class="line">    <span class="attr">loginname</span>:&#123;</div><div class="line">        <span class="attr">type</span>:<span class="built_in">String</span>,</div><div class="line">        <span class="attr">required</span>:[<span class="literal">true</span>,<span class="string">"必须输入 &#123;PATH&#125; - &#123;VALUE&#125;"</span>], <span class="comment">//除了enum以外所有内置验证器都是这样写</span></div><div class="line">        enum:&#123;<span class="attr">values</span>:[<span class="string">"aaa"</span>,<span class="string">"bbb"</span>],<span class="attr">message</span>:<span class="string">"没在枚举中。。。 &#123;PATH&#125; - &#123;VALUE&#125;"</span>&#125;,     <span class="comment">//枚举时，自定义错误信息比较特殊，是对象形式</span></div><div class="line">        validate:&#123;      <span class="comment">//自定义校验器要这样写，也是对象</span></div><div class="line">            validator(value,cb)&#123;</div><div class="line">                setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                    cb(<span class="literal">false</span>)   <span class="comment">//模拟异步错误</span></div><div class="line">                &#125;)</div><div class="line">            &#125;,</div><div class="line">            <span class="attr">message</span>:<span class="string">"校验错误 &#123;PATH&#125; - &#123;VALUE&#125;"</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">password</span>:&#123;</div><div class="line">        <span class="attr">type</span>:<span class="built_in">String</span>,</div><div class="line">        <span class="attr">required</span>:[<span class="literal">true</span>,<span class="string">"密码必须填写"</span>],</div><div class="line">        <span class="attr">minlength</span>:[<span class="number">6</span>,<span class="string">"密码至少6位"</span>]</div><div class="line">    &#125;</div><div class="line">&#125;))</div><div class="line"></div><div class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> User(&#123;</div><div class="line">    <span class="attr">loginname</span>:<span class="string">"aaa11"</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line">u.validate(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line"><span class="comment">//     const &#123;path,value,message&#125; = err.errors.loginname</span></div><div class="line"><span class="comment">//     console.log(path);</span></div><div class="line"><span class="comment">//     console.log(value);</span></div><div class="line"><span class="comment">//     console.log(message);</span></div><div class="line"></div><div class="line">    <span class="keyword">if</span>(err &amp;&amp; err.errors)&#123;</div><div class="line">        <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(err.errors)</div><div class="line">        <span class="keyword">let</span> str = <span class="string">""</span></div><div class="line">        keys.map(<span class="function">(<span class="params">v,i</span>) =&gt;</span> &#123;</div><div class="line">            str += <span class="string">`<span class="subst">$&#123;v&#125;</span>:<span class="subst">$&#123;err.errors[v]&#125;</span>\n`</span></div><div class="line">        &#125;)</div><div class="line">        <span class="built_in">console</span>.log(str);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//....</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>例子中<code>{PATH}</code>和<code>{VALUE}</code>是属性名和属性值</p>
<h3 id="加入方法"><a href="#加入方法" class="headerlink" title="加入方法"></a>加入方法</h3><ul>
<li>加入实例方法 schema.methods.xxx</li>
<li>加入静态方法 schema.statics.xxx</li>
<li>加入虚拟方法 getter/setter方法<ul>
<li>virtual(‘xxx’).get(handle)   </li>
<li>virtual(‘xxx’).set(handle)<br><strong><em>举个栗子</em></strong>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>)</div><div class="line">mongoose.connect(<span class="string">"mongodb://localhost/test"</span>)</div><div class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</div><div class="line">    <span class="attr">firstName</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">secondName</span>: <span class="built_in">String</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//methods和statics的区别在于this是谁</span></div><div class="line">userSchema.methods.getAllName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">'.'</span> + <span class="keyword">this</span>.secondName   <span class="comment">//这里的this指的是对象本身</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">userSchema.statics.getAll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;             <span class="comment">//可以加入回调函数  function(cb)&#123;</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.find(&#123;&#125;)     <span class="comment">//这里的this指的是User类   可以加入回调函数  this.find(&#123;&#125;,cb)</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">userSchema.virtual(<span class="string">"allname"</span>).get(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">'.'</span> + <span class="keyword">this</span>.secondName</div><div class="line">&#125;)  <span class="comment">//getter method</span></div><div class="line"></div><div class="line">userSchema.virtual(<span class="string">"allname"</span>).set(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</div><div class="line">    <span class="comment">//Yong.Maple</span></div><div class="line">    <span class="keyword">const</span> names = v.split(<span class="string">"."</span>);</div><div class="line">    <span class="keyword">this</span>.firstName = names[<span class="number">0</span>];</div><div class="line">    <span class="keyword">this</span>.secondName = names[<span class="number">1</span>];</div><div class="line">&#125;);  <span class="comment">//setter method</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">"User"</span>,userSchema)</div><div class="line"></div><div class="line"><span class="comment">// const u = new User(&#123;</span></div><div class="line"><span class="comment">//     firstName:"Yong ",</span></div><div class="line"><span class="comment">//     secondName:"Maple"</span></div><div class="line"><span class="comment">// &#125;)</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// console.log(u.getAllName());</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// User.remove(&#123;&#125;).then(()=&gt;&#123;</span></div><div class="line"><span class="comment">//     User.insertMany([</span></div><div class="line"><span class="comment">//         &#123;firstName:"Yong",secondName:"Maple"&#125;,</span></div><div class="line"><span class="comment">//         &#123;firstName:"Zhang",secondName:"San"&#125;,</span></div><div class="line"><span class="comment">//         &#123;firstName:"Li",secondName:"Si"&#125;</span></div><div class="line"><span class="comment">//     ]).then(()=&gt;&#123;</span></div><div class="line"><span class="comment">//         User.getAll().then(result=&gt; console.log(result))</span></div><div class="line"><span class="comment">//     &#125;)</span></div><div class="line"><span class="comment">// &#125;)</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> User(&#123;</div><div class="line">    <span class="attr">allname</span>:<span class="string">"Yong.Maple"</span></div><div class="line">&#125;)</div><div class="line">user.save()</div><div class="line"><span class="built_in">console</span>.log(user);</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h3 id="对象的增删改"><a href="#对象的增删改" class="headerlink" title="对象的增删改"></a>对象的增删改</h3><ul>
<li>obj.save / Class.create / Class.insertMany</li>
<li>obj.remove / Class.remove</li>
<li>obj.update / Class.update    </li>
</ul>
<p><strong><em>举个栗子</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>)</div><div class="line"></div><div class="line">mongoose.connect(<span class="string">"mongodb://localhost/test"</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">"User"</span>,&#123;</div><div class="line">    <span class="attr">name</span>:&#123;<span class="attr">type</span>:<span class="built_in">String</span>,<span class="attr">maxlength</span>:<span class="number">10</span>&#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"></div><div class="line">User.remove(&#123;&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">// --------------save</span></div><div class="line">    <span class="comment">// const user = new User(&#123;name:"JiaYongfeng"&#125;)</span></div><div class="line">    <span class="comment">// const promise = user.save()</span></div><div class="line">    <span class="comment">// promise</span></div><div class="line">    <span class="comment">// .then(u =&gt; console.log(u))</span></div><div class="line">    <span class="comment">// .catch(err =&gt; console.log(err))</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">//</span></div><div class="line">    <span class="comment">// user.save(function (err,u)&#123;</span></div><div class="line">    <span class="comment">//     console.log(err,u);</span></div><div class="line">    <span class="comment">// &#125;)</span></div><div class="line"></div><div class="line">    <span class="comment">// --------------create     成功的保存，失败的抛出异常</span></div><div class="line">    <span class="comment">// User.create(&#123;name:"Jia"&#125;,&#123;name:"Yong"&#125;)</span></div><div class="line">    <span class="comment">// .then(function(u1,u2)&#123;</span></div><div class="line">    <span class="comment">//     console.log(u1,u2);</span></div><div class="line">    <span class="comment">// &#125;).catch(err =&gt; console.log(err))</span></div><div class="line"></div><div class="line">    <span class="comment">// User.create([&#123;name:"Jia"&#125;,&#123;name:"Yong1111"&#125;])</span></div><div class="line">    <span class="comment">// .then(function(arr)&#123;</span></div><div class="line">    <span class="comment">//     console.log(arr);</span></div><div class="line">    <span class="comment">// &#125;).catch(err =&gt; console.log(err))</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// ------------------insertMany     必须是数组，一条失败，全部失败</span></div><div class="line">    <span class="comment">// User.insertMany([&#123;name:"Jia"&#125;,&#123;name:"Yong"&#125;])</span></div><div class="line">    <span class="comment">// .then(function(arr)&#123;</span></div><div class="line">    <span class="comment">//     console.log(arr);</span></div><div class="line">    <span class="comment">// &#125;).catch(err =&gt; console.log(err))</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// --------------------remove</span></div><div class="line">    <span class="comment">// User.insertMany([&#123;name:"Jia22"&#125;,&#123;name:"Jia33"&#125;,&#123;name:"Jiasasd"&#125;,&#123;name:"Yong"&#125;])</span></div><div class="line">    <span class="comment">// .then(function(arr)&#123;</span></div><div class="line">    <span class="comment">//     User.remove(&#123;name:/^Jia\d*$/&#125;).then(r =&gt; console.log(r))</span></div><div class="line"></div><div class="line">        <span class="comment">// User.remove(&#123;name:"Jia"&#125;).then(r =&gt; console.log(r))</span></div><div class="line"></div><div class="line">        <span class="comment">// arr[0].remove()</span></div><div class="line">        <span class="comment">//     .then(obj =&gt; User.create(&#123;name:obj.name + " ----- reborn"&#125;))</span></div><div class="line">        <span class="comment">//     .catch(err =&gt; console.log(err))</span></div><div class="line"></div><div class="line">        <span class="comment">// arr[0].remove(function(err,obj)&#123;</span></div><div class="line">        <span class="comment">//     console.log(err,obj);</span></div><div class="line">        <span class="comment">// &#125;)</span></div><div class="line"></div><div class="line">    <span class="comment">// &#125;).catch(err =&gt; console.log(err))</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// -----------------------update</span></div><div class="line">    User.insertMany([&#123;<span class="attr">name</span>:<span class="string">"Jia22"</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">"Jia33"</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">"Jiasasd"</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">"Yong"</span>&#125;])</div><div class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</div><div class="line"></div><div class="line">        User.update(&#123;&#125;,&#123;<span class="attr">name</span>:<span class="string">"YongFeng"</span>&#125;,&#123;<span class="attr">multi</span>:<span class="literal">true</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;      <span class="comment">//默认只修改第一个符合条件的值,需要修改多个要加&#123;multi:true&#125;</span></div><div class="line">            <span class="built_in">console</span>.log(err,result);</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">        <span class="comment">// console.log("before update  ==&gt;",arr[0]);</span></div><div class="line">        <span class="comment">// arr[0].update(&#123;name:"123123123123fsdsdfddfsdfdsasdas"&#125;,&#123;runValidators:true&#125;).then(function(result)&#123;</span></div><div class="line">        <span class="comment">//     console.log(result);</span></div><div class="line">        <span class="comment">// &#125;).catch(err =&gt; console.log(err))</span></div><div class="line">    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h3 id="字段更改参数"><a href="#字段更改参数" class="headerlink" title="字段更改参数"></a>字段更改参数</h3><ul>
<li>$inc 加法运算</li>
<li>$mul 乘法运算</li>
<li>$min / $max 数值和日期的限定</li>
<li>$currentDate 设定当前日期<br><strong><em>举个栗子</em></strong>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>)</div><div class="line"></div><div class="line">mongoose.connect(<span class="string">"mongodb://localhost/test"</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> Topic = mongoose.model(<span class="string">"Topic"</span>, <span class="keyword">new</span> mongoose.Schema(&#123;</div><div class="line">    <span class="attr">title</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="built_in">String</span>,</div><div class="line">        <span class="attr">required</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">body</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="built_in">String</span>,</div><div class="line">        <span class="attr">required</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">money</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="built_in">Number</span>,</div><div class="line">        <span class="attr">default</span>: <span class="number">0.5</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">accessNum</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="built_in">Number</span>,</div><div class="line">        <span class="attr">default</span>: <span class="number">0</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">createTime</span>: <span class="built_in">Date</span>,</div><div class="line">    <span class="attr">updateTime</span>: <span class="built_in">Date</span></div><div class="line">&#125;))</div><div class="line"></div><div class="line">Topic.remove(&#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span></div><div class="line">    <span class="keyword">var</span> topic = <span class="keyword">new</span> Topic(&#123;</div><div class="line">        <span class="attr">title</span>: <span class="string">"aa"</span>,</div><div class="line">        <span class="attr">body</span>: <span class="string">"content"</span>,</div><div class="line">        <span class="attr">createTime</span>: date,</div><div class="line">        <span class="attr">updateTime</span>: date</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    topic.save(<span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</div><div class="line"></div><div class="line">        Topic.update(&#123;&#125;, &#123;</div><div class="line">            <span class="attr">title</span>: <span class="string">"my js"</span>,</div><div class="line"></div><div class="line">            <span class="attr">$currentDate</span>:&#123;  <span class="comment">//使用当前时间修改updateTime的值</span></div><div class="line">                updateTime:<span class="literal">true</span></div><div class="line">            &#125;,</div><div class="line"></div><div class="line">            <span class="attr">$min</span>: &#123; <span class="comment">//最小值，和平时理解的不一样，必须小于15，不超过15变成15</span></div><div class="line">                accessNum: <span class="number">15</span>   <span class="comment">//15</span></div><div class="line">            &#125;,</div><div class="line">            <span class="comment">// $max: &#123; //最大值，和平时理解的不一样，必须大于15，不满15变成15</span></div><div class="line">            <span class="comment">//     accessNum: 15   //15</span></div><div class="line">            <span class="comment">// &#125;</span></div><div class="line"></div><div class="line">            <span class="comment">//每个参数只能在一个算法当中</span></div><div class="line">            <span class="comment">// $mul: &#123; //乘</span></div><div class="line">            <span class="comment">//     money: 3    //1.5</span></div><div class="line">            <span class="comment">// &#125;,</span></div><div class="line">            <span class="comment">// $inc: &#123; //加</span></div><div class="line">            <span class="comment">//     accessNum: 2    //2</span></div><div class="line">            <span class="comment">// &#125;</span></div><div class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line"></div><div class="line">        &#125;)</div><div class="line"></div><div class="line">    &#125;)</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="数组类型字段的更改参数"><a href="#数组类型字段的更改参数" class="headerlink" title="数组类型字段的更改参数"></a>数组类型字段的更改参数</h3><ul>
<li>$pop 删除一条数据</li>
<li>$addToSet 添加去重数据</li>
<li>$pull / $pullAll 清除</li>
<li>$push 加入数据<br><strong><em>举个栗子</em></strong>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>)</div><div class="line"></div><div class="line">mongoose.connect(<span class="string">"mongodb://localhost/test"</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> Topic = mongoose.model(<span class="string">"Topic"</span>, &#123;</div><div class="line">    <span class="attr">arr</span>: []</div><div class="line">&#125;)</div><div class="line"></div><div class="line">Topic.remove(&#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    Topic.create(&#123;</div><div class="line">        <span class="attr">arr</span>: [<span class="number">11</span>, <span class="number">22</span>,<span class="number">11</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>]</div><div class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//  $pop删除一个</span></div><div class="line">        <span class="comment">// Topic.update(&#123;&#125;, &#123;</span></div><div class="line">        <span class="comment">//     $pop: &#123;</span></div><div class="line">        <span class="comment">//         arr: 1  //[11, 22, 33, 44, 55]  正数从后往前，负数从前往后</span></div><div class="line">        <span class="comment">//         //arr: -1 //[ 22, 33, 44, 55, 66]</span></div><div class="line">        <span class="comment">//     &#125;</span></div><div class="line">        <span class="comment">// &#125;).exec()</span></div><div class="line"></div><div class="line"></div><div class="line">        <span class="comment">//  $addToSet添加不重复</span></div><div class="line">        <span class="comment">// Topic.update(&#123;&#125;, &#123;</span></div><div class="line">        <span class="comment">//     $addToSet: &#123;</span></div><div class="line">        <span class="comment">//         // arr: 66     //如果重复，无法添加</span></div><div class="line">        <span class="comment">//         // arr: [77,88]    //[11, 22, 33, 44, 55, 66, [77,88]]并不是预期的效果</span></div><div class="line">        <span class="comment">//         arr: &#123;</span></div><div class="line">        <span class="comment">//             $each: [77, 88]     //[ 11, 22, 33, 44, 55, 66, 77, 88 ]</span></div><div class="line">        <span class="comment">//         &#125;</span></div><div class="line">        <span class="comment">//     &#125;</span></div><div class="line">        <span class="comment">// &#125;).exec()</span></div><div class="line"></div><div class="line">        <span class="comment">//  $pull删除一种数据</span></div><div class="line">        <span class="comment">// Topic.update(&#123;&#125;,&#123;</span></div><div class="line">        <span class="comment">//     $pull:&#123;</span></div><div class="line">        <span class="comment">//         arr:11  //[ 22, 33, 44, 55, 66 ]</span></div><div class="line">        <span class="comment">//         // arr:[11,22] //无效的</span></div><div class="line">        <span class="comment">//     &#125;</span></div><div class="line">        <span class="comment">// &#125;).exec()</span></div><div class="line"></div><div class="line">        <span class="comment">//  $pullAll删除多种数据</span></div><div class="line">        <span class="comment">// Topic.update(&#123;&#125;,&#123;</span></div><div class="line">        <span class="comment">//     $pullAll:&#123;</span></div><div class="line">        <span class="comment">//         arr:[11,22]  //[ 33, 44, 55, 66 ]</span></div><div class="line">        <span class="comment">//     &#125;</span></div><div class="line">        <span class="comment">// &#125;).exec()</span></div><div class="line"></div><div class="line">        <span class="comment">//  $push添加数据，可以重复</span></div><div class="line">        Topic.update(&#123;&#125;,&#123;</div><div class="line">            <span class="attr">$push</span>:&#123;</div><div class="line">                <span class="comment">// arr:66  //[ 11, 22, 11, 33, 44, 55, 66, 66 ]</span></div><div class="line">                arr:&#123;</div><div class="line">                    <span class="attr">$each</span>: [<span class="number">77</span>, <span class="number">88</span>],</div><div class="line">                    <span class="attr">$position</span>:<span class="number">0</span>,     <span class="comment">//从指定位置开始添加[ 77, 88, 11, 22, 11, 33, 44, 55, 66 ]</span></div><div class="line">                    $slice:<span class="number">-3</span>        <span class="comment">//截取数组，正数从前截取，负数从后截取</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).exec()</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="对象的基础查询"><a href="#对象的基础查询" class="headerlink" title="对象的基础查询"></a>对象的基础查询</h3><ul>
<li>find(conditions , [projection] , [options] , [callback])</li>
<li>findById</li>
<li>findByIdAndRemove / findByIdAndUpdate</li>
<li>findOne</li>
<li>findOneAndRemove / findOneAndUpdate<br><strong><em>举个栗子</em></strong>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>)</div><div class="line">mongoose.connect(<span class="string">"mongodb://localhost/test"</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> Topic = mongoose.model(<span class="string">"Topic"</span>, &#123;</div><div class="line">    <span class="attr">name</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="built_in">String</span>,</div><div class="line">        <span class="attr">maxlength</span>: <span class="number">10</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">const</span> arr = []</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</div><div class="line">    arr.push(&#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">"Jimmy"</span> + i</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">Topic.remove(&#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    Topic.create(arr).then(<span class="function"><span class="keyword">function</span>(<span class="params">objs</span>) </span>&#123;</div><div class="line">        <span class="keyword">let</span> id = objs[<span class="number">0</span>].id</div><div class="line">        <span class="comment">// Topic.findById(id, function(err, t) &#123;</span></div><div class="line">        <span class="comment">//     console.log(t);</span></div><div class="line">        <span class="comment">// &#125;)</span></div><div class="line"></div><div class="line">        <span class="comment">// Topic.findByIdAndRemove(id, function(err, t) &#123;</span></div><div class="line">        <span class="comment">//     console.log(t);</span></div><div class="line">        <span class="comment">// &#125;)</span></div><div class="line"></div><div class="line">        <span class="comment">// Topic.findByIdAndUpdate(id, &#123;</span></div><div class="line">        <span class="comment">//     name: "hahahaha111111111"</span></div><div class="line">        <span class="comment">// &#125;, &#123;</span></div><div class="line">        <span class="comment">//     runValidators: true</span></div><div class="line">        <span class="comment">// &#125;, function(err, t) &#123;</span></div><div class="line">        <span class="comment">//     console.log(err, t);</span></div><div class="line">        <span class="comment">// &#125;)</span></div><div class="line">        <span class="comment">// 上面这个和这个一样的效果</span></div><div class="line">        <span class="comment">// Topic.findByIdAndUpdate(id, &#123;</span></div><div class="line">        <span class="comment">//     name: "hahahaha111111111"</span></div><div class="line">        <span class="comment">// &#125;, &#123;</span></div><div class="line">        <span class="comment">//     runValidators: true</span></div><div class="line">        <span class="comment">// &#125;).then(function(t) &#123;</span></div><div class="line">        <span class="comment">//     console.log(t);</span></div><div class="line">        <span class="comment">// &#125;).catch(err =&gt; console.log(err))</span></div><div class="line">        <span class="comment">// 效果还是一样的，错误交由外部处理</span></div><div class="line">        <span class="comment">// return Topic.findByIdAndUpdate(id, &#123;</span></div><div class="line">        <span class="comment">//     name: "hahahaha111111111"</span></div><div class="line">        <span class="comment">// &#125;, &#123;</span></div><div class="line">        <span class="comment">//     runValidators: true</span></div><div class="line">        <span class="comment">// &#125;).then(function(t) &#123;</span></div><div class="line">        <span class="comment">//     console.log(t);</span></div><div class="line">        <span class="comment">// &#125;)</span></div><div class="line"></div><div class="line">        <span class="comment">// Topic.findOne(&#123;name:/^Jimmy1\d$/&#125;,function(err,t)&#123;  //返回满足条件的第一个</span></div><div class="line">        <span class="comment">//     console.log(t);</span></div><div class="line">        <span class="comment">// &#125;)</span></div><div class="line"></div><div class="line">        <span class="comment">// Topic.find(&#123;&#125;,function(err,ts)&#123;</span></div><div class="line">        <span class="comment">//     console.log(ts);</span></div><div class="line">        <span class="comment">// &#125;)</span></div><div class="line">        <span class="comment">// Topic.find(&#123;name:/^Jimmy1\d$/&#125;,function(err,ts)&#123;</span></div><div class="line">        <span class="comment">//     console.log(ts);</span></div><div class="line">        <span class="comment">// &#125;)</span></div><div class="line">        <span class="comment">// Topic.find(&#123;name:/^Jimmy1\d$/&#125;,"_id name",function(err,ts)&#123;  //第二个参数决定返回结果带有的属性，用空格分割，如果在属性前加-，则表示不返回这个属性</span></div><div class="line">        <span class="comment">//     console.log(ts);</span></div><div class="line">        <span class="comment">// &#125;)</span></div><div class="line">        Topic.find(&#123;<span class="attr">name</span>:<span class="regexp">/^Jimmy1\d$/</span>&#125;,<span class="literal">null</span>,&#123;<span class="attr">skip</span>:<span class="number">5</span>,<span class="attr">limit</span>:<span class="number">3</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,ts</span>)</span>&#123; <span class="comment">//第三个参数是对结果的筛选，skip指跳过几个，limit指最多返回几个，结合这两个可以实现翻页功能</span></div><div class="line">            <span class="built_in">console</span>.log(ts);</div><div class="line">        &#125;)</div><div class="line"></div><div class="line">    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="比较式查询"><a href="#比较式查询" class="headerlink" title="比较式查询"></a>比较式查询</h3><ul>
<li>大小判断<ul>
<li>$eq 等于</li>
<li>$gt 大于</li>
<li>$gte 大于等于</li>
<li>$lt 小于</li>
<li>$lte 小于等于</li>
</ul>
</li>
<li>$ne 不是</li>
<li>$in 包含</li>
<li>$nin 不包含<br><strong><em>举个栗子</em></strong>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>)</div><div class="line">mongoose.connect(<span class="string">"mongodb://localhost/test"</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> Topic = mongoose.model(<span class="string">"Topic"</span>, &#123;</div><div class="line">    <span class="attr">name</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="built_in">String</span>,</div><div class="line">        <span class="attr">maxlength</span>: <span class="number">10</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">num</span>: <span class="built_in">Number</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">const</span> arr = []</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</div><div class="line">    arr.push(&#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">"Jimmy"</span> + i,</div><div class="line">        <span class="attr">num</span>: i</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">Topic.remove(&#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    Topic.create(arr).then(<span class="function"><span class="keyword">function</span>(<span class="params">objs</span>) </span>&#123;</div><div class="line"></div><div class="line">        Topic.find(&#123;</div><div class="line">            <span class="attr">num</span>: &#123;</div><div class="line">                <span class="comment">// $lt: 20,    //小于20</span></div><div class="line">                <span class="comment">// $lte:20,    //小于等于20</span></div><div class="line">                <span class="comment">// $gt:10,      //大于10</span></div><div class="line">                <span class="comment">// $gte:10,     //大于等于10</span></div><div class="line">                <span class="comment">// $in: [11, 15], //值等于11或15</span></div><div class="line">                <span class="comment">// $nin: [11, 15], //值不等于11或15</span></div><div class="line">                <span class="comment">// $ne: 2, //不等于2的，只能一个值</span></div><div class="line">                $eq: <span class="number">2</span>, <span class="comment">//等于2的</span></div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, ts</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(ts);</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="逻辑式查询"><a href="#逻辑式查询" class="headerlink" title="逻辑式查询"></a>逻辑式查询</h3><ul>
<li>$or 或</li>
<li>$nor ($or相反)</li>
<li>$and 和</li>
<li>$not 否<br><strong><em>举个栗子</em></strong>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>)</div><div class="line">mongoose.connect(<span class="string">"mongodb://localhost/test"</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> Topic = mongoose.model(<span class="string">"Topic"</span>, &#123;</div><div class="line">    <span class="attr">name</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="built_in">String</span>,</div><div class="line">        <span class="attr">maxlength</span>: <span class="number">10</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">num</span>: <span class="built_in">Number</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">const</span> arr = []</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</div><div class="line">    arr.push(&#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">"Jimmy"</span> + i,</div><div class="line">        <span class="attr">num</span>: i</div><div class="line">    &#125;)</div><div class="line">&#125;</div><div class="line">Topic.remove(&#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    Topic.create(arr).then(<span class="function"><span class="keyword">function</span>(<span class="params">objs</span>) </span>&#123;</div><div class="line"></div><div class="line">        Topic.find(&#123;</div><div class="line">            <span class="comment">// $or: [&#123;     //满足一个条件就会返回</span></div><div class="line">            <span class="comment">//     name: "Jimmy1"</span></div><div class="line">            <span class="comment">// &#125;, &#123;</span></div><div class="line">            <span class="comment">//     num: 4</span></div><div class="line">            <span class="comment">// &#125;,&#123;</span></div><div class="line">            <span class="comment">//     num: 6</span></div><div class="line">            <span class="comment">// &#125;]</span></div><div class="line"></div><div class="line">            <span class="comment">// $nor: [&#123;        //不满足所有条件就返回</span></div><div class="line">            <span class="comment">//     name: "Jimmy1"</span></div><div class="line">            <span class="comment">// &#125;, &#123;</span></div><div class="line">            <span class="comment">//     num: 4</span></div><div class="line">            <span class="comment">// &#125;, &#123;</span></div><div class="line">            <span class="comment">//     num: 6</span></div><div class="line">            <span class="comment">// &#125;]</span></div><div class="line"></div><div class="line">            <span class="comment">// $and: [&#123;        //满足所有条件才返回</span></div><div class="line">            <span class="comment">//     name: /^Jimmy1\d$/</span></div><div class="line">            <span class="comment">// &#125;, &#123;</span></div><div class="line">            <span class="comment">//     num: &#123;</span></div><div class="line">            <span class="comment">//         $lte:15</span></div><div class="line">            <span class="comment">//     &#125;</span></div><div class="line">            <span class="comment">// &#125;]</span></div><div class="line">            <span class="comment">// $and: [&#123;        //可以混合使用</span></div><div class="line">            <span class="comment">//     $or: [&#123;</span></div><div class="line">            <span class="comment">//         name: "Jimmy1"</span></div><div class="line">            <span class="comment">//     &#125;, &#123;</span></div><div class="line">            <span class="comment">//         num: 4</span></div><div class="line">            <span class="comment">//     &#125;, &#123;</span></div><div class="line">            <span class="comment">//         num: 6</span></div><div class="line">            <span class="comment">//     &#125;]</span></div><div class="line">            <span class="comment">// &#125;, &#123;</span></div><div class="line">            <span class="comment">//     num: 4</span></div><div class="line">            <span class="comment">// &#125;]</span></div><div class="line"></div><div class="line">            num: &#123;</div><div class="line">                <span class="attr">$not</span>: &#123; <span class="comment">//不满足条件的返回</span></div><div class="line">                    $gte: <span class="number">10</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, ts</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(ts);</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="数组专用查询"><a href="#数组专用查询" class="headerlink" title="数组专用查询"></a>数组专用查询</h3><ul>
<li>$all 是否包含查询条件</li>
<li>$elemMatch 数组元素查询条件</li>
<li>$size 数组大小查询条件</li>
<li>$where 其他<br><strong><em>举个栗子</em></strong>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>)</div><div class="line">mongoose.connect(<span class="string">"mongodb://localhost/test"</span>)</div><div class="line"><span class="comment">//$all&amp;$elemMatch</span></div><div class="line"><span class="comment">// const Topic = mongoose.model("Topic", &#123;</span></div><div class="line"><span class="comment">//     arr: []</span></div><div class="line"><span class="comment">// &#125;)</span></div><div class="line"></div><div class="line"><span class="comment">//$all</span></div><div class="line"><span class="comment">// Topic.remove(&#123;&#125;, function() &#123;</span></div><div class="line"><span class="comment">//     Topic.create([&#123;</span></div><div class="line"><span class="comment">//             arr: [11, 22, 33]</span></div><div class="line"><span class="comment">//         &#125;,</span></div><div class="line"><span class="comment">//         &#123;</span></div><div class="line"><span class="comment">//             arr: [33, 44, 55]</span></div><div class="line"><span class="comment">//         &#125;,</span></div><div class="line"><span class="comment">//         &#123;</span></div><div class="line"><span class="comment">//             arr: [55, 66, 77, 88]</span></div><div class="line"><span class="comment">//         &#125;</span></div><div class="line"><span class="comment">//     ]).then(function() &#123;</span></div><div class="line"><span class="comment">//         Topic.find(&#123;</span></div><div class="line"><span class="comment">//             arr: &#123;</span></div><div class="line"><span class="comment">//                 $all: [33, 44] //都存在的返回</span></div><div class="line"><span class="comment">//             &#125;</span></div><div class="line"><span class="comment">//         &#125;).then((result) =&gt; &#123;</span></div><div class="line"><span class="comment">//             console.log(result);</span></div><div class="line"><span class="comment">//         &#125;)</span></div><div class="line"><span class="comment">//     &#125;)</span></div><div class="line"><span class="comment">// &#125;)</span></div><div class="line"></div><div class="line"><span class="comment">//$elemMatch</span></div><div class="line"><span class="comment">// function generatorArr(size) &#123;</span></div><div class="line"><span class="comment">//     let arr = []</span></div><div class="line"><span class="comment">//     for (let i = 0; i &lt; size; i++) &#123;</span></div><div class="line"><span class="comment">//         arr.push(&#123;</span></div><div class="line"><span class="comment">//             name: "Jimmy" + i,</span></div><div class="line"><span class="comment">//             num: i</span></div><div class="line"><span class="comment">//         &#125;)</span></div><div class="line"><span class="comment">//     &#125;</span></div><div class="line"><span class="comment">//     return arr</span></div><div class="line"><span class="comment">// &#125;</span></div><div class="line"><span class="comment">//</span></div><div class="line"><span class="comment">// Topic.remove(&#123;&#125;, function() &#123;</span></div><div class="line"><span class="comment">//     Topic.create([&#123;</span></div><div class="line"><span class="comment">//             arr: generatorArr(5)</span></div><div class="line"><span class="comment">//         &#125;,</span></div><div class="line"><span class="comment">//         &#123;</span></div><div class="line"><span class="comment">//             arr: generatorArr(10)</span></div><div class="line"><span class="comment">//         &#125;,</span></div><div class="line"><span class="comment">//         &#123;</span></div><div class="line"><span class="comment">//             arr: generatorArr(15)</span></div><div class="line"><span class="comment">//         &#125;</span></div><div class="line"><span class="comment">//     ]).then(function() &#123;</span></div><div class="line"><span class="comment">//         Topic.find(&#123;</span></div><div class="line"><span class="comment">//             arr: &#123;</span></div><div class="line"><span class="comment">//                 // $elemMatch: &#123;       //匹配数组内部元素的数据</span></div><div class="line"><span class="comment">//                 //     name: "Jimmy9"</span></div><div class="line"><span class="comment">//                 // &#125;</span></div><div class="line"><span class="comment">//                 $size: 5        //匹配数组length</span></div><div class="line"><span class="comment">//             &#125;</span></div><div class="line"><span class="comment">//         &#125;).then((result) =&gt; &#123;</span></div><div class="line"><span class="comment">//             console.log(result);</span></div><div class="line"><span class="comment">//         &#125;)</span></div><div class="line"><span class="comment">//     &#125;)</span></div><div class="line"><span class="comment">// &#125;)</span></div><div class="line"></div><div class="line"><span class="comment">//$where</span></div><div class="line"><span class="keyword">const</span> Topic = mongoose.model(<span class="string">"Topic"</span>, &#123;</div><div class="line">    <span class="attr">obj</span>: &#123;&#125;</div><div class="line">&#125;)</div><div class="line">Topic.remove(&#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    Topic.create([&#123;</div><div class="line">        <span class="attr">obj</span>: &#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">"java"</span>,</div><div class="line">            <span class="attr">num</span>: <span class="number">1</span></div><div class="line">        &#125;</div><div class="line">    &#125;, &#123;</div><div class="line">        <span class="attr">obj</span>: &#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">"javascript"</span>,</div><div class="line">            <span class="attr">num</span>: <span class="number">2</span></div><div class="line">        &#125;</div><div class="line">    &#125;, &#123;</div><div class="line">        <span class="attr">obj</span>: &#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">"nodejs"</span>,</div><div class="line">            <span class="attr">num</span>: <span class="number">3</span></div><div class="line">        &#125;</div><div class="line">    &#125;]).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        Topic.find(&#123;</div><div class="line">            <span class="comment">// $where: "this.obj.name === 'java'"      //直接写js</span></div><div class="line">            $where: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">                <span class="keyword">return</span> <span class="regexp">/^java\w*$/</span>.test(<span class="keyword">this</span>.obj.name) &amp;&amp; <span class="keyword">this</span>.obj.num === <span class="number">2</span></div><div class="line">            &#125;</div><div class="line">        &#125;, <span class="literal">null</span>, &#123; <span class="comment">//同样可以混合使用</span></div><div class="line">            limit: <span class="number">2</span>,</div><div class="line">            <span class="attr">skip</span>: <span class="number">0</span></div><div class="line">        &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(result);</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="Query查询风格"><a href="#Query查询风格" class="headerlink" title="Query查询风格"></a>Query查询风格</h3><p>另一种风格的写法，作为了解，下面例子将会改写上面的例子<br><strong><em>举个栗子</em></strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">Topic.create([&#123;</div><div class="line">        <span class="attr">arr</span>: [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">arr</span>: [<span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">arr</span>: [<span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">88</span>]</div><div class="line">    &#125;</div><div class="line">]).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> query = Topic.find()</div><div class="line">    query.where(<span class="string">"arr"</span>)</div><div class="line">        .all([<span class="number">33</span>,<span class="number">44</span>])</div><div class="line">        .limit(<span class="number">3</span>)</div><div class="line">        .skip(<span class="number">10</span>)</div><div class="line">        .select(<span class="string">"name age"</span>)</div><div class="line">        .exec(<span class="function"><span class="keyword">function</span> (<span class="params">err,result</span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(result)</div><div class="line">        &#125;)</div><div class="line">&#125;)</div><div class="line"><span class="comment">//elemMatch的query写法</span></div><div class="line">Topic.create([&#123;</div><div class="line">        <span class="attr">arr</span>: generatorArr(<span class="number">5</span>)</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">arr</span>: generatorArr(<span class="number">10</span>)</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="attr">arr</span>: generatorArr(<span class="number">15</span>)</div><div class="line">    &#125;</div><div class="line">]).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    Topic.find()</div><div class="line">    .where(<span class="string">"arr"</span>)</div><div class="line">    .elemMatch(&#123;<span class="attr">name</span>:<span class="string">"Jimmy9"</span>&#125;)</div><div class="line">    .exec(<span class="function"><span class="keyword">function</span> (<span class="params">err,result</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(result)</div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    <span class="comment">//另一种写法</span></div><div class="line">    Topic.find()</div><div class="line">    .where(<span class="string">"arr"</span>)</div><div class="line">    .elemMatch(<span class="function"><span class="keyword">function</span> (<span class="params">elem</span>)</span>&#123;</div><div class="line">        elem.where(<span class="string">"name"</span>).eq(<span class="string">"Jimmy9"</span>).where(<span class="string">"num"</span>).gte() ....</div><div class="line">    &#125;)</div><div class="line">    .exec(<span class="function"><span class="keyword">function</span> (<span class="params">err,result</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(result)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>具体可以查看文档<a href="http://mongoosejs.com/docs/queries.html" target="_blank" rel="external">http://mongoosejs.com/docs/queries.html</a></p>
<h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>会触发中间件的：</p>
<ul>
<li>validate</li>
<li>doc.save</li>
<li>Class.create / Class.insertMany</li>
<li>doc.update</li>
<li>doc.remove</li>
<li>find</li>
<li>findOne</li>
<li>findAndRemove / findOneAndUpdate<br><strong><em>举个栗子</em></strong>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">"mongoose"</span>)</div><div class="line"></div><div class="line">mongoose.connect(<span class="string">"mongodb://localhost/test"</span>)</div><div class="line"></div><div class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</div><div class="line">    <span class="attr">name</span>: &#123;</div><div class="line">        <span class="attr">type</span>: <span class="built_in">String</span>,</div><div class="line">        <span class="attr">maxlength</span>: <span class="number">5</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">userSchema.pre(<span class="string">"validate"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">next</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"pre validate"</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.errors);</div><div class="line">    next()</div><div class="line">&#125;)</div><div class="line"></div><div class="line">userSchema.post(<span class="string">"validate"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// console.log(this.errors?this.errors.name.message:this.errors);</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"post validate"</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// userSchema.pre("save", function(next) &#123;</span></div><div class="line"><span class="comment">//     console.log("pre save one");</span></div><div class="line"><span class="comment">//     next()</span></div><div class="line"><span class="comment">// &#125;)</span></div><div class="line">userSchema.pre(<span class="string">"save"</span>,<span class="literal">true</span>, <span class="function"><span class="keyword">function</span>(<span class="params">next,done</span>) </span>&#123;    <span class="comment">//默认不加true，加true表示并行,在执行完所有的pre之后在执行后面的，没什么卵用的功能，完全能用next来控制</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"pre save one"</span>);</div><div class="line">    next()</div><div class="line">    setTimeout(done,<span class="number">2000</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">userSchema.pre(<span class="string">"save"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">next</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"pre save two"</span>);</div><div class="line">    setTimeout(next,<span class="number">2000</span>)</div><div class="line">&#125;)</div><div class="line"></div><div class="line">userSchema.post(<span class="string">"save"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"post save"</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">userSchema.pre(<span class="string">"update"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">next</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"pre update"</span>);</div><div class="line">    next()</div><div class="line">&#125;)</div><div class="line"></div><div class="line">userSchema.post(<span class="string">"update"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"post update"</span>);</div><div class="line">&#125;)</div><div class="line"></div><div class="line">userSchema.pre(<span class="string">"remove"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">next</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"pre remove"</span>);</div><div class="line">    next()</div><div class="line">&#125;)</div><div class="line">userSchema.post(<span class="string">"remove"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">"post remove"</span>);</div><div class="line">&#125;)</div><div class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">"User"</span>, userSchema)</div><div class="line"></div><div class="line">User.remove(&#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> user = <span class="keyword">new</span> User(&#123;</div><div class="line">        <span class="attr">name</span>: <span class="string">"Jia"</span></div><div class="line">    &#125;)</div><div class="line"></div><div class="line">    user.save(<span class="function"><span class="keyword">function</span>(<span class="params">err, u</span>) </span>&#123;</div><div class="line">        u.update(&#123;</div><div class="line">            <span class="attr">name</span>: <span class="string">"Jimmy"</span></div><div class="line">        &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</div><div class="line"></div><div class="line">            u.remove()</div><div class="line">        &#125;)</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong><em>END</em></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;h3 id=&quot;安装Node-js和MongoDB&quot;&gt;&lt;a href=&quot;#安装Node-js和MongoDB&quot; class=&quot;he
    
    </summary>
    
      <category term="Mongoose" scheme="http://YongMaple.github.io/categories/Mongoose/"/>
    
    
      <category term="mongodb" scheme="http://YongMaple.github.io/tags/mongodb/"/>
    
      <category term="mongoose" scheme="http://YongMaple.github.io/tags/mongoose/"/>
    
  </entry>
  
  <entry>
    <title>IOS设置document.title无效的解决办法</title>
    <link href="http://YongMaple.github.io/2017/02/04/IOS%E8%AE%BE%E7%BD%AEdocument-title%E6%97%A0%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://YongMaple.github.io/2017/02/04/IOS设置document-title无效的解决办法/</id>
    <published>2017-02-04T08:54:52.000Z</published>
    <updated>2017-02-04T08:56:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题原因："><a href="#问题原因：" class="headerlink" title="问题原因："></a>问题原因：</h2><p>因为浏览器首次加载页面初始化title后，就再也不监听 document.title的change事件。</p>
<h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>修改title之后，给页面加上一个内容为空的iframe，随后立即删除这个iframe，这时候会刷新title。但是如果简单的这样设置，一般是会有闪动的，所以可以设置</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">setTitle: <span class="function"><span class="keyword">function</span>(<span class="params">title</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> $body = $(<span class="string">'body'</span>)</div><div class="line">    <span class="built_in">document</span>.title = title</div><div class="line">    <span class="keyword">let</span> $iframe = $(<span class="string">'&lt;iframe src="/favicon.ico"&gt;&lt;/iframe&gt;'</span>)</div><div class="line">    $iframe.on(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        $iframe.off(<span class="string">'load'</span>).remove()</div><div class="line">      &#125;, <span class="number">0</span>)</div><div class="line">    &#125;).appendTo($body)</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>参考地址：<a href="http://www.cnblogs.com/lihanying/p/6227192.html" target="_blank" rel="external">http://www.cnblogs.com/lihanying/p/6227192.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题原因：&quot;&gt;&lt;a href=&quot;#问题原因：&quot; class=&quot;headerlink&quot; title=&quot;问题原因：&quot;&gt;&lt;/a&gt;问题原因：&lt;/h2&gt;&lt;p&gt;因为浏览器首次加载页面初始化title后，就再也不监听 document.title的change事件。&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="编程思考" scheme="http://YongMaple.github.io/categories/%E7%BC%96%E7%A8%8B%E6%80%9D%E8%80%83/"/>
    
    
      <category term="title" scheme="http://YongMaple.github.io/tags/title/"/>
    
      <category term="ios" scheme="http://YongMaple.github.io/tags/ios/"/>
    
      <category term="手机端" scheme="http://YongMaple.github.io/tags/%E6%89%8B%E6%9C%BA%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>iTerm2配色修改</title>
    <link href="http://YongMaple.github.io/2017/02/04/iTerm2%E9%85%8D%E8%89%B2%E4%BF%AE%E6%94%B9/"/>
    <id>http://YongMaple.github.io/2017/02/04/iTerm2配色修改/</id>
    <published>2017-02-04T02:25:12.000Z</published>
    <updated>2017-02-04T02:57:49.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>首先<code>sudo vim ~/.bash_profile</code>，输入密码后按e进入编辑，看别人的帖子是不需要sudo的。。。但是我需要</li>
<li><p>然后i进入编辑模式，加入下面这段，然后<code>esc</code>输入<code>:wq</code>保存   </p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#enables colorin the terminal bash <span class="keyword">shell</span> export</div><div class="line">export CLICOLOR=<span class="number">1</span></div><div class="line"></div><div class="line">#sets <span class="keyword">up</span> thecolor scheme <span class="keyword">for</span> <span class="keyword">list</span> export</div><div class="line">export LSCOLORS=gxfxcxdxbxegedabagacad</div><div class="line"></div><div class="line">#sets <span class="keyword">up</span> theprompt color (currently <span class="keyword">a</span> green similar <span class="keyword">to</span> linux terminal)</div><div class="line">export PS1=<span class="string">'\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;36m\]\w\[\033[00m\]\$ '</span></div><div class="line"></div><div class="line">#enables colorfor iTerm</div><div class="line">export TERM=xterm-color</div></pre></td></tr></table></figure>
</li>
<li><p>然后修改<code>preference-&gt;profiles-&gt;Terminal-&gt;xterm-new</code><br><img src="http://okmneu7zl.bkt.clouddn.com/WX20170204-095600.png" alt="">   </p>
</li>
<li>去挑选喜欢的配色方案，我在这里找的<a href="http://iterm2colorschemes.com/" target="_blank" rel="external">http://iterm2colorschemes.com/</a></li>
<li>下载到你喜欢的配色后，导入<br><img src="http://okmneu7zl.bkt.clouddn.com/WX20170204-095639.png" alt=""><br>导入后选择你的配色，然后注销mac，再打开就发现配色变了，之后再换配色只要直接改就行了</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;首先&lt;code&gt;sudo vim ~/.bash_profile&lt;/code&gt;，输入密码后按e进入编辑，看别人的帖子是不需要sudo的。。。但是我需要&lt;/li&gt;
&lt;li&gt;&lt;p&gt;然后i进入编辑模式，加入下面这段，然后&lt;code&gt;esc&lt;/code&gt;输入&lt;code&gt;
    
    </summary>
    
      <category term="工具使用" scheme="http://YongMaple.github.io/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="开发工具" scheme="http://YongMaple.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="iTerm2" scheme="http://YongMaple.github.io/tags/iTerm2/"/>
    
  </entry>
  
  <entry>
    <title>Retina视网膜屏幕适配</title>
    <link href="http://YongMaple.github.io/2017/01/19/Retina%E8%A7%86%E7%BD%91%E8%86%9C%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D/"/>
    <id>http://YongMaple.github.io/2017/01/19/Retina视网膜屏幕适配/</id>
    <published>2017-01-19T07:10:57.000Z</published>
    <updated>2017-01-19T07:11:49.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">        div &#123;</div><div class="line">            border: 1px solid #bbb;</div><div class="line">        &#125;</div><div class="line">        .hairlines div &#123;</div><div class="line">            border-width: .5px;</div><div class="line">        &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.devicePixelRatio &amp;&amp; devicePixelRatio &gt;= <span class="number">2</span>) &#123;</div><div class="line">        <span class="keyword">var</span> testElem = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">        testElem.style.border = <span class="string">'.5px solid transparent'</span>;</div><div class="line">        <span class="built_in">document</span>.body.appendChild(testElem);</div><div class="line">        <span class="keyword">if</span> (testElem.offsetHeight == <span class="number">1</span>)&#123;</div><div class="line">            <span class="built_in">document</span>.querySelector(<span class="string">'html'</span>).classList.add(<span class="string">'hairlines'</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">document</span>.body.removeChild(testElem);</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>window.devicePixelRatio是设备上物理像素和设备独立像素(device-independent pixels (dips))的比例。<br>公式表示就是：window.devicePixelRatio = 物理像素 / dips  </p>
<p>offsetHeight = clientHeight + 滚动条 + 边框   </p>
</blockquote>
<p>如果是retina屏，会先创建个div来测试浏览器是否能探测到0.5px，如果可以会才会使用0.5px的样式   </p>
<p>原文地址：<a href="http://dieulot.net/css-retina-hairline" target="_blank" rel="external">http://dieulot.net/css-retina-hairline</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div
    
    </summary>
    
      <category term="编程思考" scheme="http://YongMaple.github.io/categories/%E7%BC%96%E7%A8%8B%E6%80%9D%E8%80%83/"/>
    
    
      <category term="手机端" scheme="http://YongMaple.github.io/tags/%E6%89%8B%E6%9C%BA%E7%AB%AF/"/>
    
      <category term="适配" scheme="http://YongMaple.github.io/tags/%E9%80%82%E9%85%8D/"/>
    
      <category term="Retina" scheme="http://YongMaple.github.io/tags/Retina/"/>
    
  </entry>
  
  <entry>
    <title>ES6-遍历对象属性</title>
    <link href="http://YongMaple.github.io/2017/01/19/ES6-%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7/"/>
    <id>http://YongMaple.github.io/2017/01/19/ES6-遍历对象属性/</id>
    <published>2017-01-19T07:07:58.000Z</published>
    <updated>2017-01-19T07:09:55.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">this</span>.name = <span class="string">'leo'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getName() &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>()&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.age = <span class="number">22</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getAge()&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [<span class="built_in">Symbol</span>(<span class="string">'fullname'</span>)]()&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">B.prototype.getClass = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> B;</div><div class="line"></div><div class="line"><span class="comment">// Object.keys 能够得到自身的可枚举的属性,但得不到原型链上的属性.</span></div><div class="line"><span class="comment">// 得不到 Symbols 属性</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(B.prototype));</div><div class="line"></div><div class="line"><span class="comment">// Object.getOwnPropertyNames(b) 能够得到自身属性,</span></div><div class="line"><span class="comment">// 包括不可枚举的属性,但得不到原型链上的属性.</span></div><div class="line"><span class="comment">// 得不到 Symbols 属性</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(B.prototype));</div><div class="line"></div><div class="line"><span class="comment">// 可以得到自身的 Symbols 属性,包括不可枚举的属性.</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(B.prototype));</div><div class="line"></div><div class="line"><span class="comment">// 可以得到自身和继承的原型链上的属性,但必须是可枚举属性.</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> b)&#123;</div><div class="line">    <span class="built_in">console</span>.log(key);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 判断是否可枚举，enumerable为true可枚举</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(B.prototype,<span class="string">'getAge'</span>));</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;
    
    </summary>
    
      <category term="ES6笔记" scheme="http://YongMaple.github.io/categories/ES6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ES6" scheme="http://YongMaple.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6-Object.assign</title>
    <link href="http://YongMaple.github.io/2017/01/19/ES6-Object-assign/"/>
    <id>http://YongMaple.github.io/2017/01/19/ES6-Object-assign/</id>
    <published>2017-01-19T07:07:47.000Z</published>
    <updated>2017-01-19T07:09:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>Object.assign将可以枚举的属性赋值给对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="keyword">var</span> skey = <span class="built_in">Symbol</span>(<span class="string">'testname'</span>);</div><div class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.assign(obj, &#123;<span class="attr">name</span>: <span class="string">'leo'</span>&#125;, &#123;<span class="attr">age</span>: <span class="number">30</span>&#125;,&#123;[skey]:<span class="string">'ok good'</span>&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(obj === obj2, obj);</div><div class="line"><span class="built_in">console</span>.log(obj[skey]);</div><div class="line"></div><div class="line"><span class="keyword">const</span> DEFAULT_OPTIONS = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'leo'</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">opts</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> options = <span class="built_in">Object</span>.assign(&#123;&#125;, DEFAULT_OPTIONS, opts);</div><div class="line">    <span class="built_in">console</span>.log(options);</div><div class="line">&#125;</div><div class="line"></div><div class="line">test();</div><div class="line"></div><div class="line">test(&#123;<span class="attr">name</span>:<span class="string">'zengliang'</span>&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Object.assign将可以枚举的属性赋值给对象&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class
    
    </summary>
    
      <category term="ES6笔记" scheme="http://YongMaple.github.io/categories/ES6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ES6" scheme="http://YongMaple.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6-Object.is</title>
    <link href="http://YongMaple.github.io/2017/01/19/ES6-Object-is/"/>
    <id>http://YongMaple.github.io/2017/01/19/ES6-Object-is/</id>
    <published>2017-01-19T07:07:35.000Z</published>
    <updated>2017-01-19T07:09:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Object.is相当于全等又有些区别<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(&#123;&#125;,&#123;&#125;) , &#123;&#125; === &#123;&#125; ); <span class="comment">//fasle false</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>,<span class="literal">NaN</span>) , <span class="literal">NaN</span> === <span class="literal">NaN</span>);  <span class="comment">//true false</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(+<span class="number">0</span>,<span class="number">-0</span>) , +<span class="number">0</span> === <span class="number">-0</span>);  <span class="comment">//false true</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Object.is相当于全等又有些区别&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;
    
    </summary>
    
      <category term="ES6笔记" scheme="http://YongMaple.github.io/categories/ES6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ES6" scheme="http://YongMaple.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6-对象属性的新写法</title>
    <link href="http://YongMaple.github.io/2017/01/19/ES6-%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%9A%84%E6%96%B0%E5%86%99%E6%B3%95/"/>
    <id>http://YongMaple.github.io/2017/01/19/ES6-对象属性的新写法/</id>
    <published>2017-01-19T07:07:22.000Z</published>
    <updated>2017-01-19T07:08:46.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">        <span class="keyword">this</span>.name = <span class="string">'leo'</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getName() &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</div><div class="line">    <span class="keyword">constructor</span>()&#123;</div><div class="line">        <span class="keyword">super</span>();</div><div class="line">        <span class="keyword">this</span>.age = <span class="number">22</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    getAge()&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [<span class="built_in">Symbol</span>(<span class="string">'fullname'</span>)]()&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">B.prototype.getClass = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> B;</div><div class="line"></div><div class="line"><span class="comment">// Object.keys 能够得到自身的可枚举的属性,但得不到原型链上的属性.</span></div><div class="line"><span class="comment">// 得不到 Symbols 属性</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(B.prototype));</div><div class="line"></div><div class="line"><span class="comment">// Object.getOwnPropertyNames(b) 能够得到自身属性,</span></div><div class="line"><span class="comment">// 包括不可枚举的属性,但得不到原型链上的属性.</span></div><div class="line"><span class="comment">// 得不到 Symbols 属性</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(B.prototype));</div><div class="line"></div><div class="line"><span class="comment">// 可以得到自身的 Symbols 属性,包括不可枚举的属性.</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(B.prototype));</div><div class="line"></div><div class="line"><span class="comment">// 可以得到自身和继承的原型链上的属性,但必须是可枚举属性.</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> b)&#123;</div><div class="line">    <span class="built_in">console</span>.log(key);</div><div class="line">&#125;</div><div class="line"><span class="comment">// 判断是否可枚举，enumerable为true可枚举</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(B.prototype,<span class="string">'getAge'</span>));</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;
    
    </summary>
    
      <category term="ES6笔记" scheme="http://YongMaple.github.io/categories/ES6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ES6" scheme="http://YongMaple.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>JS-forEach和map</title>
    <link href="http://YongMaple.github.io/2017/01/18/JS-forEach%E5%92%8Cmap/"/>
    <id>http://YongMaple.github.io/2017/01/18/JS-forEach和map/</id>
    <published>2017-01-18T02:38:49.000Z</published>
    <updated>2017-02-04T07:40:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>第1个是遍历的数组内容；<br>第2个是对应的数组索引;<br>第3个是数组本身<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>举个栗子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>)</span>&#123;<span class="keyword">return</span> v &gt; <span class="number">3</span>;&#125;);</div><div class="line"><span class="comment">//[false, false, false, true, true]</span></div><div class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>)</span>&#123;<span class="keyword">return</span> v &gt; <span class="number">3</span>;&#125;);</div><div class="line"><span class="comment">//undefined</span></div></pre></td></tr></table></figure></p>
<p><strong>map()方法</strong>：<br>若这个回调函数有返回值，map()方法会产生一个新数组，这个新数组由原数组元素对应的回调函数的返回值构成。<br>若没有返回值，则新数组的所有元素为undefined。<br><strong>forEach方法</strong>：<br>仅仅为每个数组元素执行回调函数。   </p>
<p>再举一个<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> v+<span class="number">1</span></div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(result);    <span class="comment">//[2, 3, 4, 5, 6]</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(v,i)    <span class="comment">//1 0</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第1个是遍历的数组内容；&lt;br&gt;第2个是对应的数组索引;&lt;br&gt;第3个是数组本身&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/
    
    </summary>
    
      <category term="JS基础" scheme="http://YongMaple.github.io/categories/JS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript" scheme="http://YongMaple.github.io/tags/JavaScript/"/>
    
      <category term="JS" scheme="http://YongMaple.github.io/tags/JS/"/>
    
      <category term="基础" scheme="http://YongMaple.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="forEach" scheme="http://YongMaple.github.io/tags/forEach/"/>
    
      <category term="map" scheme="http://YongMaple.github.io/tags/map/"/>
    
  </entry>
  
  <entry>
    <title>JS-sort</title>
    <link href="http://YongMaple.github.io/2017/01/18/JS-sort/"/>
    <id>http://YongMaple.github.io/2017/01/18/JS-sort/</id>
    <published>2017-01-18T02:37:54.000Z</published>
    <updated>2017-02-04T07:40:16.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>);</div><div class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> b-a</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(arrSimple2.join());</div></pre></td></tr></table></figure>
<p><strong>解释</strong>：a,b表示数组中的任意两个元素，若return &gt; 0 b前a后；reutrn &lt; 0 a前b后；a=b时存在浏览器兼容<br><strong>简化一下</strong>：a-b输出从小到大排序，b-a输出从大到小排序。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> objectList = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Persion</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">&#125;</div><div class="line">objectList.push(<span class="keyword">new</span> Persion(<span class="string">'jack'</span>, <span class="number">20</span>));</div><div class="line">objectList.push(<span class="keyword">new</span> Persion(<span class="string">'tony'</span>, <span class="number">25</span>));</div><div class="line">objectList.push(<span class="keyword">new</span> Persion(<span class="string">'stone'</span>, <span class="number">26</span>));</div><div class="line">objectList.push(<span class="keyword">new</span> Persion(<span class="string">'mandy'</span>, <span class="number">23</span>));</div><div class="line"><span class="comment">//按年龄从小到大排序</span></div><div class="line">objectList.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a.age - b.age</div><div class="line">&#125;);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; objectList.length; i++) &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'age:'</span> + objectList[i].age + <span class="string">' name:'</span> + objectList[i].name);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>也可以对对象的属性进行排序</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;
    
    </summary>
    
      <category term="JS基础" scheme="http://YongMaple.github.io/categories/JS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript" scheme="http://YongMaple.github.io/tags/JavaScript/"/>
    
      <category term="JS" scheme="http://YongMaple.github.io/tags/JS/"/>
    
      <category term="基础" scheme="http://YongMaple.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="sort" scheme="http://YongMaple.github.io/tags/sort/"/>
    
  </entry>
  
  <entry>
    <title>JS-match和exec</title>
    <link href="http://YongMaple.github.io/2017/01/18/JS-match%E5%92%8Cexec/"/>
    <id>http://YongMaple.github.io/2017/01/18/JS-match和exec/</id>
    <published>2017-01-18T02:34:52.000Z</published>
    <updated>2017-01-18T02:35:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>举个栗子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> order = <span class="string">'is2'</span></div><div class="line"><span class="keyword">var</span> arr = order.match(<span class="regexp">/\d+/</span>)</div><div class="line"><span class="built_in">console</span>.log(arr)</div><div class="line"><span class="comment">//["2", index: 2, input: "is2"]</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> arr2 = <span class="regexp">/\d+/</span>.exec(order);</div><div class="line"><span class="built_in">console</span>.log(arr2)</div><div class="line"><span class="comment">//["2", index: 2, input: "is2"]</span></div></pre></td></tr></table></figure></p>
<p>值得注意的是match和exec返回的结果都是数组</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;举个栗子&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div cl
    
    </summary>
    
      <category term="JS基础" scheme="http://YongMaple.github.io/categories/JS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript" scheme="http://YongMaple.github.io/tags/JavaScript/"/>
    
      <category term="JS" scheme="http://YongMaple.github.io/tags/JS/"/>
    
      <category term="基础" scheme="http://YongMaple.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="match" scheme="http://YongMaple.github.io/tags/match/"/>
    
      <category term="exec" scheme="http://YongMaple.github.io/tags/exec/"/>
    
      <category term="正则" scheme="http://YongMaple.github.io/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>JS-includes和indexOf</title>
    <link href="http://YongMaple.github.io/2017/01/18/JS-includes%E5%92%8CindexOf/"/>
    <id>http://YongMaple.github.io/2017/01/18/JS-includes和indexOf/</id>
    <published>2017-01-18T02:33:03.000Z</published>
    <updated>2017-01-18T02:34:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>举个栗子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'hahaha123'</span></div><div class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">'1'</span>));     <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">'1'</span>));      <span class="comment">//6</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</div><div class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">1</span>));       <span class="comment">//true</span></div><div class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">1</span>));        <span class="comment">//0</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;举个栗子&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div cl
    
    </summary>
    
      <category term="JS基础" scheme="http://YongMaple.github.io/categories/JS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript" scheme="http://YongMaple.github.io/tags/JavaScript/"/>
    
      <category term="JS" scheme="http://YongMaple.github.io/tags/JS/"/>
    
      <category term="基础" scheme="http://YongMaple.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="includes" scheme="http://YongMaple.github.io/tags/includes/"/>
    
      <category term="indexOf" scheme="http://YongMaple.github.io/tags/indexOf/"/>
    
  </entry>
  
  <entry>
    <title>JS-join拼接</title>
    <link href="http://YongMaple.github.io/2017/01/18/JS-join%E6%8B%BC%E6%8E%A5/"/>
    <id>http://YongMaple.github.io/2017/01/18/JS-join拼接/</id>
    <published>2017-01-18T02:30:45.000Z</published>
    <updated>2017-01-18T02:32:06.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>)</div><div class="line">arr[<span class="number">0</span>] = <span class="string">"George"</span></div><div class="line">arr[<span class="number">1</span>] = <span class="string">"John"</span></div><div class="line">arr[<span class="number">2</span>] = <span class="string">"Thomas"</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">' '</span>))  <span class="comment">//George John Thomas</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;
    
    </summary>
    
      <category term="JS基础" scheme="http://YongMaple.github.io/categories/JS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript" scheme="http://YongMaple.github.io/tags/JavaScript/"/>
    
      <category term="JS" scheme="http://YongMaple.github.io/tags/JS/"/>
    
      <category term="基础" scheme="http://YongMaple.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="数组" scheme="http://YongMaple.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="拼接" scheme="http://YongMaple.github.io/tags/%E6%8B%BC%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>JS-arguments</title>
    <link href="http://YongMaple.github.io/2017/01/18/JS-arguments/"/>
    <id>http://YongMaple.github.io/2017/01/18/JS-arguments/</id>
    <published>2017-01-18T02:29:30.000Z</published>
    <updated>2017-01-18T02:31:18.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);         <span class="comment">//["123"]</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);  <span class="comment">//1</span></div><div class="line">    <span class="built_in">console</span>.log(test.length);       <span class="comment">//2</span></div><div class="line">&#125;</div><div class="line">test(<span class="string">'123'</span>)</div></pre></td></tr></table></figure>
<p>通过arguments可以获取传入的参数，function.length可以获取本该传入的参数</p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;
    
    </summary>
    
      <category term="JS基础" scheme="http://YongMaple.github.io/categories/JS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript" scheme="http://YongMaple.github.io/tags/JavaScript/"/>
    
      <category term="JS" scheme="http://YongMaple.github.io/tags/JS/"/>
    
      <category term="基础" scheme="http://YongMaple.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="参数" scheme="http://YongMaple.github.io/tags/%E5%8F%82%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>JS-数组比较</title>
    <link href="http://YongMaple.github.io/2017/01/18/JS-%E6%95%B0%E7%BB%84%E6%AF%94%E8%BE%83/"/>
    <id>http://YongMaple.github.io/2017/01/18/JS-数组比较/</id>
    <published>2017-01-18T02:27:39.000Z</published>
    <updated>2017-01-18T02:31:39.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = [<span class="number">1</span>,<span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> y = [<span class="number">1</span>,<span class="number">2</span>];</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(x == y);     <span class="comment">//false</span></div><div class="line"><span class="built_in">console</span>.log(x === y );   <span class="comment">//false</span></div></pre></td></tr></table></figure>
<p>javascript不能直接用==或者===来判断两个数组是否相等，无论是相等还是全等都不行。<br>要判断数组是否相等，要先将数组转换为字符串，再作比较<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> x = [<span class="number">1</span>,<span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> y = [<span class="number">1</span>,<span class="number">2</span>];</div><div class="line"><span class="built_in">console</span>.log(x.toString() == y.toString())</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;
    
    </summary>
    
      <category term="JS基础" scheme="http://YongMaple.github.io/categories/JS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript" scheme="http://YongMaple.github.io/tags/JavaScript/"/>
    
      <category term="JS" scheme="http://YongMaple.github.io/tags/JS/"/>
    
      <category term="基础" scheme="http://YongMaple.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="数组" scheme="http://YongMaple.github.io/tags/%E6%95%B0%E7%BB%84/"/>
    
      <category term="比较" scheme="http://YongMaple.github.io/tags/%E6%AF%94%E8%BE%83/"/>
    
  </entry>
  
  <entry>
    <title>JS-String转数字类型</title>
    <link href="http://YongMaple.github.io/2017/01/18/JS-String%E8%BD%AC%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B/"/>
    <id>http://YongMaple.github.io/2017/01/18/JS-String转数字类型/</id>
    <published>2017-01-18T02:24:43.000Z</published>
    <updated>2017-01-18T02:31:48.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="需要将string转成数字时，如果需要保留小数，只要用-就行了"><a href="#需要将string转成数字时，如果需要保留小数，只要用-就行了" class="headerlink" title="需要将string转成数字时，如果需要保留小数，只要用+就行了"></a>需要将string转成数字时，如果需要保留小数，只要用+就行了</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> str = <span class="string">'123'</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str))</div><div class="line"><span class="comment">//转整数时没问题</span></div><div class="line"><span class="keyword">var</span> str1 = <span class="string">'123.45'</span></div><div class="line"><span class="built_in">console</span>.log(+str1)</div><div class="line"><span class="comment">//只要用+就行了</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;需要将string转成数字时，如果需要保留小数，只要用-就行了&quot;&gt;&lt;a href=&quot;#需要将string转成数字时，如果需要保留小数，只要用-就行了&quot; class=&quot;headerlink&quot; title=&quot;需要将string转成数字时，如果需要保留小数，只要用+就行
    
    </summary>
    
      <category term="JS基础" scheme="http://YongMaple.github.io/categories/JS%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="JavaScript" scheme="http://YongMaple.github.io/tags/JavaScript/"/>
    
      <category term="JS" scheme="http://YongMaple.github.io/tags/JS/"/>
    
      <category term="基础" scheme="http://YongMaple.github.io/tags/%E5%9F%BA%E7%A1%80/"/>
    
      <category term="转换" scheme="http://YongMaple.github.io/tags/%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>ES6-set</title>
    <link href="http://YongMaple.github.io/2017/01/18/ES6-set/"/>
    <id>http://YongMaple.github.io/2017/01/18/ES6-set/</id>
    <published>2017-01-18T02:22:29.000Z</published>
    <updated>2017-01-18T02:22:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><p>set是类数组</p>
<h2 id="可以用来做什么？"><a href="#可以用来做什么？" class="headerlink" title="可以用来做什么？"></a>可以用来做什么？</h2><p>可以用来给数组去重<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr =  [<span class="string">'jiayongfeng'</span>,<span class="string">'jimmy'</span>,<span class="string">'jimmy'</span>]</div><div class="line"><span class="keyword">let</span> newArr = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</div><div class="line"><span class="built_in">console</span>.log(newArr)</div></pre></td></tr></table></figure></p>
<h2 id="怎么用？"><a href="#怎么用？" class="headerlink" title="怎么用？"></a>怎么用？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> user = &#123;<span class="attr">name</span>:<span class="string">'jiayongfeng'</span>,<span class="attr">age</span>:<span class="string">'28'</span>&#125;</div><div class="line"><span class="keyword">let</span> st = <span class="keyword">new</span> <span class="built_in">Set</span>()  </div><div class="line">st.add(user)        <span class="comment">//添加</span></div><div class="line">st.delete(user)     <span class="comment">//删除</span></div><div class="line">st.has(user)        <span class="comment">//判断有无</span></div><div class="line">st.clear()          <span class="comment">//清空</span></div><div class="line"><span class="built_in">console</span>.log(st.size)    <span class="comment">//查看数量</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> o <span class="keyword">of</span> st)&#123;       <span class="comment">//遍历</span></div><div class="line">    <span class="built_in">console</span>.log(o)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;是什么？&quot;&gt;&lt;a href=&quot;#是什么？&quot; class=&quot;headerlink&quot; title=&quot;是什么？&quot;&gt;&lt;/a&gt;是什么？&lt;/h2&gt;&lt;p&gt;set是类数组&lt;/p&gt;
&lt;h2 id=&quot;可以用来做什么？&quot;&gt;&lt;a href=&quot;#可以用来做什么？&quot; class=&quot;heade
    
    </summary>
    
      <category term="ES6笔记" scheme="http://YongMaple.github.io/categories/ES6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ES6" scheme="http://YongMaple.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6-map</title>
    <link href="http://YongMaple.github.io/2017/01/18/ES6-map/"/>
    <id>http://YongMaple.github.io/2017/01/18/ES6-map/</id>
    <published>2017-01-18T02:21:15.000Z</published>
    <updated>2017-01-18T02:21:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h2><p>map是键值对的类数组</p>
<h2 id="可以用来做什么？"><a href="#可以用来做什么？" class="headerlink" title="可以用来做什么？"></a>可以用来做什么？</h2><p>对象中的key必须是<code>string</code>，map中key可以是任意值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> user = &#123;</div><div class="line">    <span class="attr">name</span> : <span class="string">'jiayongfeng'</span>,</div><div class="line">    <span class="attr">age</span> : <span class="number">28</span>,</div><div class="line">    <span class="string">'english name'</span>:<span class="string">'jimmy'</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</div><div class="line">    [user,<span class="string">'shuai'</span>],     <span class="comment">//key可以是对象</span></div><div class="line">    [<span class="string">'qq'</span>,<span class="string">'740534248'</span>]</div><div class="line">])</div></pre></td></tr></table></figure></p>
<h2 id="怎么用？"><a href="#怎么用？" class="headerlink" title="怎么用？"></a>怎么用？</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</div><div class="line">map.set(<span class="string">'name'</span>,<span class="string">'jiayongfeng'</span>)   <span class="comment">//赋值</span></div><div class="line">map.set(<span class="string">'age'</span>,<span class="number">28</span>)</div><div class="line"><span class="built_in">console</span>.log(map.get(<span class="string">'age'</span>))     <span class="comment">//取值</span></div><div class="line"><span class="built_in">console</span>.log(map.size)           <span class="comment">//查看大小</span></div><div class="line">map.delete(<span class="string">'age'</span>)               <span class="comment">//删除</span></div><div class="line">map.has(<span class="string">'name'</span>)                 <span class="comment">//判断有无</span></div><div class="line">map.clear()                     <span class="comment">//清空</span></div><div class="line"><span class="comment">//值得注意NaN在map和set是全等的</span></div><div class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>)    <span class="comment">//false</span></div><div class="line">map.set(<span class="literal">NaN</span>,<span class="string">'1111'</span>);</div><div class="line">map.set(<span class="literal">NaN</span>,<span class="string">'2222'</span>);</div><div class="line"><span class="built_in">console</span>.log(map.get(<span class="literal">NaN</span>));    <span class="comment">//2222</span></div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> o <span class="keyword">of</span> map)&#123;              <span class="comment">//遍历</span></div><div class="line">    <span class="built_in">console</span>.log(o)</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> keys = map.keys()           <span class="comment">//获取所有的key</span></div><div class="line"><span class="keyword">let</span> values = map.values()       <span class="comment">//获取所有的value</span></div><div class="line"><span class="keyword">let</span> entries = map.ertries()     <span class="comment">//获取所有的键值对</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> o <span class="keyword">of</span> entries)&#123;</div><div class="line">    <span class="built_in">console</span>.log(o)              <span class="comment">//等同于上面的遍历</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">var</span> _this = &#123;</div><div class="line">    <span class="attr">des</span> : <span class="string">'shuai'</span></div><div class="line">&#125;;</div><div class="line">map.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">k, v</span>) </span>&#123;       <span class="comment">//遍历，同时可以传入this</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.des,k, v);</div><div class="line">&#125;,_this);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;是什么？&quot;&gt;&lt;a href=&quot;#是什么？&quot; class=&quot;headerlink&quot; title=&quot;是什么？&quot;&gt;&lt;/a&gt;是什么？&lt;/h2&gt;&lt;p&gt;map是键值对的类数组&lt;/p&gt;
&lt;h2 id=&quot;可以用来做什么？&quot;&gt;&lt;a href=&quot;#可以用来做什么？&quot; class=&quot;h
    
    </summary>
    
      <category term="ES6笔记" scheme="http://YongMaple.github.io/categories/ES6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ES6" scheme="http://YongMaple.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6-Array</title>
    <link href="http://YongMaple.github.io/2017/01/18/ES6-Array/"/>
    <id>http://YongMaple.github.io/2017/01/18/ES6-Array/</id>
    <published>2017-01-18T02:20:04.000Z</published>
    <updated>2017-01-18T02:20:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h3><p>类似数组的数据结构转换为数组<br>可以把带有length属性的对象和实现了iterator接口的对象转换为数组<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.from(&#123;</div><div class="line"><span class="string">'0'</span>:<span class="string">'qq 740534248'</span>,</div><div class="line"><span class="string">'1'</span>:<span class="string">'jimmy'</span>,</div><div class="line"><span class="string">'length'</span>:<span class="number">2</span></div><div class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</div><div class="line"> <span class="keyword">return</span> item + <span class="string">'---'</span> + index</div><div class="line">&#125;);</div><div class="line"><span class="comment">//必须是这种样子的对象，其他的不行</span></div><div class="line"><span class="built_in">console</span>.log(arr);</div><div class="line"></div><div class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'me'</span>,<span class="string">'book'</span>,<span class="string">'leo'</span>]);</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(set));</div></pre></td></tr></table></figure></p>
<p>querySelectorAll查询出的类数组也能转换<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    <span class="keyword">var</span> list = <span class="built_in">document</span>.querySelectorAll(<span class="string">'li'</span>);</div><div class="line">    <span class="built_in">console</span>.log(list)  <span class="comment">//NodeList[5]</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(list));  <span class="comment">//ArrayList[5]</span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of"></a>Array.of</h3><p>用来构建数组，防止Array(7)这种情况发生<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Array</span>.of(<span class="number">7</span>);       <span class="comment">// [7]</span></div><div class="line"><span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></div><div class="line"></div><div class="line"><span class="built_in">Array</span>(<span class="number">7</span>);          <span class="comment">// [ , , , , , , ]</span></div><div class="line"><span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);    <span class="comment">// [1, 2, 3]</span></div></pre></td></tr></table></figure></p>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><p>找到符合函数的第一个值<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [  <span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span> ];</div><div class="line"></div><div class="line"><span class="keyword">var</span> value = arr.find(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,arr</span>)</span>&#123; <span class="comment">//值，索引，原数组</span></div><div class="line">   <span class="keyword">return</span> value &gt; <span class="number">33</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(value); <span class="comment">//44</span></div></pre></td></tr></table></figure></p>
<h3 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h3><p>找到符合函数的第一个值的索引<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [  <span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span> ];</div><div class="line"></div><div class="line"><span class="keyword">var</span> value = arr.findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,arr</span>)</span>&#123; <span class="comment">//值，索引，原数组</span></div><div class="line">   <span class="keyword">return</span> value &gt; <span class="number">33</span>;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(value); <span class="comment">//2</span></div></pre></td></tr></table></figure></p>
<p>IndexOf比较<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr2 = [<span class="number">22</span>,<span class="literal">NaN</span>];</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(arr2.indexOf(<span class="literal">NaN</span>))  <span class="comment">//-1</span></div><div class="line"><span class="built_in">console</span>.log(arr2.findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</div><div class="line">   <span class="keyword">return</span> <span class="built_in">Object</span>.is(<span class="literal">NaN</span>,v);</div><div class="line">&#125;));    <span class="comment">//1</span></div></pre></td></tr></table></figure></p>
<h3 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin"></a>copyWithin</h3><p>copyWithin(position,start,end);<br>要被替换的开始位置，用于替换的起始位置，用于替换的结束位置（不包含）<br>也可以用负数，代表从后往前数第几个，如-3代表正数第4个<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ar arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</div><div class="line"></div><div class="line"><span class="comment">//arr.copyWithin(1,5,7);  //[ 1, 6, 7, 4, 5, 6, 7 ]</span></div><div class="line">arr.copyWithin(<span class="number">2</span>,<span class="number">-3</span>,<span class="number">6</span>); <span class="comment">//[ 1, 2, 5, 6, 5, 6, 7 ]</span></div><div class="line"><span class="built_in">console</span>.log(arr);</div></pre></td></tr></table></figure></p>
<h3 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h3><p>填充数组<br>fill(value,start,end)<br>用来填充的值，被填充的起始位置，被填充的结束位置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</div><div class="line"><span class="comment">//arr.fill(10)</span></div><div class="line"><span class="built_in">console</span>.log(arr)    <span class="comment">//[10,10,10,10,10,10,10]</span></div><div class="line">arr.fill(<span class="number">10</span>,<span class="number">2</span>,<span class="number">5</span>)</div><div class="line"><span class="built_in">console</span>.log(arr)    <span class="comment">//[1,2,10,10,10,6,7]</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Array-from&quot;&gt;&lt;a href=&quot;#Array-from&quot; class=&quot;headerlink&quot; title=&quot;Array.from&quot;&gt;&lt;/a&gt;Array.from&lt;/h3&gt;&lt;p&gt;类似数组的数据结构转换为数组&lt;br&gt;可以把带有length属性的对象和实现了
    
    </summary>
    
      <category term="ES6笔记" scheme="http://YongMaple.github.io/categories/ES6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="ES6" scheme="http://YongMaple.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 源代码阅读工具</title>
    <link href="http://YongMaple.github.io/2017/01/17/JavaScript-%E6%BA%90%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E5%B7%A5%E5%85%B7/"/>
    <id>http://YongMaple.github.io/2017/01/17/JavaScript-源代码阅读工具/</id>
    <published>2017-01-17T08:41:07.000Z</published>
    <updated>2017-01-17T09:00:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="lambda-view"><a href="#lambda-view" class="headerlink" title="lambda-view"></a>lambda-view</h2><p><a href="https://github.com/Jianru-Lin/lambda-view" target="_blank" rel="external">https://github.com/Jianru-Lin/lambda-view</a></p>
<p>命令行输入<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lv /path/somewhere/xyz.js</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">lv http://vuejs.org/js/vue.js</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;lambda-view&quot;&gt;&lt;a href=&quot;#lambda-view&quot; class=&quot;headerlink&quot; title=&quot;lambda-view&quot;&gt;&lt;/a&gt;lambda-view&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/Jianru
    
    </summary>
    
      <category term="工具使用" scheme="http://YongMaple.github.io/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="源代码查看" scheme="http://YongMaple.github.io/tags/%E6%BA%90%E4%BB%A3%E7%A0%81%E6%9F%A5%E7%9C%8B/"/>
    
  </entry>
  
  <entry>
    <title>Atom使用eslint需要安装的包</title>
    <link href="http://YongMaple.github.io/2017/01/17/Atom%E4%BD%BF%E7%94%A8eslint%E9%9C%80%E8%A6%81%E5%AE%89%E8%A3%85%E7%9A%84%E5%8C%85/"/>
    <id>http://YongMaple.github.io/2017/01/17/Atom使用eslint需要安装的包/</id>
    <published>2017-01-17T08:39:41.000Z</published>
    <updated>2017-01-17T09:00:59.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="string">"dependencies"</span>: &#123;</div><div class="line">    <span class="string">"eslint"</span>: <span class="string">"^3.13.1"</span>,</div><div class="line">    <span class="string">"eslint-config-airbnb"</span>: <span class="string">"^14.0.0"</span>,</div><div class="line">    <span class="string">"eslint-plugin-import"</span>: <span class="string">"^2.2.0"</span>,</div><div class="line">    <span class="string">"eslint-plugin-jsx-a11y"</span>: <span class="string">"^3.0.2"</span>,</div><div class="line">    <span class="string">"eslint-plugin-react"</span>: <span class="string">"^6.9.0"</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">npm install eslint --save</div><div class="line">eslint -v</div><div class="line">eslint --init</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install eslint-config-airbnb --save</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install eslint-plugin-import --save</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install eslint-plugin-jsx-a11y --save</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install eslint-plugin-react --save</div></pre></td></tr></table></figure>
<p>.eslintrc.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="string">"extends"</span>: <span class="string">"airbnb"</span>,    <span class="comment">//使用airbnb前端编码规范</span></div><div class="line">    <span class="string">"installedESLint"</span>: <span class="literal">true</span>,</div><div class="line">    <span class="string">"rules"</span>: &#123;</div><div class="line">        <span class="string">"indent"</span>: [<span class="string">"error"</span>, <span class="number">4</span>]  <span class="comment">//缩进4个空格</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;
    
    </summary>
    
      <category term="工具使用" scheme="http://YongMaple.github.io/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="Atom" scheme="http://YongMaple.github.io/tags/Atom/"/>
    
      <category term="eslint" scheme="http://YongMaple.github.io/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>带数字字符串排序</title>
    <link href="http://YongMaple.github.io/2017/01/17/%E5%B8%A6%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F/"/>
    <id>http://YongMaple.github.io/2017/01/17/带数字字符串排序/</id>
    <published>2017-01-17T08:35:25.000Z</published>
    <updated>2017-01-17T09:00:50.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今天组里在Q群发了一个问题："><a href="#今天组里在Q群发了一个问题：" class="headerlink" title="今天组里在Q群发了一个问题："></a>今天组里在Q群发了一个问题：</h3><p>为一个给定字符串排序，这个字符串里的每一个单词都包含一个数字，请按数字大小给这些单词排序。</p>
<p>例如：is2 Thi1s T4est 3a 的结果是 Thi1s is2 3a T4est<br>然后出现了3种解题：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="string">'is2 Thi1s T4est 3a'</span></div><div class="line"><span class="keyword">var</span> newArr = a.split(<span class="string">' '</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line"> <span class="built_in">console</span>.log(item)</div><div class="line"> <span class="keyword">var</span> arr = item.match(<span class="regexp">/\d+/</span>)</div><div class="line"> <span class="keyword">return</span> arr</div><div class="line">&#125;)</div><div class="line"><span class="keyword">var</span> str = newArr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line"><span class="keyword">return</span> +a[<span class="number">0</span>] &gt; +b[<span class="number">0</span>]</div><div class="line">&#125;).map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</div><div class="line"><span class="keyword">return</span> item[<span class="string">'input'</span>]</div><div class="line">&#125;).join(<span class="string">' '</span>)</div><div class="line"><span class="built_in">console</span>.log(str)</div></pre></td></tr></table></figure></p>
<p>将原字符串用’ ‘分割成数组，然后遍历，返回由match后生成的数组组成的数组<br>将新的数组按照match数组第0个元素（匹配正则的数字）排序，然后遍历返回match数组input元素（原来的String），最后拼接成字符串<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> words = <span class="string">'is2 Thi1s T4est 3a'</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">orderNew</span>(<span class="params">words</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> ordered = [];</div><div class="line">  <span class="keyword">var</span> arr = words.split(<span class="string">' '</span>);  </div><div class="line"></div><div class="line">    arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> match = <span class="regexp">/\d+/</span>.exec(item);</div><div class="line">        ordered[<span class="built_in">parseInt</span>(match[<span class="number">0</span>])] = item;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> ordered.join(<span class="string">' '</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(orderNew(words));</div></pre></td></tr></table></figure></p>
<p>同样的将原字符串用’ ‘分割成数组，然后遍历<br>遍历时将原数组元素放入新数组第[macth数组第0个元素（匹配正则的数字）]个元素<br>最后将新数组拼接成字符串<br>因为是数字排序，所有将找到的数据当成索引用，但是可能存在问题，如果有重复数字时，会覆盖掉<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> words = <span class="string">'is2 Thi1s T4est 3a'</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">order</span>(<span class="params">words</span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> words.split(<span class="string">' '</span>).sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</div><div class="line">      <span class="keyword">return</span> a.match(<span class="regexp">/\d+/</span>) - b.match(<span class="regexp">/\d+/</span>);</div><div class="line">   &#125;).join(<span class="string">' '</span>);</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(order(words));</div></pre></td></tr></table></figure></p>
<p>更加简化，将原字符串分割后直接按照数组元素匹配正则后的结果排序后，拼接</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;今天组里在Q群发了一个问题：&quot;&gt;&lt;a href=&quot;#今天组里在Q群发了一个问题：&quot; class=&quot;headerlink&quot; title=&quot;今天组里在Q群发了一个问题：&quot;&gt;&lt;/a&gt;今天组里在Q群发了一个问题：&lt;/h3&gt;&lt;p&gt;为一个给定字符串排序，这个字符串里的每一个单
    
    </summary>
    
      <category term="编程思考" scheme="http://YongMaple.github.io/categories/%E7%BC%96%E7%A8%8B%E6%80%9D%E8%80%83/"/>
    
    
      <category term="排序" scheme="http://YongMaple.github.io/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>关于Vue生命周期的一些理解记录</title>
    <link href="http://YongMaple.github.io/2017/01/17/%E5%85%B3%E4%BA%8EVue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3%E8%AE%B0%E5%BD%95/"/>
    <id>http://YongMaple.github.io/2017/01/17/关于Vue生命周期的一些理解记录/</id>
    <published>2017-01-17T08:34:06.000Z</published>
    <updated>2017-01-17T09:01:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天遇到个问题，大致是这样的：从父组件向子组件传值，第三层数据终端报错undefined，先上测试代码：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">//父组件</div><div class="line">&lt;template lang="html"&gt;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;son :data="data1"&gt;&lt;/son&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">import Son from '../son/index.vue'</div><div class="line">export default &#123;</div><div class="line">    data()&#123;</div><div class="line">        return &#123;</div><div class="line">            data1:&#123;&#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    mounted()&#123;</div><div class="line">        this.data1=&#123;</div><div class="line">            name:'最外层',</div><div class="line">            value1:&#123;</div><div class="line">                name:'第一层',</div><div class="line">                value2:&#123;</div><div class="line">                    name:'第二层',</div><div class="line">                    value3:&#123;</div><div class="line">                        name:'第三层'</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    components:&#123;</div><div class="line">        Son</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">//子组件</div><div class="line">&lt;template lang="html"&gt;</div><div class="line">  &lt;div&gt;</div><div class="line">      最外层</div><div class="line">      &#123;&#123;data.name&#125;&#125;</div><div class="line">      &lt;div&gt;</div><div class="line">          第一层</div><div class="line">          &#123;&#123;data.value1.name&#125;&#125;</div><div class="line">          &lt;div&gt;</div><div class="line">              第二层</div><div class="line">              &#123;&#123;data.value1.value2.name&#125;&#125;</div><div class="line">              &lt;div&gt;</div><div class="line">                  第三层</div><div class="line">                  &#123;&#123;data.value1.value2.value3.name&#125;&#125;</div><div class="line">              &lt;/div&gt;</div><div class="line">          &lt;/div&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">export default &#123;</div><div class="line">    props:['data']</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<p>解决办法是将<code>mounted</code>中的赋值过程，改在<code>beforeMount</code>或者<code>created</code>中进行。或者先给<code>data</code>一个空的数据结构。<br>原因是子组件渲染时，<code>data</code>的赋值还没进行，所以属性都是undefined</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天遇到个问题，大致是这样的：从父组件向子组件传值，第三层数据终端报错undefined，先上测试代码：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1
    
    </summary>
    
      <category term="Vue笔记" scheme="http://YongMaple.github.io/categories/Vue%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Vue" scheme="http://YongMaple.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>扩展运算符(…)结合的使用</title>
    <link href="http://YongMaple.github.io/2017/01/17/%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6-%E2%80%A6-%E7%BB%93%E5%90%88%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://YongMaple.github.io/2017/01/17/扩展运算符-…-结合的使用/</id>
    <published>2017-01-17T08:32:23.000Z</published>
    <updated>2017-01-17T09:01:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>引入mapActions<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; mapActions, mapGetters &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div></pre></td></tr></table></figure></p>
<p>在<code>methods</code>中写<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">...mapActions([</div><div class="line">  <span class="string">'SET_MAIL_LIST'</span></div><div class="line">]),</div></pre></td></tr></table></figure></p>
<p>数组中的所有方法会被引入，在使用时只要<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.SET_MAIL_LIST(&#123;mailList&#125;)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;引入mapActions&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;co
    
    </summary>
    
      <category term="Vue笔记" scheme="http://YongMaple.github.io/categories/Vue%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Vue" scheme="http://YongMaple.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Mac拼音输入法</title>
    <link href="http://YongMaple.github.io/2017/01/17/Mac%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    <id>http://YongMaple.github.io/2017/01/17/Mac拼音输入法/</id>
    <published>2017-01-17T08:30:47.000Z</published>
    <updated>2017-02-04T07:39:16.000Z</updated>
    
    <content type="html"><![CDATA[<ol>
<li>中英文切换<br>mac自身输入法：<strong>Command＋空格</strong></li>
<li>汉字输入切换下一页（用鼠标去点，太low了吧）<br>假如你输入的文字不再第一页，这是需要我们切换页，上一页，是键盘上的“<strong>［</strong>”，下一页是键盘上的“<strong>］</strong>”。<br>mac自身的输入法，也可以使用上下箭头来操作，但是，总是要低头找这个箭头，不方便。</li>
<li>输入特殊符号<br>如果你记住了某个特殊字符的快捷键，那么，你只需使用 <strong>shift+option+键盘上的任何字符</strong>，来输入。如：<strong>shift+option+p</strong>是符号：∏<br>当然，所有特殊符号都记住，是不可能的事情 ，所以，你也可以调出mac的特殊符号集，快捷键是<strong>control+coomand+空格</strong>，快去试试看，找到你想要的</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;中英文切换&lt;br&gt;mac自身输入法：&lt;strong&gt;Command＋空格&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;汉字输入切换下一页（用鼠标去点，太low了吧）&lt;br&gt;假如你输入的文字不再第一页，这是需要我们切换页，上一页，是键盘上的“&lt;strong&gt;［&lt;/stro
    
    </summary>
    
      <category term="工具使用" scheme="http://YongMaple.github.io/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="开发工具" scheme="http://YongMaple.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="Mac" scheme="http://YongMaple.github.io/tags/Mac/"/>
    
      <category term="输入法" scheme="http://YongMaple.github.io/tags/%E8%BE%93%E5%85%A5%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Atom已安装package记录</title>
    <link href="http://YongMaple.github.io/2017/01/17/Atom%E5%B7%B2%E5%AE%89%E8%A3%85package%E8%AE%B0%E5%BD%95/"/>
    <id>http://YongMaple.github.io/2017/01/17/Atom已安装package记录/</id>
    <published>2017-01-17T07:36:13.000Z</published>
    <updated>2017-02-04T06:59:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="platformio-ide-terminal"><a href="#platformio-ide-terminal" class="headerlink" title="platformio-ide-terminal"></a>platformio-ide-terminal</h3><blockquote>
<p>命令行工具<br>快捷键：control+`呼出</p>
</blockquote>
<h3 id="activate-power-mode"><a href="#activate-power-mode" class="headerlink" title="activate-power-mode"></a>activate-power-mode</h3><blockquote>
<p>炫酷的打字特效</p>
</blockquote>
<h3 id="atom-beautify"><a href="#atom-beautify" class="headerlink" title="atom-beautify"></a>atom-beautify</h3><blockquote>
<p>美化、整理代码</p>
</blockquote>
<h3 id="atom-ctags"><a href="#atom-ctags" class="headerlink" title="atom-ctags"></a>atom-ctags</h3><blockquote>
<p>强化版的自动完成，借助于autocomplete-plus</p>
</blockquote>
<h3 id="atom-ternjs"><a href="#atom-ternjs" class="headerlink" title="atom-ternjs"></a>atom-ternjs</h3><blockquote>
<p>JS代码智能提示</p>
</blockquote>
<h3 id="autocomplete-paths"><a href="#autocomplete-paths" class="headerlink" title="autocomplete-paths"></a>autocomplete-paths</h3><blockquote>
<p>文件路径智能提示</p>
</blockquote>
<h3 id="color-picker"><a href="#color-picker" class="headerlink" title="color-picker"></a>color-picker</h3><blockquote>
<p>颜色拾取器<br>快捷键：commod+shift+c</p>
</blockquote>
<h3 id="docblockr"><a href="#docblockr" class="headerlink" title="docblockr"></a>docblockr</h3><blockquote>
<p>代码注释自动生成</p>
</blockquote>
<h3 id="file-icons"><a href="#file-icons" class="headerlink" title="file-icons"></a>file-icons</h3><blockquote>
<p>文件图标</p>
</blockquote>
<h3 id="git-plus"><a href="#git-plus" class="headerlink" title="git-plus"></a>git-plus</h3><blockquote>
<p>git插件</p>
</blockquote>
<h3 id="highlight-selected"><a href="#highlight-selected" class="headerlink" title="highlight-selected"></a>highlight-selected</h3><blockquote>
<p>选中高亮</p>
</blockquote>
<h3 id="language-vue"><a href="#language-vue" class="headerlink" title="language-vue"></a>language-vue</h3><blockquote>
<p>识别Vue</p>
</blockquote>
<h3 id="linter"><a href="#linter" class="headerlink" title="linter"></a>linter</h3><blockquote>
<p>代码校验基础工具</p>
</blockquote>
<h3 id="linter-csslint"><a href="#linter-csslint" class="headerlink" title="linter-csslint"></a>linter-csslint</h3><blockquote>
<p>校验css</p>
</blockquote>
<h3 id="linter-eslint"><a href="#linter-eslint" class="headerlink" title="linter-eslint"></a>linter-eslint</h3><blockquote>
<p>校验js，配合.eslintrc使用</p>
</blockquote>
<h3 id="linter-sass-lint"><a href="#linter-sass-lint" class="headerlink" title="linter-sass-lint"></a>linter-sass-lint</h3><blockquote>
<p>校验sass</p>
</blockquote>
<h3 id="minimap"><a href="#minimap" class="headerlink" title="minimap"></a>minimap</h3><blockquote>
<p>右边小地图</p>
</blockquote>
<h3 id="minimap-find-and-replace"><a href="#minimap-find-and-replace" class="headerlink" title="minimap-find-and-replace"></a>minimap-find-and-replace</h3><blockquote>
<p>在小地图上显示搜索匹配</p>
</blockquote>
<h3 id="minimap-highlight-selected"><a href="#minimap-highlight-selected" class="headerlink" title="minimap-highlight-selected"></a>minimap-highlight-selected</h3><blockquote>
<p>在小地图上显示选中的</p>
</blockquote>
<h3 id="pigments"><a href="#pigments" class="headerlink" title="pigments"></a>pigments</h3><blockquote>
<p>根据色值直接显示颜色</p>
</blockquote>
<h3 id="simplified-chinese-menu"><a href="#simplified-chinese-menu" class="headerlink" title="simplified-chinese-menu"></a>simplified-chinese-menu</h3><blockquote>
<p>中文汉化包</p>
</blockquote>
<h3 id="vue-autocomplete"><a href="#vue-autocomplete" class="headerlink" title="vue-autocomplete"></a>vue-autocomplete</h3><blockquote>
<p>Vue自动完成</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;platformio-ide-terminal&quot;&gt;&lt;a href=&quot;#platformio-ide-terminal&quot; class=&quot;headerlink&quot; title=&quot;platformio-ide-terminal&quot;&gt;&lt;/a&gt;platformio-ide-te
    
    </summary>
    
      <category term="工具使用" scheme="http://YongMaple.github.io/categories/%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="Atom" scheme="http://YongMaple.github.io/tags/Atom/"/>
    
      <category term="开发工具" scheme="http://YongMaple.github.io/tags/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
      <category term="配置" scheme="http://YongMaple.github.io/tags/%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
</feed>
