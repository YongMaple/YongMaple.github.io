<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大枫</title>
  
  <subtitle>Stay Hungry.Stay Foolish.</subtitle>
  <link href="https://yongmaple.com/atom.xml" rel="self"/>
  
  <link href="https://yongmaple.com/"/>
  <updated>2021-04-26T06:21:28.288Z</updated>
  <id>https://yongmaple.com/</id>
  
  <author>
    <name>YongMaple</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS父元素hover显示子元素且移入子元素不隐藏</title>
    <link href="https://yongmaple.com/2021/04/25/JS%E7%88%B6%E5%85%83%E7%B4%A0hover%E6%98%BE%E7%A4%BA%E5%AD%90%E5%85%83%E7%B4%A0%E4%B8%94%E7%A7%BB%E5%85%A5%E5%AD%90%E5%85%83%E7%B4%A0%E4%B8%8D%E9%9A%90%E8%97%8F/"/>
    <id>https://yongmaple.com/2021/04/25/JS%E7%88%B6%E5%85%83%E7%B4%A0hover%E6%98%BE%E7%A4%BA%E5%AD%90%E5%85%83%E7%B4%A0%E4%B8%94%E7%A7%BB%E5%85%A5%E5%AD%90%E5%85%83%E7%B4%A0%E4%B8%8D%E9%9A%90%E8%97%8F/</id>
    <published>2021-04-25T15:16:40.000Z</published>
    <updated>2021-04-26T06:21:28.288Z</updated>
    
    <content type="html"><![CDATA[<p>关键方法如下：</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> hoverTime</span><br><span class="line"><span class="keyword">const</span> handleMouseEnter = <span class="function">(<span class="params">index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!props.hoverInfo) <span class="keyword">return</span></span><br><span class="line">  <span class="built_in">clearTimeout</span>(hoverTime)</span><br><span class="line">  setHoverIndex(index)</span><br><span class="line">  <span class="keyword">if</span> (props.onHoverChange) props.onHoverChange(index)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> handleMouseLeave = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!props.hoverInfo) <span class="keyword">return</span></span><br><span class="line">  hoverTime = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    setHoverIndex(-<span class="number">1</span>)</span><br><span class="line">  &#125;, <span class="number">200</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原理：</p><p>通过<code>setTimeout</code>延迟隐藏，给用户时间从父元素移动到子元素，移入元素后清空定时器</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;关键方法如下：&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://yongmaple.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://yongmaple.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
    <category term="React" scheme="https://yongmaple.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>JS一键复制</title>
    <link href="https://yongmaple.com/2021/04/25/JS%E4%B8%80%E9%94%AE%E5%A4%8D%E5%88%B6/"/>
    <id>https://yongmaple.com/2021/04/25/JS%E4%B8%80%E9%94%AE%E5%A4%8D%E5%88%B6/</id>
    <published>2021-04-25T15:13:47.000Z</published>
    <updated>2021-04-26T06:21:28.288Z</updated>
    
    <content type="html"><![CDATA[<p>一键将数据存在剪切板上</p><p>代码如下：</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleCopy = <span class="function">(<span class="params">obj</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 清除上一次的</span></span><br><span class="line">  <span class="keyword">const</span> removeDom = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;copyInput&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (removeDom) removeDom.remove()</span><br><span class="line">  <span class="keyword">const</span> text = <span class="built_in">document</span>.createElement(<span class="string">&#x27;textarea&#x27;</span>)</span><br><span class="line">  text.id = <span class="string">&#x27;copyInput&#x27;</span></span><br><span class="line">  <span class="keyword">const</span> str = <span class="string">`经度：<span class="subst">$&#123;obj.lon&#125;</span></span></span><br><span class="line"><span class="string">纬度：<span class="subst">$&#123;obj.lat&#125;</span></span></span><br><span class="line"><span class="string">时间段：<span class="subst">$&#123;obj.time&#125;</span>`</span></span><br><span class="line">  text.value = str</span><br><span class="line">  <span class="keyword">const</span> container = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;lbsUserListContainer&#x27;</span>)</span><br><span class="line">  container?.appendChild(text)</span><br><span class="line">  text.select()</span><br><span class="line">  <span class="built_in">document</span>.execCommand(<span class="string">&#x27;copy&#x27;</span>)</span><br><span class="line">  text.style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">  message.success(<span class="string">&#x27;复制成功&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p><code>text.style.display = &#39;none&#39;;</code>隐藏需要在<code>document.execCommand(&#39;copy&#39;);</code>后，不然无法复制</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;一键将数据存在剪切板上&lt;/p&gt;
&lt;p&gt;代码如下：&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://yongmaple.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://yongmaple.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Vue2源码解析三</title>
    <link href="https://yongmaple.com/2021/04/21/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%89/"/>
    <id>https://yongmaple.com/2021/04/21/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%89/</id>
    <published>2021-04-21T11:22:58.000Z</published>
    <updated>2021-04-26T06:21:28.308Z</updated>
    
    <content type="html"><![CDATA[<p>目录：</p><ul><li><a href="https://yongmaple.com/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/">Vue2 源码解析</a></li><li><a href="https://yongmaple.com/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/">Vue2 源码解析二</a></li><li><a href="https://yongmaple.com/2021/04/21/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%89/">Vue2 源码解析三</a></li></ul><p>本文项目地址：<a href="https://github.com/YongMaple/vue">https://github.com/YongMaple/vue</a> 内含测试用代码<code>/examples/test/</code></p><h3 id="组件化机制"><a href="#组件化机制" class="headerlink" title="组件化机制"></a>组件化机制</h3><h4 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h4><ul><li>全局声明 <code>Vue.component()</code></li><li>局部声明 <code>components</code></li></ul><p><code>src/core/global-api/index.js</code></p><p><img src="/2021/04/21/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%89/1.png" alt="动态注册"></p><p><img src="/2021/04/21/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%89/2.png" alt="ASSET_TYPES"></p><p>真正注册是在<code>initAssetRegisters</code></p><p><code>src/core/global-api/assets.js</code></p><p><img src="/2021/04/21/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%89/3.png" alt="initAssetRegisters"></p><h4 id="实例化、挂载"><a href="#实例化、挂载" class="headerlink" title="实例化、挂载"></a>实例化、挂载</h4><p>在控制台打印渲染函数<code>console.log(app.$options.render)</code>可以得到如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">anonymous</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">with</span>(<span class="params"><span class="built_in">this</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> _c(<span class="string">&#x27;div&#x27;</span>,&#123;</span><br><span class="line">        attrs:&#123;<span class="string">&quot;id&quot;</span>:<span class="string">&quot;demo&quot;</span>&#125;</span><br><span class="line">      &#125;,[</span><br><span class="line">        _c(<span class="string">&#x27;h1&#x27;</span>,[_v(<span class="string">&quot;Vue组件化机制&quot;</span>)]),</span><br><span class="line">        _v(<span class="string">&quot; &quot;</span>),</span><br><span class="line">        _c(<span class="string">&#x27;comp&#x27;</span>)</span><br><span class="line">      ],<span class="number">1</span>)&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的<code>_c</code>就是之前的<code>createElement</code></p><p><code>src/core/instance/render.js</code></p><p><img src="/2021/04/21/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%89/4.png" alt="_c"></p><p><code>src/core/vdom/create-element.js</code></p><p><img src="/2021/04/21/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%89/5.png" alt="createElement"></p><p><img src="/2021/04/21/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%89/6.png" alt="_createElement"></p><p><code>src/core/vdom/create-component.js</code></p><p><img src="/2021/04/21/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%89/8.png" alt="createComponent"></p><p><img src="/2021/04/21/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%89/9.png" alt="installComponentHooks"></p><p><img src="/2021/04/21/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%89/10.png" alt="hooksToMerge"></p><p><img src="/2021/04/21/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%89/7.png" alt="componentVNodeHooks"></p><p><code>installComponentHooks</code>之后，创建了虚拟 dom，最终返回 vnode</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据组件名称，创建虚拟dom</span></span><br><span class="line"><span class="comment">// comp =&gt; vue-component-1-comp</span></span><br><span class="line"><span class="keyword">const</span> name = Ctor.options.name || tag</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> vnode = <span class="keyword">new</span> VNode(</span><br><span class="line">  <span class="string">`vue-component-<span class="subst">$&#123;Ctor.cid&#125;</span><span class="subst">$&#123;name ? <span class="string">`-<span class="subst">$&#123;name&#125;</span>`</span> : <span class="string">&#x27;&#x27;</span>&#125;</span>`</span>,</span><br><span class="line">  data,</span><br><span class="line">  <span class="literal">undefined</span>,</span><br><span class="line">  <span class="literal">undefined</span>,</span><br><span class="line">  <span class="literal">undefined</span>,</span><br><span class="line">  context,</span><br><span class="line">  &#123; Ctor, propsData, listeners, tag, children &#125;,</span><br><span class="line">  asyncFactory</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>init 何时执行？根实例执行$mount 时</p><p>流程：</p><ol><li>根实例执行$mount   <code>vm.$mount()</code></li><li><code>vm.$mount()</code> 中执行了 <code>mountComponent()</code></li><li><code>mountComponent()</code>中声明了<code>updateComponent()</code>，<code>new Watcher()</code></li><li><code>updateComponent()</code>传入<code>new Watcher()</code>并立刻调用一次</li><li><code>updateComponent()</code> 中执行 <code>render()</code> 得到整棵虚拟 dom 树</li><li><code>render()</code>之后执行 <code>_update()</code></li><li><code>_update()</code> 中执行<code>__patch__()</code>，<code>__patch__</code>是平台特有的补丁函数，用于组件更新</li></ol><p>进入到 patch</p><p><code>src/core/vdom/patch.js</code></p><p><img src="/2021/04/21/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%89/11.png" alt="patch"></p><p>patch 中使用了 createElm 递归创建 dom 树</p><p><img src="/2021/04/21/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%89/12.png" alt="createElm"></p><p>如果是一个组件，调用 createComponent</p><p><img src="/2021/04/21/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%89/13.png" alt="createComponent"></p><ul><li>问：有 parent、child 父子嵌套组件，请问生命周期顺序</li><li>答：parent.created =&gt; child.created =&gt; child.mounted =&gt; parent.mounted 类似于洋葱模型，先进后出</li></ul><p><strong>全文完</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://yongmaple.com/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/&quot;&gt;Vue2 源码解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;htt</summary>
      
    
    
    
    <category term="前端" scheme="https://yongmaple.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://yongmaple.com/tags/Vue/"/>
    
    <category term="手撕源码" scheme="https://yongmaple.com/tags/%E6%89%8B%E6%92%95%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Vue2源码解析二</title>
    <link href="https://yongmaple.com/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/"/>
    <id>https://yongmaple.com/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/</id>
    <published>2021-04-15T16:00:05.000Z</published>
    <updated>2021-04-26T06:21:28.316Z</updated>
    
    <content type="html"><![CDATA[<p>目录：</p><ul><li><a href="https://yongmaple.com/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/">Vue2 源码解析</a></li><li><a href="https://yongmaple.com/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/">Vue2 源码解析二</a></li><li><a href="https://yongmaple.com/2021/04/21/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%89/">Vue2 源码解析三</a></li></ul><p>本文项目地址：<a href="https://github.com/YongMaple/vue">https://github.com/YongMaple/vue</a> 内含测试用代码<code>/examples/test/</code></p><h3 id="异步更新队列"><a href="#异步更新队列" class="headerlink" title="异步更新队列"></a>异步更新队列</h3><p>先了解一下<code>Event Loop</code></p><p>推荐阅读：</p><ul><li><a href="https://segmentfault.com/a/1190000016278115">https://segmentfault.com/a/1190000016278115</a></li><li><a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/?utm_source=html5weekly">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/?utm_source=html5weekly</a></li></ul><p><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/1.png" alt="Event Loop"></p><ul><li>Task Queue 宏任务队列</li><li>Microtask Queue 微任务队列</li><li>Call Stack 调用栈</li><li>浏览器端的宏任务：setTimeout、setInterval、requestAnimationFrame、I/O、UI rendering</li><li>浏览器端的微任务：Promise、Object.observe、MutationObserver</li></ul><h5 id="简单总结下浏览器下的-Event-loop-流程："><a href="#简单总结下浏览器下的-Event-loop-流程：" class="headerlink" title="简单总结下浏览器下的 Event loop 流程："></a>简单总结下浏览器下的 Event loop 流程：</h5><ol><li>先走完全局同步任务</li><li>然后走完当前所有的微任务</li><li>执行 UI rendering</li><li>走队列第一个宏任务</li><li>走完当前所有的微任务</li><li>执行 UI rendering</li><li>如此循环，如果在微任务执行期间，出现了新的微任务，直接跟在这次微任务队列的末尾（在下次宏任务之前执行）</li></ol><p>Vue 中的具体实现</p><p><strong>nextTick: Vue 尝试使用 nextTick 执行一个异步任务</strong></p><p><strong>Vue 在组件更新的时候是批量的组件更新，把 watcher 放到 queue 里面，等刷新微任务队列的时候，一起执行</strong></p><ul><li>异步：只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更</li><li>批量：如果同一个 watcher 被多次触发，只会被推入到队列中一次。去重对于避免不必要的计算和 DOM 操作是非常重要的。然后在下一个事件循环 Tick 中，Vue 刷新队列执行实际工作</li><li>异步策略：Vue 在内部对异步队列尝试使用原生的<code>Promise.then</code>、<code>MutationObserver</code>或<code>setImmediate</code>，如果执行环境都不支持，则会采用<code>setTimeout</code>代替</li></ul><p>响应式相关的，从<code>defineReactive</code>开始看</p><p><code>src/core/observer/index.js</code><br><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/2.png" alt="defineReactive"></p><p>当一个值发生变化的时候，会被拦截，然后开始设一个最新的值，设完之后让 dep 去通知更新</p><p><code>src/core/observer/dep.js</code><br><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/3.png" alt="notify"></p><p>subs 里存放的是和当前 key 相关的一堆 watcher</p><p><code>src/core/observer/watcher.js</code><br><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/4.png" alt="update"></p><p>进入 Watcher 实例</p><p>lazy 不会立即得到最新的值，而是等界面中用到相关的派生值时才会，比如计算属性</p><p>sync 设置同步，会立即执行更新，比如在用$watch 时，传入 immediate: true 时</p><p>queueWatcher 是 watcher 入队操作</p><p><code>src/core/observer/scheduler.js</code><br><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/5.png" alt="queueWatcher"></p><p>queueWatcher 会对 watcher 进行去重</p><p>nextTick：执行一个异步任务</p><p><code>nextTick(flushSchedulerQueue)</code>：这里就是异步执行 flushSchedulerQueue(刷新调度队列)</p><p>flushSchedulerQueue 会被放到微任务队列</p><p><code>src/core/util/next-tick.js</code><br><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/6.png" alt="nextTick"></p><p>这个<code>nextTick</code>方法，就是平时用的$nextTick</p><p><code>callbacks</code>是存放异步任务的数组（不是微任务队列），是将来<code>flushSchedulerQueue</code>要清空的任务的集合</p><p>对 cb 进行了一次封装之后放入<code>callbacks</code>，但并不会立即执行</p><p>通过<code>timerFunc()</code>尝试异步执行</p><p><code>timerFunc</code>是一个全局变量，根据当前平台进行判断，选择用何种方式异步执行<code>flushCallbacks</code></p><p><code>flushCallbacks</code>执行 callbacks 中的所有任务</p><p>流程：</p><ol><li>nextTick 把 flushSchedulerQueue 放入 callbacks</li><li>timerFunc() 用异步的方式执行 flushCallbacks()</li><li>flushCallbacks 执行了 flushSchedulerQueue</li><li>flushSchedulerQueue 清空存放所有 watcher 的 queue</li></ol><p>为什么要这么做？因为 callbacks 里面执行了很多组件的更新</p><p><code>src/core/observer/scheduler.js</code><br><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/7.png" alt="flushSchedulerQueue"></p><p>flushSchedulerQueue 对 queue 排序后遍历执行 watcher</p><p>真正执行(render watcher、 user watcher)更新操作的是<code>watcher.run()</code></p><p><code>src/core/observer/watcher.js</code><br><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/8.png" alt="run"></p><p>如果当前组件处于激活状态，就执行<code>get()</code></p><p>如果 watcher 是一个 render watcher,，那么<code>get()</code>就是组件更新函数</p><p>如果 watcher 是 user watcher，那么<code>get()</code>是计算当前选项最新值的函数</p><p>下面的<code>if(value !== this.value || isObject(value) || this.deep)</code>只有 user watcher（watch、$watch）才会执行</p><p><code>this.cb.call</code>是用户定义的回调函数</p><p>如果是 render watcher，只走到<code>get()</code></p><p><code>src/core/observer/watcher.js</code><br><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/9.png" alt="get"></p><p><code>get()</code>其实执行的是 getter，也就是组件更新函数</p><p><code>src/core/observer/watcher.js</code><br><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/10.png" alt="getter"></p><p><code>new Watcher(this, updateComponent)</code><br>在<code>new Watcher</code>的时候需要传递组件实例(this)，组件更新函数(updateComponent)</p><p>如果 expOrFn 是函数就直接赋值给 getter，则他就是组件更新函数</p><p>Watcher 是什么时候建的？</p><p><code>src/platforms/web/runtime/index.js</code><br><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/11.png" alt="Vue.prototype.$mount"></p><p>在<code>$mount</code>中执行了<code>mountComponent</code></p><p><code>src/core/instance/lifecycle.js</code><br><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/12.png" alt="mountComponent"></p><p>挂载的时候只做两件事</p><ol><li>声明一个组件更新函数</li><li>创建组件对应的 Watcher 实例</li></ol><p>所以 Watcher 是在组件挂载的时候创建的</p><h4 id="组件更新流程："><a href="#组件更新流程：" class="headerlink" title="组件更新流程："></a>组件更新流程：</h4><ol><li>当组件内有一个数据发生变化的时候，会通知更新</li><li>通知更新之后。组件会被放到队列</li><li>放到队列后，会把刷新队列的任务以异步的方式执行</li><li>等到未来的某个时刻刷新队列</li><li>刷新队列的时候 watcher 真正执行的函数是 run()</li><li>run()真正执行的是 getter</li><li>getter 其实就是 updateComponent</li></ol><p>当组件内数据发生变化后，未来的某个时刻，updateComponent 会重新执行以下</p><p>组件是怎么更新的？</p><ol><li>执行 render 获得虚拟 dom</li><li>vdom 需要使用<code>_update()</code>转换为真实 dom</li></ol><p><code>src/core/instance/lifecycle.js</code><br><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/13.png" alt="_update"></p><p><code>_update</code>中判断是否是初始化，初始化的话就创建 vnode 为真实 dom,追加到 vm.$el 上，不是初始化的话就 diff</p><p><code>examples/test/03-timerFunc.html</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>异步更新<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>&#123;&#123;foo&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 创建实例</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#demo&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      foo: <span class="string">&#x27;ready~~&#x27;</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.foo = <span class="number">1</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;1:&#x27;</span> + <span class="built_in">this</span>.foo)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.foo = <span class="number">2</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;2:&#x27;</span> + <span class="built_in">this</span>.foo)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.foo = <span class="number">3</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;3:&#x27;</span> + <span class="built_in">this</span>.foo)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;p1.innerHTML:&#x27;</span> + p1.innerHTML)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;p1.innerHTML:&#x27;</span> + p1.innerHTML)</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>问： 此时 2 次 p1.innerHTML 的值是？<br>答：<code>ready~~，3</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>异步更新<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>&#123;&#123;foo&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 创建实例</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#demo&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      foo: <span class="string">&#x27;ready~~&#x27;</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.foo = <span class="number">1</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;1:&#x27;</span> + <span class="built_in">this</span>.foo)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;p1.innerHTML:&#x27;</span> + p1.innerHTML)</span></span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.foo = <span class="number">2</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;2:&#x27;</span> + <span class="built_in">this</span>.foo)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.foo = <span class="number">3</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;3:&#x27;</span> + <span class="built_in">this</span>.foo)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;p1.innerHTML:&#x27;</span> + p1.innerHTML)</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>问： 此时 2 次 p1.innerHTML 的值是？<br>答：<code>ready~~，3</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>异步更新<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>&#123;&#123;foo&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 创建实例</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#demo&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      foo: <span class="string">&#x27;ready~~&#x27;</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;p1.innerHTML:&#x27;</span> + p1.innerHTML)</span></span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.foo = <span class="number">1</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;1:&#x27;</span> + <span class="built_in">this</span>.foo)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.foo = <span class="number">2</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;2:&#x27;</span> + <span class="built_in">this</span>.foo)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.foo = <span class="number">3</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;3:&#x27;</span> + <span class="built_in">this</span>.foo)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;p1.innerHTML:&#x27;</span> + p1.innerHTML)</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>问： 此时 2 次 p1.innerHTML 的值是？<br>答：<code>ready~~，ready~~</code></p><p>原因：<br>$nextTick 会让 callbacks 数组中存放回调函数<br><code>this.foo = 1</code>会在 callbacks 中添加<code>flusScheduleQueue</code><br>前两种情况，foo 已经入队了，callbacks 队列类似<code>[flusScheduleQueue, nextTick.cb]</code>这样子<br>第三种情况时，foo 入队在 nextTick 后面，callbacks 中类似<code>[nextTick.cb, flusScheduleQueue]</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>异步更新<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>&#123;&#123;foo&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="comment">// 创建实例</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#demo&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line"><span class="javascript">      foo: <span class="string">&#x27;ready~~&#x27;</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.foo = <span class="number">1</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;1:&#x27;</span> + <span class="built_in">this</span>.foo)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.foo = <span class="number">2</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;2:&#x27;</span> + <span class="built_in">this</span>.foo)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.foo = <span class="number">3</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;3:&#x27;</span> + <span class="built_in">this</span>.foo)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(<span class="string">&#x27;p1.innerHTML:&#x27;</span> + p1.innerHTML)</span></span><br><span class="line"><span class="javascript">      <span class="built_in">Promise</span>.resolve().then(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;Promise p1.innerHTML:&#x27;</span> + p1.innerHTML)</span></span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;nextTick p1.innerHTML:&#x27;</span> + p1.innerHTML)</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>问：Promise 和 nextTick 谁先输出？<br>答：<code>nextTick</code></p><p>原因：<br><code>this.foo = 1</code>导致在 callbacks 中添加一个<code>flusScheduleQueue</code>，并将 callbacks 添加到微任务队列<br>Promise 执行时，将回调函数进入微任务队列<br>nextTick 执行时将回调函数进入 callbacks，此时 callbacks 类似<code>[flusScheduleQueue, nextTick.cb]</code><br>此时因为上面的微任务队列中是<code>[callbacks, Promise.then]</code>的样子<br>所以在执行 callbacks 时，会将 nextTick 一并执行后再执行 Promise.then</p><h3 id="虚拟-DOM"><a href="#虚拟-DOM" class="headerlink" title="虚拟 DOM"></a>虚拟 DOM</h3><p><strong>虚拟 DOM（Virtual DOM）是对 DOM 的 JS 抽象表示，它们是 JS 对象，能够描述 DOM 结构和关系。应用的各种状态变化会作用于虚拟 DOM，最终映射到 DOM 上。</strong></p><p>vue 中虚拟 dom 基于 <code>snabbdom</code> 实现，安装 snabbdom 并体验</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--安装并引入snabbdom--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcdn.net/ajax/libs/snabbdom/0.7.4/snabbdom.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 之前编写的响应式函数</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, key, val</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span></span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> val</span></span><br><span class="line">          &#125;,</span><br><span class="line"><span class="javascript">          <span class="function"><span class="title">set</span>(<span class="params">newVal</span>)</span> &#123;</span></span><br><span class="line">            val = newVal</span><br><span class="line"><span class="javascript">            <span class="comment">// 通知更新</span></span></span><br><span class="line">            update()</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="comment">// 导入patch的工厂init，h是产生vnode的工厂</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> &#123; init, h &#125; = snabbdom</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 获取patch函数</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> patch = init([])</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 上次vnode，由patch()返回</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> vnode</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 更新函数，将数据操作转换为dom操作，返回新vnode</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line">        if (!vnode) &#123;</span><br><span class="line"><span class="javascript">          <span class="comment">// 初始化，没有上次vnode，传入宿主元素和vnode</span></span></span><br><span class="line">          vnode = patch(app, render())</span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 更新，传入新旧vnode对比并做更新</span></span></span><br><span class="line">          vnode = patch(vnode, render())</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="comment">// 渲染函数，返回vnode描述dom结构</span></span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, obj.foo)</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="comment">// 数据</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> obj = &#123;&#125;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 定义响应式</span></span></span><br><span class="line"><span class="javascript">      defineReactive(obj, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 赋一个日期作为初始值</span></span></span><br><span class="line"><span class="javascript">      obj.foo = <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 定时改变数据，更新函数会重新执行</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        obj.foo = <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()</span></span><br><span class="line">      &#125;, 1000)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="DIFF"><a href="#DIFF" class="headerlink" title="DIFF"></a>DIFF</h3><p>从<code>_update</code>看起</p><p><code>src/core/instance/lifecycle.js</code></p><p><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/14.png" alt="_update"></p><p><code>__patch__</code>从何而来？</p><p><code>src/platforms/web/runtime/index.js</code></p><p><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/15.png" alt="__patch__"></p><p><code>__patch</code>是在平台特有代码中指定的</p><p><code>src/core/vdom/patch.js</code></p><p><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/16.png" alt="createPatchFunction"></p><p><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/17.png" alt="初始化"></p><p><strong>diff 原则：深度优先，同层比较(为了降低时间复杂度)</strong></p><p>比较两个 VNode，包括三种类型操作：<em>属性更新_、_文本更新_、_子节点更新</em></p><p>具体规则如下：</p><ol><li>新老节点均有 children 子节点，则对子节点进行 diff 操作，调用 updateChildren</li><li>如果新节点有子节点而老节点没有子节点，先清空老节点的文本内容，然后为其新增子节点。</li><li>当新节点没有子节点而老节点有子节点的时候，则移除该节点的所有子节点。</li><li>当新老节点都无子节点的时候，只是文本的替换。</li></ol><p><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/18.png" alt="patchVnode"></p><h4 id="updateChildren-算法："><a href="#updateChildren-算法：" class="headerlink" title="updateChildren 算法："></a>updateChildren 算法：</h4><ol><li>新老 vnode 各创建一个首尾标记，向内双循环，直到<code>oldStartIdx &lt;= oldEndIdx &amp;&amp; newStartIdx &lt;= newEndIdx</code></li><li>oldStartVnode 和 newStartVnodel 满足 sameVnode，就直接 patchVnode</li><li>oldStartVnode 和 newEndVnode 满足 sameVnode， patchVnode 同时将真实 dom 移到 oldEndVnode 后面</li><li>oldEndVnode 和 newStartVnode 满足 sameVnode，patchVnode 同时将真实 dom 移到 oldStartVnode 前面</li><li>如果都不满足，就在 oldVnode 中找和 newStartVnode 相同的节点，如果存在就 patchVnode 把真实 dom 添加到 oldStartIndex 前面</li><li>如果在 oldVnode 中找不到和 newStartVnode 相同的节点，就 调用 createElm，patchVnode 到 oldStartIndex 前面</li><li>如果 oldVnode 先遍历完，说明新的比老的多，就把剩下的 newVnode 插入真实 dom</li><li>如果 newVnode 先遍历完，说明老的比新的多，就把剩下的 oldVnode 对应的真实 dom 删除</li></ol><p><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/19.png" alt="updateChildren"></p><h4 id="key-的作用："><a href="#key-的作用：" class="headerlink" title="key 的作用："></a>key 的作用：</h4><p>先看<code>sameVnode</code>方法</p><p><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/20.png" alt="sameVnode"></p><p>sameVnode 通过判断 tag（div、span……），注释，data，input 判断 type 等来判断是否相同</p><p>当不设置 key 的时候，key 就是<code>undefined</code>，<code>undefined === undefined</code>，在列表操作时，就会进行强制更新</p><p>例：数组<code>[1,2,3]</code>在 2 前面添加 4<br>有 key 时，<code>[1,2,3][1,4,2,3] =&gt; [2,3][4,2,3] =&gt; [2][4,2] =&gt; [][4]</code> 最后创建 4<br>无 key 时，<code>[1,2,3][1,4,2,3] =&gt; [2,3][4,2,3] =&gt; [3][2,3] =&gt; [][3]</code> 全都强制更新一遍，最后创建 3</p><p>所以平常使用时要加 key，且 key 要保持唯一，且不要用索引，不然会导致强制更新</p><h4 id="patch-函数是怎么获取的？"><a href="#patch-函数是怎么获取的？" class="headerlink" title="patch 函数是怎么获取的？"></a>patch 函数是怎么获取的？</h4><p><code>src/platforms/web/runtime/index.js</code></p><p><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/21.png" alt="Vue.prototype.__patch__ "></p><p>传递平台特有的节点操作选项给工厂函数，返回 patch</p><p>这里 nodeOps 就是是 web 平台特有的 dom 操作</p><p><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/22.png" alt="nodeOps"></p><p>modules 是把平台 modules 和 baseModules 做了一个拼接</p><p><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/23.png" alt="platformModules"></p><p><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/24.png" alt="baseModules"></p><p>平台属性相关的操作会以 module 的形式暴露，都会有钩子函数的名字，最终 patch 里执行的时候调用这个钩子对应的方法</p><p><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/25.png" alt="钩子函数"></p><h4 id="节点属性如何更新？"><a href="#节点属性如何更新？" class="headerlink" title="节点属性如何更新？"></a>节点属性如何更新？</h4><p><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/27.png" alt="createPatchFunction"></p><p><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/28.png" alt="patchVnode"></p><p><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/26.png" alt="cbs"></p><h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/29.png"></p><p><strong>本文完</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://yongmaple.com/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/&quot;&gt;Vue2 源码解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;htt</summary>
      
    
    
    
    <category term="前端" scheme="https://yongmaple.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://yongmaple.com/tags/Vue/"/>
    
    <category term="手撕源码" scheme="https://yongmaple.com/tags/%E6%89%8B%E6%92%95%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Vue2源码解析</title>
    <link href="https://yongmaple.com/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    <id>https://yongmaple.com/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</id>
    <published>2021-04-13T17:09:57.000Z</published>
    <updated>2021-04-26T06:21:28.292Z</updated>
    
    <content type="html"><![CDATA[<p>目录：</p><ul><li><a href="https://yongmaple.com/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/">Vue2 源码解析</a></li><li><a href="https://yongmaple.com/2021/04/15/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%BA%8C/">Vue2 源码解析二</a></li><li><a href="https://yongmaple.com/2021/04/21/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%E4%B8%89/">Vue2 源码解析三</a></li></ul><p>本文项目地址：<a href="https://github.com/YongMaple/vue">https://github.com/YongMaple/vue</a> 内含测试用代码<code>/examples/test/</code></p><h3 id="获取-Vue"><a href="#获取-Vue" class="headerlink" title="获取 Vue"></a>获取 Vue</h3><p>项目地址：<a href="https://github.com/vuejs/vue">https://github.com/vuejs/vue</a></p><p>当前版本号：2.6.12</p><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br><span class="line">npm i roll-up -g</span><br></pre></td></tr></table></figure><p>使用<code>npm run dev</code>就会在<code>dist</code>目录下生成编译后的<code>vue.js</code></p><h3 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── <span class="keyword">BACKERS.md</span></span><br><span class="line"><span class="keyword">├── </span>LICENSE</span><br><span class="line">├── README.md</span><br><span class="line">├── <span class="keyword">benchmarks</span></span><br><span class="line"><span class="keyword">├── </span><span class="keyword">dist </span>         发布目录</span><br><span class="line">├── examples      范例，里面有测试代码</span><br><span class="line">├── flow          针对flow的类型声明（类似ts）</span><br><span class="line">├── package.<span class="keyword">json</span></span><br><span class="line"><span class="keyword">├── </span>packages      核心代码之外的独立库</span><br><span class="line">├── <span class="keyword">scripts </span>      构建脚本</span><br><span class="line">├── src           源码</span><br><span class="line">│   ├── compiler          编译器相关（渲染函数、SFC的编译器、dom编译器）</span><br><span class="line">│   ├── core              核心代码</span><br><span class="line">│   │   ├── components      通用组件如keep-alive</span><br><span class="line">│   │   ├── <span class="built_in">config</span>.<span class="keyword">js</span></span><br><span class="line"><span class="keyword">│ </span>  │   ├── global-api      全局API</span><br><span class="line">│   │   ├── index.<span class="keyword">js</span></span><br><span class="line"><span class="keyword">│ </span>  │   ├── <span class="keyword">instance </span>       构造函数等</span><br><span class="line">│   │   ├── observer        响应式相关</span><br><span class="line">│   │   ├── util</span><br><span class="line">│   │   └── vdom            虚拟DOM相关</span><br><span class="line">│   ├── platforms           平台</span><br><span class="line">│   │   ├── web</span><br><span class="line">│   │   └── weex            基本凉凉了</span><br><span class="line">│   ├── server</span><br><span class="line">│   ├── sfc</span><br><span class="line">│   └── <span class="keyword">shared</span></span><br><span class="line"><span class="keyword">├── </span>types         ts类型声明</span><br><span class="line">└── yarn.lock</span><br></pre></td></tr></table></figure><p>需要源码映射，所以在 package.json 中添加<code>--sourcemap</code></p><p><code>&quot;dev&quot;: &quot;rollup -w -c scripts/config.js --sourcemap --environment TARGET:web-full-dev&quot;,</code></p><p>术语解释：</p><ul><li>runtime: 仅包含运行时，不包含编译器</li><li>common: cjs 规范，用于 webpack1</li><li>esm: ES 模块，用于 webpack2+</li><li>umd: universal module definition，兼容 cjs 和 amd，常见直接用在浏览器</li></ul><p>例：</p><ul><li><code>/dist/vue.common.js</code> 中间加 common 的，给服务端使用的，在 nodejs 环境执行的</li><li><code>/dist/vue.esm.browser.js</code> esm，给打包工具使用的，如 webpack。</li><li>browser，给支持 type=module 这种模块化方式导入的浏览器</li><li><code>/dist/vue.js</code> global，同时兼容 amd 和 cjs(commonjs)的格式。umd 的打包方式</li><li><code>/dist/vue.runtime.js</code> runtime，运行时，不含编译器，template 中加入字符串模板这类操作会报错</li></ul><h3 id="src-platforms-web-entry-runtime-with-compiler-js"><a href="#src-platforms-web-entry-runtime-with-compiler-js" class="headerlink" title="src/platforms/web/entry-runtime-with-compiler.js"></a><code>src/platforms/web/entry-runtime-with-compiler.js</code></h3><p>从 package.json <code>dev</code>中找到<code>/scripts/config.js</code></p><p><code>rollup -w -c scripts/config.js --sourcemap --environment TARGET:web-full-dev</code>命令中传入了环境变量<code>web-full-dev</code></p><p>在<code>/scripts/config.js</code>中查找，可以在配置中找到入口文件<code>web/entry-runtime-with-compiler.js</code></p><p>文件地址前有个 resolve 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resolve = <span class="function">(<span class="params">p</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 拆分/</span></span><br><span class="line">  <span class="comment">// web/entry-runtime-with-compiler.js</span></span><br><span class="line">  <span class="keyword">const</span> base = p.split(<span class="string">&#x27;/&#x27;</span>)[<span class="number">0</span>] <span class="comment">// web</span></span><br><span class="line">  <span class="keyword">if</span> (aliases[base]) &#123;</span><br><span class="line">    <span class="keyword">return</span> path.resolve(aliases[base], p.slice(base.length + <span class="number">1</span>))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> path.resolve(__dirname, <span class="string">&#x27;../&#x27;</span>, p)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是<code>aliases</code>的内容</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> resolve = <span class="function">(<span class="params">p</span>) =&gt;</span> path.resolve(__dirname, <span class="string">&#x27;../&#x27;</span>, p)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  vue: resolve(<span class="string">&#x27;src/platforms/web/entry-runtime-with-compiler&#x27;</span>),</span><br><span class="line">  compiler: resolve(<span class="string">&#x27;src/compiler&#x27;</span>),</span><br><span class="line">  core: resolve(<span class="string">&#x27;src/core&#x27;</span>),</span><br><span class="line">  shared: resolve(<span class="string">&#x27;src/shared&#x27;</span>),</span><br><span class="line">  web: resolve(<span class="string">&#x27;src/platforms/web&#x27;</span>),</span><br><span class="line">  weex: resolve(<span class="string">&#x27;src/platforms/weex&#x27;</span>),</span><br><span class="line">  server: resolve(<span class="string">&#x27;src/server&#x27;</span>),</span><br><span class="line">  sfc: resolve(<span class="string">&#x27;src/sfc&#x27;</span>),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在找到了入口文件的位置<code>src/platforms/web/entry-runtime-with-compiler.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mount = Vue.prototype.$mount</span><br><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  ...</span></span></span><br><span class="line"><span class="function"><span class="params">&#125;</span></span></span><br></pre></td></tr></table></figure><p>源码中这段是为了扩展$mount，为了解析 el、template 选项</p><p>问题 1：为什么可以不用写<code>$mount</code></p><p>答：如果设置了 el，挂载的宿主就指定为 el</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="comment">// template: &#x27;&lt;div&gt;template&lt;/div&gt;</span></span><br><span class="line">  template: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;render&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>问题 2：el、template、render 同时出现，哪个优先级高</p><p>答：render &gt; template &gt; el</p><p><img src="/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/1.png" alt="注意看注释"></p><h3 id="src-platforms-web-runtime-index-js"><a href="#src-platforms-web-runtime-index-js" class="headerlink" title="src/platforms/web/runtime/index.js"></a><code>src/platforms/web/runtime/index.js</code></h3><p>找到当前文件中的 Vue 引入<code>import Vue from &#39;./runtime/index&#39;</code></p><p>进入这个文件看一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// install platform patch function</span></span><br><span class="line"><span class="comment">// 安装平台特有的补丁函数，未来用于组件更新</span></span><br><span class="line">Vue.prototype.__patch__ = inBrowser ? patch : noop</span><br><span class="line"></span><br><span class="line"><span class="comment">// public mount method</span></span><br><span class="line"><span class="comment">// 实现了$mount</span></span><br><span class="line">Vue.prototype.$mount = <span class="function"><span class="keyword">function</span> (<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">  el?: string | Element,</span></span></span><br><span class="line"><span class="function"><span class="params">  hydrating?: boolean</span></span></span><br><span class="line"><span class="function"><span class="params"></span>): <span class="title">Component</span> </span>&#123;</span><br><span class="line">  el = el &amp;&amp; inBrowser ? query(el) : <span class="literal">undefined</span></span><br><span class="line">  <span class="comment">// 挂载组件：把当前组件(this)挂载到el上</span></span><br><span class="line">  <span class="comment">// 流程： mountComponent 执行this的render， 得到vnode， _update(vnode)转换成真实dom， _update内部调用的是__patch__</span></span><br><span class="line">  <span class="keyword">return</span> mountComponent(<span class="built_in">this</span>, el, hydrating)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>Vue 在执行挂载时：执行渲染函数得到虚拟 dom，再执行更新函数，将其转换为真实 dom</em></p><p>继续找 Vue，当前文件的引入为<code>import Vue from &#39;core/index&#39;</code></p><p>此处 core 是<code>src/core</code>的别名</p><h3 id="src-core-index-js"><a href="#src-core-index-js" class="headerlink" title="src/core/index.js"></a><code>src/core/index.js</code></h3><p>主要做了初始化全局 API</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化全局API</span></span><br><span class="line"><span class="comment">// Vue.use directive components mixin 等</span></span><br><span class="line">initGlobalAPI(Vue)</span><br></pre></td></tr></table></figure><p>继续找 Vue，当前文件的引入为<code>import Vue from &#39;./instance/index&#39;</code></p><h3 id="src-core-instance-index-js"><a href="#src-core-instance-index-js" class="headerlink" title="src/core/instance/index.js"></a><code>src/core/instance/index.js</code></h3><p>这个文件中</p><ul><li>声明了 Vue 的构造函数</li><li>声明了 Vue 的各种实例方法($set、$watch 等等)</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 声明Vue的构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Vue</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (process.env.NODE_ENV !== <span class="string">&#x27;production&#x27;</span> &amp;&amp; !(<span class="built_in">this</span> <span class="keyword">instanceof</span> Vue)) &#123;</span><br><span class="line">    warn(<span class="string">&#x27;Vue is a constructor and should be called with the `new` keyword&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">this</span>._init(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明Vue各种实例方法</span></span><br><span class="line">initMixin(Vue)</span><br><span class="line">stateMixin(Vue)</span><br><span class="line">eventsMixin(Vue)</span><br><span class="line">lifecycleMixin(Vue)</span><br><span class="line">renderMixin(Vue)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> Vue</span><br></pre></td></tr></table></figure><p>这里<code>_init</code>从何而来，是在<code>initMixin()</code>中</p><h3 id="src-core-instance-init-js"><a href="#src-core-instance-init-js" class="headerlink" title="src/core/instance/init.js"></a><code>src/core/instance/init.js</code></h3><p><img src="/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/2.png" alt="注意注释"></p><p><img src="/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/5.png" alt="initLifecycle"></p><p>内部就是声明了各种和他有关系的组件，父、祖、子等</p><p>就是实例属性的初始化</p><p><img src="/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/3.png" alt="initEvents"></p><p>在使用自定义事件时，类似这种写法<code>&lt;Child @my-click=&quot;onClick&quot;&gt;&lt;/Child&gt;</code></p><p>回调函数（onClick）在父组件中声明的，所以用在 initEvents 中使用<code>_parentListeners</code></p><p><code>updateComponentListeners</code>是事件的监听</p><p>事件的监听和派发都是组件本身</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">child.$emit(<span class="string">&#x27;my-click&#x27;</span>)</span><br><span class="line">child.$on(<span class="string">&#x27;my-click&#x27;</span>, listeners)</span><br></pre></td></tr></table></figure><p><img src="/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/4.png" alt="initRender"></p><p>在 render 中处理<code>$slots</code>和<code>$scopedSlots</code>这个比较好理解，在渲染前肯定是要把内部插槽先解析</p><p><code>$_c</code>和<code>$createElement</code>就是 render(h)中的那个 h，可以得到虚拟 dom</p><p><code>$_c</code>给编译器生成的渲染函数去使用</p><p><code>$createElement</code>给用户生成的渲染函数去使用</p><p>问：new Vue 的时候都发生了什么？</p><p>答：首先构造函数的初始化会得到一个 Vue 的实例，我们给他传入 options，我们会得到一个组件实例，在内部会做根实例的初始化</p><ol><li>初始化时会做：当前实例的关键属性初始化，例如$parent,$root,$slots,$scopeSlots 等等</li><li>同时对当前自定义组件的自定义事件的监听</li><li>派发一些生命周期钩子，beforeCreate、created</li><li>在这两个钩子中间，对组件的状态进行初始化，比如 data/props/methods/computed/watch，对他们进行数据响应式处理</li></ol><h3 id="数据响应式"><a href="#数据响应式" class="headerlink" title="数据响应式"></a>数据响应式</h3><p>可以先看下之前的这篇文章进行大致的了解</p><p><a href="https://yongmaple.com/2021/04/07/%E6%89%8B%E5%86%99Vue/">https://yongmaple.com/2021/04/07/手写 Vue/</a></p><p>开始研究<code>initState</code></p><p><img src="/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/6.png" alt="initState"><br>可以看到 initState 里面，对 props、methods、data、computed、watch 进行了初始化</p><p>问：props、methods、data 中如果有重名的属性，优先谁？</p><p>答：props &gt; methods &gt; data。从上往下处理，在处理时如果发现有重名的，就会报错</p><p><img src="/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/7.png" alt="initData"></p><p>通常 data 都是 function，只有在根组件的时候可以是对象</p><p>问：为什么这里的 data 可以是对象？为什么 data 一般都是个函数，需要 return 出去，不能直接写对象？</p><ul><li>组件复用时所有组件实例都会共享 data，如果 data 是对象的话，就会造成一个组件修改 data 以后会影响到其他所有组件，所以需要将 data 写成函数，每次用到就调用一次函数获得新的数据。</li><li>当我们使用 new Vue() 的方式的时候，无论我们将 data 设置为对象还是函数都是可以的，因为 new Vue() 的方式是生成一个根组件，该组件不会复用，也就不存在共享 data 的情况了</li></ul><p>这里进入<code>observe</code>方法（<code>src/core/observer/index.js</code>）</p><p><img src="/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/8.png" alt="observe"></p><p>可以知道，在 observe 时，每个对象会创建一个 Observer</p><p>先看测试代码<code>examples/test/02-1-reactive.html</code>中的问题</p><p><img src="/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/9.png" alt="02-1-reactive.html"></p><p>再看下<code>src/core/observer/index.js</code></p><p><img src="/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/10.png" alt="Observer"></p><p>再看上面的问题，这个例子中有几个 Dep，现在就知道应该是 4 个了</p><p>每个对象创建一个 Dep，每个属性又会创建一个子 Dep，所以这里是 4 个 Dep</p><p>一个组件一个 Watcher，这个例子中只有一个 new Vue()，所以这里是 1 个 Watcher</p><p>进入 Observer 中的 this.walk</p><p><img src="/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/11.png" alt="walk"></p><p>这里 walk 遍历了对象的所有 key，进行了一个响应式的处理</p><p>进入 defineReactive</p><p><img src="/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/12.png" alt="defineReactive"></p><p>这里每个 key 都 new Dep()</p><p>还可以看到<code>let childOb = !shallow &amp;&amp; observe(val)</code></p><p>这里又对属性做了一次 observe</p><p>如果这里 childOb 存在，就说明子 Ob 内部的 dep 和当前组件的 watcher 建立了依赖关系</p><p>Dep 与 Watcher 的关系</p><ul><li>一个组件内部只有一个 Watcher</li><li>一个组件内部有多个 Dep</li><li>组件内部除了 render watcher，可能还会有 user watcher，用户会自定义($watch、watch:{})</li><li>所以他们之间是多对多的关系</li></ul><p>先看下 depend</p><p><img src="/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/13.png" alt="depend"></p><p>这里面 Dep.target 就是 WatcheraddDep</p><p>再看下 Watcher 的 addDep</p><p><img src="/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/14.png" alt="addDep"></p><p>这里面把 watcher 和 dep 相互建立了关系</p><ul><li><p>建立 Dep 与 Watcher 的关系是为了通知更新，这个很好理解</p></li><li><p>建立 Watcher 与 Dep 的关系是为了清除 watcher 时使用</p></li></ul><p>如何清除 watcher？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> unWatch = app.$watch(<span class="string">&#x27;text&#x27;</span>, <span class="function">(<span class="params">newVal, oldVal</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;newVal&#125;</span> : <span class="subst">$&#123;oldVal&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 手动注销watch</span></span><br><span class="line">unWatch()</span><br></pre></td></tr></table></figure><h3 id="数组响应式"><a href="#数组响应式" class="headerlink" title="数组响应式"></a>数组响应式</h3><p>数组和对象不同，操作数组时使用 7 个方法（数组变更方法），没办法得知数据变化，vue 中采取的策略是拦截这些方法并通知 dep</p><p>先看对数组的拦截和通知 <code>src/core/observer/array.js</code></p><p><img src="/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/15.png" alt="array.js"></p><p>再找<code>arrayMethods</code>在哪使用的</p><p>Observer 中有对数组和对象分别做处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 根据Object或者Array做不同的操作</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(value)) &#123;</span><br><span class="line">      <span class="comment">// 判断是否有原型</span></span><br><span class="line">      <span class="keyword">if</span> (hasProto) &#123;</span><br><span class="line">        protoAugment(value, arrayMethods)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// IE等老版本浏览器</span></span><br><span class="line">        copyAugment(value, arrayMethods, arrayKeys)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.observeArray(value)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.walk(value)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有原型时，直接替换掉原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">protoAugment</span>(<span class="params">target, src: <span class="built_in">Object</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">/* eslint-disable no-proto */</span></span><br><span class="line">  <span class="comment">// 覆盖当前数组实例的原型</span></span><br><span class="line">  target.__proto__ = src</span><br><span class="line">  <span class="comment">/* eslint-enable no-proto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有原型时，直接把方法定义上去</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copyAugment</span>(<span class="params">target: <span class="built_in">Object</span>, src: <span class="built_in">Object</span>, keys: <span class="built_in">Array</span>&lt;string&gt;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = keys.length; i &lt; l; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = keys[i]</span><br><span class="line">    def(target, key, src[key])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="set，del，watch"><a href="#set，del，watch" class="headerlink" title="set，del，watch"></a>set，del，watch</h3><p>set 所在位置<code>src/core/observer/index.js</code></p><p><em>图中删了两个:any，不然颜色有问题……</em></p><p><img src="/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/17.png" alt="set"></p><p>del 就在 set 的下面，比较简单，只是删除后通知了一下</p><p><img src="/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/18.png" alt="del"></p><p>watch 所在位置<code>src/core/instance/state.js</code></p><p><img src="/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/19.png" alt="$watch"></p><p><img src="/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/20.png" alt="createWatcher"></p><h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/16.png"></p><p><strong>本文完</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;目录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://yongmaple.com/2021/04/13/Vue2%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/&quot;&gt;Vue2 源码解析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;htt</summary>
      
    
    
    
    <category term="前端" scheme="https://yongmaple.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://yongmaple.com/tags/Vue/"/>
    
    <category term="手撕源码" scheme="https://yongmaple.com/tags/%E6%89%8B%E6%92%95%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>AntV-L7中画一个指定距离的圆</title>
    <link href="https://yongmaple.com/2021/04/08/AntV-L7%E4%B8%AD%E7%94%BB%E4%B8%80%E4%B8%AA%E6%8C%87%E5%AE%9A%E8%B7%9D%E7%A6%BB%E7%9A%84%E5%9C%86/"/>
    <id>https://yongmaple.com/2021/04/08/AntV-L7%E4%B8%AD%E7%94%BB%E4%B8%80%E4%B8%AA%E6%8C%87%E5%AE%9A%E8%B7%9D%E7%A6%BB%E7%9A%84%E5%9C%86/</id>
    <published>2021-04-08T18:02:17.000Z</published>
    <updated>2021-04-26T06:21:28.288Z</updated>
    
    <content type="html"><![CDATA[<h3 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h3><p>先吐槽下 L7，用下来感觉就是个 KPI 项目，坑超多，文档中 N 多 404 也没人管，很多方法都没有暴露出来，只可远观，用起来就全是坑</p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>根据经纬度和距离，在地图上显示一个圆形的范围</p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><p>一开始想用<code>PointLayer</code>的，后来发现 size 不能根据距离来生成</p><p>然后想到了绘制组件中的<code>DrawCircle</code>，去看了下源码，找到了如下这段：</p><p><code>/L7/stories/Draw/Components/DrawCircle.tsx</code></p><p><img src="/2021/04/08/AntV-L7%E4%B8%AD%E7%94%BB%E4%B8%80%E4%B8%AA%E6%8C%87%E5%AE%9A%E8%B7%9D%E7%A6%BB%E7%9A%84%E5%9C%86/1.png"><br><img src="/2021/04/08/AntV-L7%E4%B8%AD%E7%94%BB%E4%B8%80%E4%B8%AA%E6%8C%87%E5%AE%9A%E8%B7%9D%E7%A6%BB%E7%9A%84%E5%9C%86/2.png"></p><p>原来 L7 本身的圆就是通过多边形圆来画的，所以果断引入<code>turf</code></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>添加依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i @turf/turf -S</span><br></pre></td></tr></table></figure><p>生成一个多边形圆</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; circle &#125; <span class="keyword">from</span> <span class="string">&#x27;@turf/turf&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> addCircleLayer = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 经纬度</span></span><br><span class="line">  <span class="keyword">const</span> center = [<span class="string">&#x27;121.138695&#x27;</span>, <span class="string">&#x27;31.246165&#x27;</span>]</span><br><span class="line">  <span class="comment">// 半径（公里）</span></span><br><span class="line">  <span class="keyword">const</span> dis = <span class="number">3</span></span><br><span class="line">  <span class="comment">// steps: 边数    边数约多约圆润</span></span><br><span class="line">  <span class="keyword">const</span> polygonCircle = circle(center, dis, &#123; <span class="attr">steps</span>: <span class="number">64</span> &#125;)</span><br><span class="line">  <span class="comment">// 生成多边形圆</span></span><br><span class="line">  <span class="keyword">const</span> circleLayer = <span class="keyword">new</span> PolygonLayer()</span><br><span class="line">    .source(&#123;</span><br><span class="line">      type: <span class="string">&#x27;FeatureCollection&#x27;</span>,</span><br><span class="line">      features: [polygonCircle],</span><br><span class="line">    &#125;)</span><br><span class="line">    .color(<span class="string">&#x27;rgba(255, 189, 72, 0.2)&#x27;</span>)</span><br><span class="line">    .shape(<span class="string">&#x27;fill&#x27;</span>)</span><br><span class="line">    .style(&#123;</span><br><span class="line">      opacity: <span class="number">0.6</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  scene?.addLayer(circleLayer)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;吐槽&quot;&gt;&lt;a href=&quot;#吐槽&quot; class=&quot;headerlink&quot; title=&quot;吐槽&quot;&gt;&lt;/a&gt;吐槽&lt;/h3&gt;&lt;p&gt;先吐槽下 L7，用下来感觉就是个 KPI 项目，坑超多，文档中 N 多 404 也没人管，很多方法都没有暴露出来，只可远观，用起来就全是坑&lt;</summary>
      
    
    
    
    <category term="前端" scheme="https://yongmaple.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="AntV" scheme="https://yongmaple.com/tags/AntV/"/>
    
    <category term="L7" scheme="https://yongmaple.com/tags/L7/"/>
    
  </entry>
  
  <entry>
    <title>手写Vue</title>
    <link href="https://yongmaple.com/2021/04/07/%E6%89%8B%E5%86%99Vue/"/>
    <id>https://yongmaple.com/2021/04/07/%E6%89%8B%E5%86%99Vue/</id>
    <published>2021-04-07T20:31:46.000Z</published>
    <updated>2021-04-26T06:21:28.340Z</updated>
    
    <content type="html"><![CDATA[<h5 id="项目地址见本文结尾"><a href="#项目地址见本文结尾" class="headerlink" title="项目地址见本文结尾"></a><em>项目地址见本文结尾</em></h5><h3 id="MVVM-框架的三要素：数据响应式、模板引擎及其渲染"><a href="#MVVM-框架的三要素：数据响应式、模板引擎及其渲染" class="headerlink" title="MVVM 框架的三要素：数据响应式、模板引擎及其渲染"></a>MVVM 框架的三要素：数据响应式、模板引擎及其渲染</h3><ol><li>数据响应式：监听数据变化并在视图中更新</li></ol><ul><li>Object.defineProperty()</li><li>Proxy</li></ul><ol start="2"><li>模版引擎：提供描述视图的模版语法</li></ol><ul><li><p>插值：{ { } }</p></li><li><p>指令：v-bind，v-on，v-model，v-for，v-if</p></li></ul><ol start="3"><li>渲染：如何将模板转换为 html</li></ol><ul><li>模板 =&gt; vdom =&gt; dom</li></ul><h3 id="数据响应式原理"><a href="#数据响应式原理" class="headerlink" title="数据响应式原理"></a>数据响应式原理</h3><p>数据变更能够响应在视图中，就是数据响应式。vue2 中利⽤ Object.defineProperty() 实现变更检<br>测。</p><h3 id="实现一个简单的-reactive-js"><a href="#实现一个简单的-reactive-js" class="headerlink" title="实现一个简单的 reactive.js"></a>实现一个简单的 reactive.js</h3><p><em>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</em></p><p>语法</p><p><em>Object.defineProperty(obj, prop, descriptor)</em></p><p>参数</p><ul><li>obj<br>要定义属性的对象。</li><li>prop<br>要定义或修改的属性的名称或 Symbol 。</li><li>descriptor<br>要定义或修改的属性描述符。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据响应式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`get <span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;val&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">newVal</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (newVal !== val) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`set <span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;newVal&#125;</span>`</span>)</span><br><span class="line">        <span class="comment">// 函数内部有一个函数，并把值暴露出去，形成了闭包</span></span><br><span class="line">        val = newVal</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line">defineReactive(obj, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>)</span><br><span class="line">obj.foo</span><br><span class="line">obj.foo = <span class="string">&#x27;foooooooooooo&#x27;</span></span><br><span class="line">obj.foo</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node reactive.js</span><br><span class="line">get foo:foo</span><br><span class="line"><span class="built_in">set</span> foo:foooooooooooo</span><br><span class="line">get foo:foooooooooooo</span><br></pre></td></tr></table></figure><p>放到页面中，简单写一个 update 模拟一下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span>&#123;&#123;foo&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, key, val</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span></span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">`get <span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;val&#125;</span>`</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> val</span></span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">set</span>(<span class="params">newVal</span>)</span> &#123;</span></span><br><span class="line">        if (newVal !== val) &#123;</span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(<span class="string">`set <span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;newVal&#125;</span>`</span>)</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 函数内部有一个函数，并把值暴露出去，形成了闭包</span></span></span><br><span class="line">          val = newVal</span><br><span class="line">          update()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">update</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// app:简写 相当于document.getElementById(&#x27;app&#x27;)</span></span></span><br><span class="line">    app.innerText = obj.foo</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> obj = &#123;&#125;</span></span><br><span class="line"><span class="javascript">  defineReactive(obj, <span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;foo&#x27;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">    obj.foo = <span class="keyword">new</span> <span class="built_in">Date</span>().toLocaleTimeString()</span></span><br><span class="line">  &#125;, 1000)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在已经可以在页面中看到时间在变化了，但目前只能响应一个属性</p><h4 id="遍历需要响应的对象"><a href="#遍历需要响应的对象" class="headerlink" title="遍历需要响应的对象"></a>遍历需要响应的对象</h4><p>回到 reactive.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 遍历obj，动态拦截obj的所有key</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> || obj == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    defineReactive(obj, key, obj[key])</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前只是遍历了浅层的属性，还需要实现递归</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 递归</span></span><br><span class="line">  observe(val)</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`get <span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;val&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">newVal</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (newVal !== val) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`set <span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;newVal&#125;</span>`</span>)</span><br><span class="line">        <span class="comment">// 函数内部有一个函数，并把值暴露出去，形成了闭包</span></span><br><span class="line">        val = newVal</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 observe 之后进行赋值的对象还不能实现响应式，需要重新递归遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 递归</span></span><br><span class="line">  observe(val)</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`get <span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;val&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">newVal</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (newVal !== val) &#123;</span><br><span class="line">        <span class="comment">// 对于后赋值的对象重新递归遍历</span></span><br><span class="line">        observe(newVal)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`set <span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;newVal&#125;</span>`</span>)</span><br><span class="line">        <span class="comment">// 函数内部有一个函数，并把值暴露出去，形成了闭包</span></span><br><span class="line">        val = newVal</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前动态设置的属性还不能生效，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj.dong = <span class="string">&#x27;dong&#x27;</span></span><br></pre></td></tr></table></figure><p>此时是不生效的，模仿 Vue 进行一个封装</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line">  defineReactive(obj, key, val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要设置一个新的属性时，只能使用 set 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set(obj, <span class="string">&#x27;dong&#x27;</span>, <span class="string">&#x27;dong&#x27;</span>)</span><br></pre></td></tr></table></figure><p>用户直接使用 defineReactive，这里除了 set 写起来简单之外，set 还需要处理其他逻辑，比如数组的处理。这里暂不处理</p><h3 id="开始实现-Vue"><a href="#开始实现-Vue" class="headerlink" title="开始实现 Vue"></a>开始实现 Vue</h3><p>先写测试代码，新建一个<code>vue.html</code>，引入自己写的<code>vue.js</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;counter&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      counter: 1,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">    app.counter++</span><br><span class="line">  &#125;, 1000)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h4><ol><li><code>new Vue()</code> ⾸先执⾏初始化，对 data 执⾏响应化处理，这个过程发⽣在 Observer 中</li><li>同时对模板执⾏编译，找到其中动态绑定的数据，从 data 中获取并初始化视图，这个过程发⽣在<br>Compile 中</li><li>同时定义⼀个更新函数和 Watcher，将来对应数据变化时 Watcher 会调⽤更新函数</li><li>由于 data 的某个 key 在⼀个视图中可能出现多次，所以每个 key 都需要⼀个管家 Dep 来管理多个<br>Watcher</li><li>将来 data 中数据⼀旦发⽣变化，会⾸先找到对应的 Dep，通知所有 Watcher 执⾏更新函数</li></ol><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>先将之前的<code>defineReactive</code>和<code>observe</code>搬过来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据响应式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 递归</span></span><br><span class="line">  observe(val)</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`get <span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;val&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">newVal</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (newVal !== val) &#123;</span><br><span class="line">        observe(newVal)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`set <span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;newVal&#125;</span>`</span>)</span><br><span class="line">        <span class="comment">// 函数内部有一个函数，并把值暴露出去，形成了闭包</span></span><br><span class="line">        val = newVal</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归遍历obj，动态拦截obj的所有key</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> || obj == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">Object</span>.keys(obj).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    defineReactive(obj, key, obj[key])</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$options = options</span><br><span class="line">    <span class="built_in">this</span>.$data = options.data</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对data做响应式处理</span></span><br><span class="line">    observe(<span class="built_in">this</span>.$data)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义一个<code>Observer</code>来根据传入对象的类型做不同的相应处理</p><p>将 observe 中的 defineReactive 移到 walk 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">observe</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span> || obj == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 创建Observer实例</span></span><br><span class="line">  <span class="keyword">new</span> Observer(obj)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应式对象中的某个key只要是一个对象就要创建一个Observer实例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 核心功能：根据传入对象的类型做不同的相应处理</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">obj</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(obj)) &#123;</span><br><span class="line">      <span class="comment">// <span class="doctag">TODO:</span> 数组处理</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 对象响应式</span></span><br><span class="line">      <span class="built_in">this</span>.walk(obj)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">walk</span>(<span class="params">obj</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">Object</span>.keys(obj).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      defineReactive(obj, key, obj[key])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里在调用 observe 时，会递归遍历。在平时 Vue 中看到的<code>__ob__</code>就是这个 Observer</p><p>现在还缺一层代理，在平时 Vue 中，可以通过<code>app.counter</code>的方式访问到属性，目前还只能通过<code>app.$data.counter</code>来访问</p><p>代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">proxy</span>(<span class="params">vm</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">Object</span>.keys(vm.$data).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">Object</span>.defineProperty(vm, key, &#123;</span><br><span class="line">      <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> vm.$data[key]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">set</span>(<span class="params">newVal</span>)</span> &#123;</span><br><span class="line">        vm.$data[key] = newVal</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$options = options</span><br><span class="line">    <span class="built_in">this</span>.$data = options.data</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对data做响应式处理</span></span><br><span class="line">    observe(<span class="built_in">this</span>.$data)</span><br><span class="line">    <span class="comment">// 代理</span></span><br><span class="line">    proxy(<span class="built_in">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在就可以通过<code>app.counter</code>直接访问到了</p><h4 id="实现编译"><a href="#实现编译" class="headerlink" title="实现编译"></a>实现编译</h4><p>需要在遍历子元素的时候分别编译节点和文本</p><p>编译节点时，遍历其属性，对<code>v-</code>开头的分别处理，对<code>@</code>开头的绑定时间</p><p>编译文本时，判断是否有 <code>&#123;&#123;&#125;&#125;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compile</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">el, vm</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$vm = vm</span><br><span class="line">    <span class="built_in">this</span>.$el = <span class="built_in">document</span>.querySelector(el)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历宿主元素</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.$el) &#123;</span><br><span class="line">      <span class="built_in">this</span>.compile(<span class="built_in">this</span>.$el)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">compile</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 递归遍历根元素</span></span><br><span class="line">    el.childNodes.forEach(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.isElement(node)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;编译元素&#x27;</span>, node.nodeName)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.isInterpolation(node)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;编译插值文本&#x27;</span>, node.textContent)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 递归</span></span><br><span class="line">      <span class="keyword">if</span> (node.childNodes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.compile(node)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 元素判断</span></span><br><span class="line">  <span class="function"><span class="title">isElement</span>(<span class="params">node</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> node.nodeType === <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 插值判断</span></span><br><span class="line">  <span class="function"><span class="title">isInterpolation</span>(<span class="params">node</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 正则通过()分组，把&#123;&#123;&#125;&#125;中的内容放入RegExp中的$1</span></span><br><span class="line">    <span class="keyword">return</span> node.nodeType === <span class="number">3</span> &amp;&amp; <span class="regexp">/\&#123;\&#123;(.*)\&#125;\&#125;/</span>.test(node.textContent)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vue</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$options = options</span><br><span class="line">    <span class="built_in">this</span>.$data = options.data</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对data做响应式处理</span></span><br><span class="line">    observe(<span class="built_in">this</span>.$data)</span><br><span class="line">    <span class="comment">// 代理</span></span><br><span class="line">    proxy(<span class="built_in">this</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> Compile(options.el, <span class="built_in">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面开始解析插值文本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compile</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="title">compile</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    el.childNodes.forEach(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.isElement(node)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;编译元素&#x27;</span>, node.nodeName)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.isInterpolation(node)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;编译插值文本&#x27;</span>, node.textContent)</span><br><span class="line">        <span class="built_in">this</span>.compileText(node)</span><br><span class="line">      &#125;</span><br><span class="line">      ...</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line"> <span class="comment">// 解析插值文本</span></span><br><span class="line">  <span class="function"><span class="title">compileText</span>(<span class="params">node</span>)</span> &#123;</span><br><span class="line">    node.textContent = <span class="built_in">this</span>.$vm[<span class="built_in">RegExp</span>.$1]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在已经可以在页面上看到编译出来的<code>counter</code>了，不过还不会更新，因为只编译了一次，先不处理，先把编译属性处理一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compile</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="title">compile</span>(<span class="params">el</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 递归遍历根元素</span></span><br><span class="line">    el.childNodes.forEach(<span class="function">(<span class="params">node</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.isElement(node)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;编译元素&#x27;</span>, node.nodeName)</span><br><span class="line">        <span class="built_in">this</span>.compileElement(node)</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.isInterpolation(node)) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;编译插值文本&#x27;</span>, node.textContent)</span><br><span class="line">        <span class="built_in">this</span>.compileText(node)</span><br><span class="line">      &#125;</span><br><span class="line">      ...</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 编译元素</span></span><br><span class="line">  <span class="function"><span class="title">compileElement</span>(<span class="params">node</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 遍历所有属性：检查是否存在指令和事件</span></span><br><span class="line">    <span class="keyword">const</span> attrs = node.attributes</span><br><span class="line">    <span class="built_in">Array</span>.from(attrs).forEach(<span class="function"><span class="params">attr</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(attr)</span><br><span class="line">      <span class="comment">// 例如：v-text=&quot;counter&quot;</span></span><br><span class="line">      <span class="comment">// attrName就是v-text</span></span><br><span class="line">      <span class="comment">// expression就是counter</span></span><br><span class="line">      <span class="keyword">const</span> attrName = attr.name</span><br><span class="line">      <span class="keyword">const</span> expression = attr.value</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 只处理动态值</span></span><br><span class="line">      <span class="comment">// 指令 v-</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.isDirective(attrName)) &#123;</span><br><span class="line">        <span class="comment">// 希望执行一个指令处理函数</span></span><br><span class="line">        <span class="keyword">const</span> directive = attrName.substring(<span class="number">2</span>)</span><br><span class="line">        <span class="comment">// 如果存在这个指令对应的函数就执行，比如v-text就执行text()</span></span><br><span class="line">        <span class="built_in">this</span>[directive] &amp;&amp; <span class="built_in">this</span>[directive](node, expression)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断指令</span></span><br><span class="line">  <span class="function"><span class="title">isDirective</span>(<span class="params">attrName</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> attrName.startsWith(<span class="string">&#x27;v-&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先处理一个 <code>v-text</code>，添加如下方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v-text</span></span><br><span class="line"><span class="function"><span class="title">text</span>(<span class="params">node, expression</span>)</span> &#123;</span><br><span class="line">  node.textContent = <span class="built_in">this</span>.$vm[expression]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在页面中添加<code>&lt;p v-text=&quot;counter&quot;&gt;&lt;/p&gt;</code>，已经可以正常显示了</p><p>再添加一个<code>v-html</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v-html</span></span><br><span class="line"><span class="function"><span class="title">html</span>(<span class="params">node, expression</span>)</span> &#123;</span><br><span class="line">  node.innerHTML = <span class="built_in">this</span>.$vm[expression]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面上添加</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;desc&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      counter: 1,</span><br><span class="line"><span class="handlebars"><span class="xml">      desc: &#x27;foo<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#x27;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>同样生效了</p><h4 id="依赖收集"><a href="#依赖收集" class="headerlink" title="依赖收集"></a>依赖收集</h4><p>给每个 key 创建一个 Dep，用来管理这个 key 的 Watcher</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> watchers = []</span><br><span class="line"><span class="comment">// 更新执行者Watcher</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">vm, key, updater</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.vm = vm</span><br><span class="line">    <span class="built_in">this</span>.key = key</span><br><span class="line">    <span class="built_in">this</span>.updater = updater</span><br><span class="line"></span><br><span class="line">    watchers.push(<span class="built_in">this</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.updater.call(<span class="built_in">this</span>.vm, <span class="built_in">this</span>.vm[<span class="built_in">this</span>.key])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先不做依赖收集，简单的把 watcher 放到 watchers 数组中</p><p>改造<code>Compile</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compile</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// v-text</span></span><br><span class="line">  <span class="function"><span class="title">text</span>(<span class="params">node, expression</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.update(node, expression, <span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">textUpdater</span>(<span class="params">node, val</span>)</span> &#123;</span><br><span class="line">    node.textContent = val</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params">node, expression, directive</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 在解析指令时，不光要给它初始化，还要给它做更新函数的创建</span></span><br><span class="line">    <span class="comment">// 执行directive对应的实操函数</span></span><br><span class="line">    <span class="keyword">const</span> fn = <span class="built_in">this</span>[directive + <span class="string">&#x27;Updater&#x27;</span>]</span><br><span class="line">    fn &amp;&amp; fn(node, <span class="built_in">this</span>.$vm[expression])</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建Watcher</span></span><br><span class="line">    <span class="keyword">new</span> Watcher(<span class="built_in">this</span>.$vm, expression, <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 形成闭包</span></span><br><span class="line">      fn &amp;&amp; fn(node, val)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改造<code>defineReactive</code>，每次 set 时把 watchers 遍历</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据响应式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 递归</span></span><br><span class="line">  observe(val)</span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`get <span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;val&#125;</span>`</span>)</span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">newVal</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (newVal !== val) &#123;</span><br><span class="line">        observe(newVal)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`set <span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;newVal&#125;</span>`</span>)</span><br><span class="line">        <span class="comment">// 函数内部有一个函数，并把值暴露出去，形成了闭包</span></span><br><span class="line">        val = newVal</span><br><span class="line">        <span class="comment">// update()</span></span><br><span class="line">        watchers.forEach(<span class="function">(<span class="params">w</span>) =&gt;</span> w.update())</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在<code>v-text</code>已经可以更新了</p><p>改造插值文本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析插值文本</span></span><br><span class="line"><span class="function"><span class="title">compileText</span>(<span class="params">node</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.update(node, <span class="built_in">RegExp</span>.$1, <span class="string">&#x27;text&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改造<code>v-html</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v-html</span></span><br><span class="line"><span class="function"><span class="title">html</span>(<span class="params">node, expression</span>)</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.update(node, expression, <span class="string">&#x27;html&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">htmlUpdater</span>(<span class="params">node, val</span>)</span> &#123;</span><br><span class="line">  node.innerHTML = val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是通过 watchers 是全量更新，现在创建 Dep，用来收集每个 key 的 watcher</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dep</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.deps = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">addDep</span>(<span class="params">dep</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.deps.push(dep)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">notify</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.deps.forEach(<span class="function">(<span class="params">w</span>) =&gt;</span> w.update())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改造 defineReactive 和 Watcher</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据响应式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">defineReactive</span>(<span class="params">obj, key, val</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 递归</span></span><br><span class="line">  observe(val)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建一个对应的Dep实例</span></span><br><span class="line">  <span class="keyword">const</span> dep = <span class="keyword">new</span> Dep() <span class="comment">// 这里也是闭包，dep和key是一对一的对应关系</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(obj, key, &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`get <span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;val&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 依赖收集</span></span><br><span class="line">      Dep.target &amp;&amp; dep.addDep(Dep.target)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> val</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">newVal</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (newVal !== val) &#123;</span><br><span class="line">        observe(newVal)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`set <span class="subst">$&#123;key&#125;</span>:<span class="subst">$&#123;newVal&#125;</span>`</span>)</span><br><span class="line">        <span class="comment">// 函数内部有一个函数，并把值暴露出去，形成了闭包</span></span><br><span class="line">        val = newVal</span><br><span class="line">        <span class="comment">// update()</span></span><br><span class="line">        <span class="comment">// watchers.forEach((w) =&gt; w.update())</span></span><br><span class="line">        dep.notify()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">vm, key, updater</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.vm = vm</span><br><span class="line">    <span class="built_in">this</span>.key = key</span><br><span class="line">    <span class="built_in">this</span>.updater = updater</span><br><span class="line"></span><br><span class="line">    <span class="comment">// watchers.push(this)</span></span><br><span class="line">    <span class="comment">// 保存Watcher引用，放到静态变量里</span></span><br><span class="line">    Dep.target = <span class="built_in">this</span></span><br><span class="line">    <span class="comment">// 放进去立刻读取，触发defineReactive中的get</span></span><br><span class="line">    <span class="built_in">this</span>.vm[<span class="built_in">this</span>.key]</span><br><span class="line">    Dep.target = <span class="literal">null</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">update</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.updater.call(<span class="built_in">this</span>.vm, <span class="built_in">this</span>.vm[<span class="built_in">this</span>.key])</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数组响应式"><a href="#数组响应式" class="headerlink" title="数组响应式"></a>数组响应式</h3><ol><li>找到数组原型</li><li>覆盖那些能够修改数组的更新方法，使其可以通知更新</li><li>将得到的新的原型设置到数组实例原型上</li></ol><p>先处理原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组响应式</span></span><br><span class="line"><span class="comment">// 1. 替换数组原型中7个方法</span></span><br><span class="line"><span class="keyword">const</span> orginalProto = <span class="built_in">Array</span>.prototype</span><br><span class="line"><span class="comment">// 备份，修改此备份</span></span><br><span class="line"><span class="keyword">const</span> arrayProto = <span class="built_in">Object</span>.create(orginalProto)</span><br><span class="line"></span><br><span class="line">;[<span class="string">&#x27;push&#x27;</span>, <span class="string">&#x27;pop&#x27;</span>, <span class="string">&#x27;shift&#x27;</span>, <span class="string">&#x27;unshift&#x27;</span>, <span class="string">&#x27;reverse&#x27;</span>, <span class="string">&#x27;sort&#x27;</span>, <span class="string">&#x27;splice&#x27;</span>].forEach(</span><br><span class="line">  (method) =&gt; &#123;</span><br><span class="line">    arrayProto[method] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// 原始操作</span></span><br><span class="line">      orginalProto[method].apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>)</span><br><span class="line">      <span class="comment">// 覆盖操作：通知更新</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`数组执行：<span class="subst">$&#123;method&#125;</span>操作`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>应用新的原型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 核心功能：根据传入对象的类型做不同的相应处理</span></span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">obj</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(obj)) &#123;</span><br><span class="line">      <span class="comment">// 数组处理</span></span><br><span class="line">      <span class="comment">// 覆盖原型，替换7个变更操作</span></span><br><span class="line">      obj.__proto__ = arrayProto</span><br><span class="line">      <span class="comment">// 对数组内部元素执行响应化</span></span><br><span class="line">      <span class="built_in">Object</span>.keys(obj).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">        observe(obj[i])</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 对象响应式</span></span><br><span class="line">      <span class="built_in">this</span>.walk(obj)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">walk</span>(<span class="params">obj</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">Object</span>.keys(obj).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">      defineReactive(obj, key, obj[key])</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单测试，改下 vue.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">&#x27;#app&#x27;</span>,</span></span><br><span class="line">    data: &#123;</span><br><span class="line">      counter: 1,</span><br><span class="line"><span class="handlebars"><span class="xml">      desc: &#x27;foo<span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">span</span>&gt;</span>&#x27;,</span></span></span><br><span class="line">      arr: [],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="javascript">  <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line">    app.counter++</span><br><span class="line">  &#125;, 1000)</span><br><span class="line"><span class="javascript">  app.arr.push(<span class="string">&#x27;foo&#x27;</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p>和指令一样，先判断，再写一个处理函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Compile</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 编译元素</span></span><br><span class="line">  <span class="function"><span class="title">compileElement</span>(<span class="params">node</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 遍历所有属性：检查是否存在指令和事件</span></span><br><span class="line">    <span class="keyword">const</span> attrs = node.attributes</span><br><span class="line">    <span class="built_in">Array</span>.from(attrs).forEach(<span class="function">(<span class="params">attr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(attr)</span><br><span class="line">      <span class="comment">// 例如：v-text=&quot;counter&quot;</span></span><br><span class="line">      <span class="comment">// attrName就是v-text</span></span><br><span class="line">      <span class="comment">// expression就是counter</span></span><br><span class="line">      <span class="keyword">const</span> attrName = attr.name</span><br><span class="line">      <span class="keyword">const</span> expression = attr.value</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 只处理动态值</span></span><br><span class="line">      <span class="comment">// 指令 v-</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.isDirective(attrName)) &#123;</span><br><span class="line">        <span class="comment">// 希望执行一个指令处理函数</span></span><br><span class="line">        <span class="keyword">const</span> directive = attrName.substring(<span class="number">2</span>)</span><br><span class="line">        <span class="comment">// 如果存在这个指令对应的函数就执行，比如v-text就执行text()</span></span><br><span class="line">        <span class="built_in">this</span>[directive] &amp;&amp; <span class="built_in">this</span>[directive](node, expression)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 判断事件</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.isEvent(attrName)) &#123;</span><br><span class="line">        <span class="keyword">const</span> event = attrName.substring(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">this</span>.eventHandler(node, expression, event)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">eventHandler</span>(<span class="params">node, expression, event</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> fn = <span class="built_in">this</span>.$vm.$options.methods &amp;&amp; <span class="built_in">this</span>.$vm.$options.methods[expression]</span><br><span class="line">    node.addEventListener(event, fn.bind(<span class="built_in">this</span>.$vm))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 判断事件</span></span><br><span class="line">  <span class="function"><span class="title">isEvent</span>(<span class="params">attrName</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> attrName.startsWith(<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><p>测试一下</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-html</span>=<span class="string">&quot;desc&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onClick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">const</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line">    ...</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">onClick</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">&#x27;barrrrr&#x27;</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h3><p>v-model 实际上是语法糖，解决 value 设定和事件监听</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// v-model</span></span><br><span class="line"><span class="function"><span class="title">model</span>(<span class="params">node, expression</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// update方法只完成赋值和更新</span></span><br><span class="line">  <span class="built_in">this</span>.update(node, expression, <span class="string">&#x27;model&#x27;</span>)</span><br><span class="line">  <span class="comment">// 事件监听</span></span><br><span class="line">  node.addEventListener(<span class="string">&#x27;input&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 将新的值赋值给数据</span></span><br><span class="line">    <span class="built_in">this</span>.$vm[expression] = e.target.value</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">modelUpdater</span>(<span class="params">node, val</span>)</span> &#123;</span><br><span class="line">  <span class="comment">// 给表单元素赋值</span></span><br><span class="line">  node.value = val</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里只考虑了 input，其他不考虑</p><p>测试代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;desc&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><em>全文完</em></p><p>项目地址<a href="https://github.com/YongMaple/my-vue">https://github.com/YongMaple/my-vue</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;项目地址见本文结尾&quot;&gt;&lt;a href=&quot;#项目地址见本文结尾&quot; class=&quot;headerlink&quot; title=&quot;项目地址见本文结尾&quot;&gt;&lt;/a&gt;&lt;em&gt;项目地址见本文结尾&lt;/em&gt;&lt;/h5&gt;&lt;h3 id=&quot;MVVM-框架的三要素：数据响应式、模板引擎及其渲染&quot;&gt;</summary>
      
    
    
    
    <category term="前端" scheme="https://yongmaple.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://yongmaple.com/tags/Vue/"/>
    
    <category term="手撕源码" scheme="https://yongmaple.com/tags/%E6%89%8B%E6%92%95%E6%BA%90%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Vue全家桶&amp;原理</title>
    <link href="https://yongmaple.com/2021/04/01/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6&amp;%E5%8E%9F%E7%90%86/"/>
    <id>https://yongmaple.com/2021/04/01/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6&amp;%E5%8E%9F%E7%90%86/</id>
    <published>2021-04-01T19:47:56.000Z</published>
    <updated>2021-04-26T06:21:28.336Z</updated>
    
    <content type="html"><![CDATA[<h5 id="项目地址见本文结尾"><a href="#项目地址见本文结尾" class="headerlink" title="项目地址见本文结尾"></a><em>项目地址见本文结尾</em></h5><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>创建一个新的项目，<code>vue create vue-study</code>，选择 vue2，添加 vue-router 和 vuex，<code> vue add router</code>、<code>vue add vux </code></p><h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><p><em>Vue router 是 Vue.js 官方的路由管理器。它和 Vue 的核心深度集成，让构建单页面应用易如反掌</em></p><h4 id="核心步骤"><a href="#核心步骤" class="headerlink" title="核心步骤"></a>核心步骤</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/router/index.js</span></span><br><span class="line"><span class="comment">// 使用vue-router插件</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="comment">// 创建Router实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"><span class="comment">// 在根组件上添加该实例</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"><span class="comment">// src/App.vue</span></span><br><span class="line"><span class="comment">// 添加路由视图</span></span><br><span class="line">&lt;router-view/&gt;</span><br><span class="line"><span class="comment">// 导航</span></span><br><span class="line">&lt;router-link to=<span class="string">&quot;/&quot;</span>&gt;Home&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to=<span class="string">&quot;/about&quot;</span>&gt;About&lt;/router-link&gt;</span><br><span class="line"><span class="built_in">this</span>.$router.push(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="built_in">this</span>.$router.push(<span class="string">&#x27;/about&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h4><ul><li>实现一个插件<ul><li>实现 VueRouter 类<ul><li>处理路由选项</li><li>监控 url 变化，hashchange</li><li>响应这个变化</li></ul></li><li>实现 install 方法<ul><li>$router注册（this.$router.push）</li><li>两个全局组件（router-link,router-view）</li></ul></li></ul></li></ul><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>为了检测后续成果，直接在<code>src/router/</code>下新建一个<code>vuerouter.js</code>，并将<code>src/router/index.js</code>中的<code>import VueRouter from &#39;vue-router&#39;</code>改为<code>import VueRouter from &#39;./vuerouter&#39;</code>。如果实现了目标，可以直接查看效果。</p><p>要实现一个 Vue 插件，要给当前类实现一个静态的<code>install</code>方法，<code>install</code>方法将来会被 vue 调用，该函数接收 Vue 构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">VueRouter.install = <span class="function"><span class="keyword">function</span> (<span class="params">_Vue</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> VueRouter</span><br></pre></td></tr></table></figure><p>为了组件中能够使用<code>this.$router.push()</code>，需要挂载路由器实例$router</p><p>需要实现<code>Vue.prototype.$router = router</code> router 在<code>/src/router/index.js</code>的<code>const router = new VueRouter(&#123; routes &#125;)</code>中传入</p><p>但是<code>Vue.use(VueRouter)</code>时会立刻调用<code>install</code>方法，在 install 执行时 router 实例还不存在 所以需要使用<code>Vue.mixin</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Vue</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// install.call(VueRouter, Vue) install调用时，如此传入_Vue</span></span><br><span class="line">VueRouter.install = <span class="function"><span class="keyword">function</span> (<span class="params">_Vue</span>) </span>&#123;</span><br><span class="line">  Vue = _Vue</span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 这些代码延迟到了组件实例化的时候才执行，这时就可以获取到组件选项了</span></span><br><span class="line">      <span class="comment">// 这些代码会在所有组件中都执行，但是只有在根实例中才有router，所以只在根实例中才执行如下代码</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.$options.router) &#123;</span><br><span class="line">        Vue.prototype.$router = <span class="built_in">this</span>.$options.router</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> VueRouter</span><br></pre></td></tr></table></figure><p>此时如果运行项目，会报错<code>Unknown custom element: &lt;router-link&gt;</code>和<code>Unknown custom element: &lt;router-view&gt;</code></p><h5 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h5><p>注册全局组件<code>router-view</code>和<code>router-link</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Vue</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// install.call(VueRouter, Vue) install调用时，如此传入_Vue</span></span><br><span class="line">VueRouter.install = <span class="function"><span class="keyword">function</span>(<span class="params">_Vue</span>) </span>&#123;</span><br><span class="line">  Vue = _Vue</span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  Vue.component(<span class="string">&quot;router-link&quot;</span>, &#123;&#125;)</span><br><span class="line">  Vue.component(<span class="string">&quot;router-view&quot;</span>, &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> VueRouter</span><br></pre></td></tr></table></figure><p>为组件添加<code>template</code>会报错，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;router-link&#x27;</span>, &#123;</span><br><span class="line">  template: <span class="string">&#x27;&lt;a&gt;xxxx&lt;/a&gt;&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Vue warn]: You are <span class="keyword">using</span> the runtime-<span class="keyword">only</span> build <span class="keyword">of</span> Vue <span class="keyword">where</span> the <span class="keyword">template</span> compiler <span class="keyword">is</span> <span class="keyword">not</span> available. Either pre-compile the templates <span class="keyword">into</span> render <span class="keyword">functions</span>, <span class="keyword">or</span> use the compiler-included build.</span><br></pre></td></tr></table></figure><p>当前环境是 webpack 的预打包版本，不包含编译器，所有不支持<code>template</code></p><p>改为用<code>render(h)&#123;&#125;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;router-link&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// h是createElement，最终返回一个vdom</span></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;router-link&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(<span class="string">&#x27;router-view&#x27;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;router-view&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现在可以在页面上看到结果了<br><img src="/2021/04/01/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6&%E5%8E%9F%E7%90%86/1.png"></p><p>使用<code>router-link</code>时，正常是这么写的<code>&lt;router-link to=&quot;/about&quot;&gt;about&lt;/router-link&gt;</code></p><p>现在需要拿到<code>about</code>来替换上面占位的<code>router-link</code></p><p>只需要使用<code>this.$slots.default</code>即可</p><p>还需要加上<code>to</code>属性，所以需要从<code>props</code>中传进来</p><p>这里实现<code>hash</code>的写法，给<code>href</code>添加<code>#</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;router-link&#x27;</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    to: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">&#x27;a&#x27;</span>, &#123; <span class="attr">attrs</span>: &#123; <span class="attr">href</span>: <span class="string">`#<span class="subst">$&#123;<span class="built_in">this</span>.to&#125;</span>`</span> &#125; &#125;, <span class="built_in">this</span>.$slots.default)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里也可以支持 jsx 的写法，不过不推荐，因为对当前执行环境有依赖，希望不配置 jsx 也能使用</p><p>jsx 写法如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;router-link&#x27;</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    to: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;</span>`#$&#123;<span class="attr">this.to</span>&#125;`&#125;&gt;</span>&#123;this.$slots.default&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>🎉 router-link 完成</p><h5 id="router-view"><a href="#router-view" class="headerlink" title="router-view"></a>router-view</h5><p>现在如果直接把组件拿过来，render 出来，就可以在页面上展示出来了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../views/Home.vue&#x27;</span></span><br><span class="line">...</span><br><span class="line">  Vue.component(<span class="string">&quot;router-view&quot;</span>, &#123;</span><br><span class="line">    <span class="comment">// h函数可以接收的参数除了字符串，也可以是组件的配置对象</span></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> h(Home);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在创建实例的时候，传进来的<code>routes</code>里面包含了组件和 url 的映射关系<code>new VueRouter(&#123;routes: [...]&#125;)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 保存一下，以便在router-view中拿，通过this.$router.$options拿</span></span><br><span class="line">    <span class="comment">// options就是 new VueRouter(&#123;routes: [...]&#125;) 里面传过来的</span></span><br><span class="line">    <span class="built_in">this</span>.$options = options</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在获取当前地址<code>current</code>，去掉 hash 的#就是了。<code>window.location.hash.slice(1) || &quot;/&quot;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">this</span>.current = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>) || <span class="string">&quot;/&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">  Vue.component(<span class="string">&quot;router-view&quot;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 获取当前路由对应的组件</span></span><br><span class="line">      <span class="keyword">let</span> component = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">const</span> route = <span class="built_in">this</span>.$router.$options.routes.find(</span><br><span class="line">        (route) =&gt; route.path === <span class="built_in">this</span>.$router.current</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">if</span> (route) &#123;</span><br><span class="line">        component = route.component</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> h(component);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>现在打开页面，会发现刷新页面可以改变页面，点击路由却不会改变</p><ol><li>还没有监听的 hash 的改变</li><li>render 函数只执行一次，需要响应式</li></ol><p>监听 hash，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 监听hash变化</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.current = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里申明响应式属性的方式：</p><ol><li><code>new Vue(&#123;data: &#123; current: ... &#125;&#125;)</code></li><li><code>Vue.util.defineReactive</code>，这是隐藏 api</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 把current作为响应式数据</span></span><br><span class="line">    <span class="comment">// 将来发生变化，router-view的render函数能够再次执行</span></span><br><span class="line">    <span class="keyword">const</span> initial = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>) || <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    Vue.util.defineReactive(<span class="built_in">this</span>, <span class="string">&#x27;current&#x27;</span>, initial)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.current = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🎉router-view 完成</p><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><p><em>Vuex 集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以可预测的方式发生变化</em></p><h4 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h4><ul><li>实现插件<ul><li>实现 Store 类<ul><li>维持一个响应式状态 state</li><li>实现 commit()</li><li>实现 dispatch()</li><li>getters</li></ul></li><li>挂载$store</li></ul></li></ul><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><p>和 router 一样，先把<code>src/store/index.js</code>中的引用改掉<code>import Vuex from &#39;./vuex.js&#39;</code></p><p>并添加检测成果逻辑</p><p><code>/src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;./vuex.js&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    counter: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      state.counter++</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">&#x27;add&#x27;</span>)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>src/App.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">&quot;$store.commit(&#x27;add&#x27;)&quot;</span>&gt;</span>commit:&#123;&#123; $store.state.counter &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">&quot;$store.dispatch(&#x27;add&#x27;)&quot;</span>&gt;</span>dispatch:&#123;&#123; $store.state.counter &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在正常使用时，使用<code>new Vuex.Store</code>的方式，所以区别于 router 如下写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">install</span>(<span class="params">_Vue</span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 导出的对象才是Vuex</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; Store, install &#125;</span><br></pre></td></tr></table></figure><p>和 router 一样，挂载$store</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Vue</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">install</span>(<span class="params">_Vue</span>) </span>&#123;</span><br><span class="line">  Vue = _Vue</span><br><span class="line">  <span class="comment">// 挂载$store</span></span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.$options.store) &#123;</span><br><span class="line">        Vue.prototype.$store = <span class="built_in">this</span>.$options.store</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导出的对象才是Vuex</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; Store, install &#125;</span><br></pre></td></tr></table></figure><p>添加响应式属性 state</p><p>在这里不能使用<code>Vue.set(this, &#39;xxx&#39;, &#123;&#125;)</code>，因为 Vue.set 是给响应式对象动态添加一个属性，这里的 this 不是一个响应式对象</p><p>router 已经用过<code>Vue.util.defineReactive</code>，这里用<code>new Vue()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 保存选项</span></span><br><span class="line">    <span class="built_in">this</span>.$options = options</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应式操作</span></span><br><span class="line">    <span class="built_in">this</span>.state = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      data: options.state,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在直接给用户暴露了 state，用户可以直接接触到 Vue 实例，需要把 Vue 实例藏起来，让用户不能直接修改 state，而是通过 commit、dispatch 的方式修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 保存选项</span></span><br><span class="line">    <span class="built_in">this</span>.$options = options</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应式操作</span></span><br><span class="line">    <span class="built_in">this</span>._vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      data: &#123;</span><br><span class="line">        <span class="comment">// 加上$$，既要对state做响应式，还不做代理</span></span><br><span class="line">        $$state: options.state,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title">state</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>._vm)</span><br><span class="line">    <span class="comment">// _data和$data是一回事</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._vm._data.$$state</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title">state</span>(<span class="params">v</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;请使用replaceState重置状态&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台打印_vm</p><p><img src="/2021/04/01/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6&%E5%8E%9F%E7%90%86/2.jpg"></p><p><code>__ob__</code>表示这是一个响应式对象</p><p>同时，_vm 上并没有$state，加上$之后$state 被隐藏起来了，这是 Vue 内部约定</p><p>实现 commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 保存mutations</span></span><br><span class="line">  <span class="built_in">this</span>._mutations = options.mutations</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type 调用的mutation的名字 payload 参数</span></span><br><span class="line"><span class="function"><span class="title">commit</span>(<span class="params">type, payload</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> entry = <span class="built_in">this</span>._mutations[type]</span><br><span class="line">  <span class="keyword">if</span> (!entry) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;unknown mutation&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  entry(<span class="built_in">this</span>.state, payload)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现 dispath</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 保存actions</span></span><br><span class="line">  <span class="built_in">this</span>._actions = options.actions</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">dispatch</span>(<span class="params">type, payload</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> entry = <span class="built_in">this</span>._actions[type]</span><br><span class="line">  <span class="keyword">if</span> (!entry) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;unknown action&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 使用时如下： add(&#123; commit, dispatch, state, rootState ...&#125;) &#123;&#125;</span></span><br><span class="line">  <span class="comment">// 就是store实例，所以传this</span></span><br><span class="line">  entry(<span class="built_in">this</span>, payload)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在 commit 可以正常使用，dispatch 会报错</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught TypeError: Cannot <span class="keyword">read</span> <span class="keyword">property</span><span class="title"> </span>&#x27;_mutations&#x27; of undefined</span><br></pre></td></tr></table></figure><p>这是因为 this 指向问题</p><p>这里锁死上下文</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 绑定commit和dispatch上下文为store实例</span></span><br><span class="line">  <span class="built_in">this</span>.commit = <span class="built_in">this</span>.commit.bind(<span class="built_in">this</span>)</span><br><span class="line">  <span class="built_in">this</span>.dispatch = <span class="built_in">this</span>.dispatch.bind(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="实现-getters"><a href="#实现-getters" class="headerlink" title="实现 getters"></a>实现 getters</h4><p>同样先添加检验的代码</p><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> |</span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/about&quot;</span>&gt;</span>About<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">&quot;$store.commit(&#x27;add&#x27;)&quot;</span>&gt;</span>commit:&#123;&#123; $store.state.counter &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> @<span class="attr">click</span>=<span class="string">&quot;$store.dispatch(&#x27;add&#x27;)&quot;</span>&gt;</span>dispatch:&#123;&#123; $store.state.counter &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>doubleCounter:&#123;&#123; $store.getters.doubleCounter &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;./vuex.js&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    counter: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      state.counter++</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">&#x27;add&#x27;</span>)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;&#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    <span class="function"><span class="title">doubleCounter</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.counter * <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>和上面一样，先保存 getters</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">this</span>._getters = options.getters</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 computed 来处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应式操作</span></span><br><span class="line"><span class="built_in">this</span>._vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    <span class="comment">// 加上$$，既要对state做响应式，还不做代理</span></span><br><span class="line">    $$state: options.state,</span><br><span class="line">  &#125;,</span><br><span class="line">  computed,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在 Vue 里<code>computed</code>应该是一个对象，key 是没有参数的函数</p><p>先定义一个 computed 选项，再给用户暴露一个 getters</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 定义computed选项</span></span><br><span class="line">    <span class="keyword">const</span> computed = &#123;&#125;</span><br><span class="line">    <span class="comment">// 给用户暴露getters</span></span><br><span class="line">    <span class="built_in">this</span>.getters = &#123;&#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历<code>this._getters</code>执行</p><p><code>this._getters</code>是这样的结构<code>&#123;doubleCounter(state) &#123;&#125;&#125;</code>，但是需要的是无参数的函数，所以需要封装一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 保存getters</span></span><br><span class="line">    <span class="built_in">this</span>._getters = options.getters</span><br><span class="line">    <span class="comment">// 定义computed选项</span></span><br><span class="line">    <span class="keyword">const</span> computed = &#123;&#125;</span><br><span class="line">    <span class="comment">// 给用户暴露getters</span></span><br><span class="line">    <span class="built_in">this</span>.getters = &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> store = <span class="built_in">this</span></span><br><span class="line">    <span class="comment">// this._getters =&gt; &#123;doubleCounter(state) &#123;&#125;&#125;</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(<span class="built_in">this</span>._getters).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 获取用户定义的getter</span></span><br><span class="line">      <span class="comment">// 直接使用this._getters会有指向问题，所以定义了store</span></span><br><span class="line">      <span class="keyword">const</span> fn = store._getters[key]</span><br><span class="line">      <span class="comment">// 转换为computed可以使用的无参数形式</span></span><br><span class="line">      computed[key] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fn(store.state)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终用户访问时，只能是只读的，所以为 getters 定义只读属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this._getters =&gt; &#123;doubleCounter(state) &#123;&#125;&#125;</span></span><br><span class="line"><span class="built_in">Object</span>.keys(<span class="built_in">this</span>._getters).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取用户定义的getter</span></span><br><span class="line">  <span class="keyword">const</span> fn = store._getters[key]</span><br><span class="line">  <span class="comment">// 转换为computed可以使用的无参数形式</span></span><br><span class="line">  computed[key] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn(store.state)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 为getters定义只读属性</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(store.getters, key, &#123;</span><br><span class="line">    get: <span class="function">() =&gt;</span> store._vm[key],</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>🎉getters 完成</p><h4 id="解决路由嵌套"><a href="#解决路由嵌套" class="headerlink" title="解决路由嵌套"></a>解决路由嵌套</h4><p>还是先写个验证，<code>/src/router/index.js</code>中改写<code>about</code>，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;About&#x27;</span>,</span><br><span class="line">  <span class="comment">// route level code-splitting</span></span><br><span class="line">  <span class="comment">// this generates a separate chunk (about.[hash].js) for this route</span></span><br><span class="line">  <span class="comment">// which is lazy-loaded when the route is visited.</span></span><br><span class="line">  component: <span class="function">() =&gt;</span></span><br><span class="line">    <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &quot;about&quot; */</span> <span class="string">&#x27;../views/About.vue&#x27;</span>),</span><br><span class="line">  children: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/about/info&#x27;</span>,</span><br><span class="line">      component: &#123;</span><br><span class="line">        <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;info page&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>在<code>/src/views/About.vue</code>中添加<code>&lt;router-view /&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;about&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>This is an about page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先做 router-view 的深度标记</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;router-view&#x27;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 标记当前router-view深度</span></span><br><span class="line">    <span class="built_in">this</span>.$vnode.data.routerView = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> depth = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> parent = <span class="built_in">this</span>.$parent</span><br><span class="line">    <span class="keyword">while</span> (parent) &#123;</span><br><span class="line">      <span class="keyword">const</span> vnodeData = parent.$vnode &amp;&amp; parent.$vnode.data</span><br><span class="line">      <span class="keyword">if</span> (vnodeData) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vnodeData.routerView) &#123;</span><br><span class="line">          <span class="comment">// 说明当前parent是一个router-view</span></span><br><span class="line">          depth++</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      parent = parent.$parent</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取当前路由对应的组件</span></span><br><span class="line">    <span class="keyword">let</span> component = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">const</span> route = <span class="built_in">this</span>.$router.$options.routes.find(</span><br><span class="line">      (route) =&gt; route.path === <span class="built_in">this</span>.$router.current</span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">if</span> (route) &#123;</span><br><span class="line">      component = route.component</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h(component)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>路由匹配时获取代表深度层级的 matched 数组</p><p>改写<code>this.current</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 保存一下，以便在router-view中拿，通过this.$router.$options拿</span></span><br><span class="line">    <span class="comment">// options就是 new VueRouter(&#123;routes: [...]&#125;) 里面传过来的</span></span><br><span class="line">    <span class="built_in">this</span>.$options = options</span><br><span class="line">    <span class="comment">// 把current作为响应式数据</span></span><br><span class="line">    <span class="comment">// 将来发生变化，router-view的render函数能够再次执行</span></span><br><span class="line">    <span class="comment">// const initial = window.location.hash.slice(1) || &#x27;/&#x27;</span></span><br><span class="line">    <span class="comment">// Vue.util.defineReactive(this, &#x27;current&#x27;, initial)</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.current = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>) || <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    Vue.util.defineReactive(<span class="built_in">this</span>, <span class="string">&#x27;matched&#x27;</span>, [])</span><br><span class="line">    <span class="comment">// match方法可以递归遍历路由表，获取匹配关系的数组</span></span><br><span class="line">    <span class="built_in">this</span>.match()</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.current = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">match</span>(<span class="params"></span>)</span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>match 是一个递归方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="title">match</span>(<span class="params">routes</span>)</span> &#123;</span><br><span class="line">  routes = routes || <span class="built_in">this</span>.$options.routes</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 递归遍历</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> route <span class="keyword">of</span> routes) &#123;</span><br><span class="line">    <span class="keyword">if</span> (route.path === <span class="string">&#x27;/&#x27;</span> &amp;&amp; <span class="built_in">this</span>.current === <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.matched.push(route)</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// /about/info</span></span><br><span class="line">    <span class="keyword">if</span> (route.path !== <span class="string">&#x27;/&#x27;</span> &amp;&amp; <span class="built_in">this</span>.current.indexOf(route.path) !== -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.matched.push(route)</span><br><span class="line">      <span class="keyword">if</span> (route.children) &#123;</span><br><span class="line">        <span class="built_in">this</span>.match(route.children)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改获取组件的方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;router-view&#x27;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 标记当前router-view深度</span></span><br><span class="line">    <span class="built_in">this</span>.$vnode.data.routerView = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> depth = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> parent = <span class="built_in">this</span>.$parent</span><br><span class="line">    <span class="keyword">while</span> (parent) &#123;</span><br><span class="line">      <span class="keyword">const</span> vnodeData = parent.$vnode &amp;&amp; parent.$vnode.data</span><br><span class="line">      <span class="keyword">if</span> (vnodeData) &#123;</span><br><span class="line">        <span class="keyword">if</span> (vnodeData.routerView) &#123;</span><br><span class="line">          <span class="comment">// 说明当前parent是一个router-view</span></span><br><span class="line">          depth++</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      parent = parent.$parent</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取当前路由对应的组件</span></span><br><span class="line">    <span class="keyword">let</span> component = <span class="literal">null</span></span><br><span class="line">    <span class="comment">// const route = this.$options.routes.find(</span></span><br><span class="line">    <span class="comment">//   (route) =&gt; route.path === this.$router.current</span></span><br><span class="line">    <span class="comment">// )</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> route = <span class="built_in">this</span>.$router.matched[depth]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (route) &#123;</span><br><span class="line">      component = route.component</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> h(component)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>当 hashchange 时，清空 matched，并重新获取</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.current = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span><br><span class="line">  <span class="built_in">this</span>.matched = []</span><br><span class="line">  <span class="built_in">this</span>.match()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>🎉 完成路由嵌套</p><p><strong>全文结束</strong></p><p><em>项目地址：<a href="https://github.com/YongMaple/vue-study">https://github.com/YongMaple/vue-study</a></em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;项目地址见本文结尾&quot;&gt;&lt;a href=&quot;#项目地址见本文结尾&quot; class=&quot;headerlink&quot; title=&quot;项目地址见本文结尾&quot;&gt;&lt;/a&gt;&lt;em&gt;项目地址见本文结尾&lt;/em&gt;&lt;/h5&gt;&lt;h3 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=</summary>
      
    
    
    
    <category term="前端" scheme="https://yongmaple.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://yongmaple.com/tags/Vue/"/>
    
    <category term="手撕源码" scheme="https://yongmaple.com/tags/%E6%89%8B%E6%92%95%E6%BA%90%E7%A0%81/"/>
    
    <category term="vue-router" scheme="https://yongmaple.com/tags/vue-router/"/>
    
    <category term="vuex" scheme="https://yongmaple.com/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>Vite2工程化</title>
    <link href="https://yongmaple.com/2021/03/30/Vite2%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    <id>https://yongmaple.com/2021/03/30/Vite2%E5%B7%A5%E7%A8%8B%E5%8C%96/</id>
    <published>2021-03-30T16:18:49.000Z</published>
    <updated>2021-04-26T06:21:28.288Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Vite-是什么"><a href="#Vite-是什么" class="headerlink" title="Vite 是什么"></a>Vite 是什么</h4><p>Vite 是一个开发构建工具，开发中它利用浏览器<strong>native ES Module</strong>特性按需导入源码，预打包依赖。<br>特点：</p><ul><li>启动快</li><li>更新快</li></ul><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init @vitejs/app</span><br></pre></td></tr></table></figure><p>这里选择 vue</p><h4 id="将资源引入为-URL"><a href="#将资源引入为-URL" class="headerlink" title="将资源引入为 URL"></a>将资源引入为 URL</h4><p>服务时引入一个静态资源会返回解析后的公共路径：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析为地址</span></span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./assets/logo.png&#x27;</span> <span class="comment">// 输出/src/assets/logo.png</span></span><br></pre></td></tr></table></figure><p>使用这个路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;logo&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>可以打开 Chrome Network，看 App.vue，可以看到里面的地址是被解析后的公共路径</p><p><img src="/2021/03/30/Vite2%E5%B7%A5%E7%A8%8B%E5%8C%96/1.jpg"></p><h4 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h4><p>vite.config.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; resolve &#125; <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  ...</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: resolve(<span class="string">&#x27;./src&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;comps&#x27;</span>: resolve(<span class="string">&#x27;./src/components&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>App.vue</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&#x27;comps/HelloWorld.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Logo <span class="keyword">from</span> <span class="string">&#x27;@/assets/logo.png&#x27;</span></span><br></pre></td></tr></table></figure><p>启动时要用<code>npm run dev</code>，使用<code>vite</code>启动控制台会报错如下：</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[vite] Failed <span class="keyword">to</span> resolve <span class="built_in">module</span> <span class="keyword">import</span> <span class="string">&quot;@/assets/logo.png&quot;</span>. (imported <span class="keyword">by</span> /src/App.vue)</span><br></pre></td></tr></table></figure><p>style 中同样可以使用别名来引入图片等</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.logo</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">@/assets/logo.png</span>);</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="全局样式"><a href="#全局样式" class="headerlink" title="全局样式"></a>全局样式</h4><p>在 main.js 里引入</p><p>新建<code>/src/index.css</code>，把<code>App.vue</code>中的<code>#app &#123;&#125;</code>移入<code>index.css</code>，依然生效</p><h4 id="scoped-与-module-样式"><a href="#scoped-与-module-样式" class="headerlink" title="scoped 与 module 样式"></a>scoped 与 module 样式</h4><p>使用 scoped 时，元素会被强制加上<code>data-v-xxxx</code>，选择器的深度发生一些变化</p><p>使用 module 时，class 会 hash</p><p>两者相差不大，相对而言，module 可能更好一些</p><p>scoped 写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span> /&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">  .logo &#123;</span><br><span class="line"><span class="css">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">@/assets/logo.png</span>);</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>module 写法：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;$style.logo&quot;</span> /&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">module</span>&gt;</span></span><br><span class="line">  .logo &#123;</span><br><span class="line"><span class="css">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">@/assets/logo.png</span>);</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/03/30/Vite2%E5%B7%A5%E7%A8%8B%E5%8C%96/2.png" alt="scoped"></p><p><img src="/2021/03/30/Vite2%E5%B7%A5%E7%A8%8B%E5%8C%96/3.png" alt="module"></p><h4 id="加载模块化-css"><a href="#加载模块化-css" class="headerlink" title="加载模块化 css"></a>加载模块化 css</h4><p>约定，在名称与 css 之间加上 module，例如：<code>App.module.css</code></p><p>新建<code>src/App.module.css</code>，将<code>.logo &#123;&#125;</code>移入，改写<code>App.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">&quot;Vue logo&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;Logo&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">&quot;classes.logo&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HelloWorld</span> <span class="attr">msg</span>=<span class="string">&quot;Hello Vue 3 + Vite&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&#x27;comps/HelloWorld.vue&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Logo <span class="keyword">from</span> <span class="string">&#x27;@/assets/logo.png&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="comment">// 加载模块化css</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> classes <span class="keyword">from</span> <span class="string">&#x27;./App.module.css&#x27;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="使用-less-sass"><a href="#使用-less-sass" class="headerlink" title="使用 less/sass"></a>使用 less/sass</h4><p><code>npm i less -D</code></p><p>然后就可以直接用了，sass 同理</p><h4 id="postcss"><a href="#postcss" class="headerlink" title="postcss"></a>postcss</h4><p>只要在项目中添加<code>postcss.config.js</code>就可以了</p><p>添加需要的插件<code>npm i autoprefixer -D</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  plugins: [<span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>)],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="TS-整合"><a href="#TS-整合" class="headerlink" title="TS 整合"></a>TS 整合</h4><p>默认整合 ts，可以直接使用，<code>&lt;script lang=&quot;ts&quot;&gt;</code>即可，需要固定 ts 版本的话，在<code>package.json</code>的<code>devDependencies</code>中直接添加<code>&quot;typescript&quot;: &quot;4.1.5&quot;</code>即可</p><p>tsconfig.json 可以自行配置后放入项目即可</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;target&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;module&quot;</span>: <span class="string">&quot;esnext&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;strict&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">&quot;jsx&quot;</span>: <span class="string">&quot;preserve&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;moduleResolution&quot;</span>: <span class="string">&quot;node&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;types&quot;</span>: [<span class="string">&quot;vite/client&quot;</span>],</span><br><span class="line">    <span class="attr">&quot;isolatedModules&quot;</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;include&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;src/**/*.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;src/**/*.d.ts&quot;</span>,</span><br><span class="line">    <span class="string">&quot;src/**/*.tsx&quot;</span>,</span><br><span class="line">    <span class="string">&quot;src/**/*.vue&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tests/unit&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><p><code>vite.config.js</code>中添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  ...</span><br><span class="line">  server: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        target: <span class="string">&quot;***&quot;</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        rewrite: <span class="function">(<span class="params">path</span>) =&gt;</span> path.replace(<span class="regexp">/^\api/</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="数据-mock"><a href="#数据-mock" class="headerlink" title="数据 mock"></a>数据 mock</h4><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i mockjs -S</span><br><span class="line">npm i vite-plugin-mock -D</span><br></pre></td></tr></table></figure><p>引入插件，<code>vite.config.js</code>中添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; viteMockServe &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-mock&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  ...</span><br><span class="line">  plugins: [ viteMockServe(&#123;&#125;) ]</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>项目下创建<code>mock</code>文件夹，文件夹下就可以创建 mock 数据了，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    url: <span class="string">&#x27;/api/users&#x27;</span>,</span><br><span class="line">    method: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    response: <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        code: <span class="number">0</span>,</span><br><span class="line">        data: [&#123; <span class="attr">name</span>: <span class="string">&#x27;foo&#x27;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&#x27;bar&#x27;</span> &#125;],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h4><p>使用<code>eslint + prettier</code>规范代码</p><p>添加如下依赖：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@typescript-eslint/eslint-plugin&quot;</span>: <span class="string">&quot;^4.15.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@typescript-eslint/parser&quot;</span>: <span class="string">&quot;^4.15.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vue/eslint-config-prettier&quot;</span>: <span class="string">&quot;^6.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vue/eslint-config-typescript&quot;</span>: <span class="string">&quot;^7.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vuedx/typescript-plugin-vue&quot;</span>: <span class="string">&quot;^0.6.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span>: <span class="string">&quot;^7.20.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint-plugin-prettier&quot;</span>: <span class="string">&quot;^3.3.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint-plugin-vue&quot;</span>: <span class="string">&quot;^7.6.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;prettier&quot;</span>: <span class="string">&quot;^2.2.1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>添加配置文件<code>.eslintrc.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">    es2021: <span class="literal">true</span>,</span><br><span class="line">    node: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">extends</span>: [</span><br><span class="line">    <span class="string">&#x27;plugin:vue/vue3-recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;eslint:recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@vue/typescript/recommended&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@vue/prettier&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@vue/prettier/@typescript-eslint&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    ecmaVersion: <span class="number">2021</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">&#x27;no-unused-vars&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@typescript-eslint/no-unused-vars&#x27;</span>: <span class="string">&#x27;off&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>package.json 中添加如下命令</p><p><code>&quot;lint&quot;: &quot;eslint --ext .ts,vue src/** --no-error-on-unmatched-pattern&quot;</code></p><p><code>&quot;lint:fix&quot;: &quot;eslint --ext .ts,vue src/** --no-error-on-unmatched-pattern --fix&quot;</code></p><h4 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h4><p>添加依赖</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;jest&quot;</span>: <span class="string">&quot;^26.6.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@types/jest&quot;</span>: <span class="string">&quot;^26.0.20&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;vue-jest&quot;</span>: <span class="string">&quot;^5.0.0-alpha.7&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;babel-jest&quot;</span>: <span class="string">&quot;^26.6.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@babel/preset-env&quot;</span>: <span class="string">&quot;^7.12.17&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vue/test-utils&quot;</span>: <span class="string">&quot;^2.0.0-beta.9&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;ts-jest&quot;</span>: <span class="string">&quot;^26.5.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@babel/preset-typescript&quot;</span>: <span class="string">&quot;^7.12.17&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建配置文件<code>jest.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  transform: &#123;</span><br><span class="line">    <span class="comment">// 用 vue-jest 处理 *.vue 文件</span></span><br><span class="line">    <span class="string">&#x27;^.+\\.vue$&#x27;</span>: <span class="string">&#x27;vue-jest&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;^.+\\.jsx?$&#x27;</span>: <span class="string">&#x27;babel-jest&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;^.+\\.tsx?$&#x27;</span>: <span class="string">&#x27;ts-jest&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// support alias</span></span><br><span class="line">  moduleNameMapper: &#123;</span><br><span class="line">    <span class="string">&#x27;^@/components(.*)$&#x27;</span>: <span class="string">&#x27;&lt;rootDir&gt;/src/components$1&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  testMatch: [<span class="string">&#x27;**/test/unit/**/*.[jt]s?(x)&#x27;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>tsconfig.json</code>中需要加上</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;types&quot;</span>: [<span class="string">&quot;vite/client&quot;</span>, <span class="string">&quot;jest&quot;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>package.json 中添加单测命令</p><p><code>&quot;test:unit&quot;: &quot;jest&quot;</code></p><p>例子：</p><p><code>/test/unit/example.spec.ts</code></p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&#x27;@/components/HelloWorld.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; shallowMount &#125; <span class="keyword">from</span> <span class="string">&#x27;@vue/test-utils&#x27;</span></span><br><span class="line"></span><br><span class="line">describe(<span class="string">&#x27;aaa&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  test(<span class="string">&#x27;should&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> wrapper = shallowMount(HelloWorld, &#123;</span><br><span class="line">      props: &#123;</span><br><span class="line">        msg: <span class="string">&#x27;hello,vue3&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">    expect(wrapper.test()).toMatch(<span class="string">&#x27;hello,vue3&#x27;</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>添加<code>babel.condig.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  presets: [</span><br><span class="line">    [<span class="string">&#x27;@babel/preset-env&#x27;</span>, &#123; <span class="attr">targets</span>: &#123; <span class="attr">node</span>: <span class="string">&#x27;current&#x27;</span> &#125; &#125;],</span><br><span class="line">    <span class="string">&#x27;@babel/preset-typescript&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 git 提交时 lint 和单测</p><p>添加依赖<code>npm i lint-staged yorkie -D</code></p><p>package.json 添加配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;gitHooks&quot;: &#123;</span><br><span class="line">  &quot;pre-commit&quot;: &quot;lint-staged&quot;,</span><br><span class="line">  &quot;pre-push&quot;: &quot;npm run test:unit&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;lint-staged&quot;: &#123;</span><br><span class="line">  &quot;*.&#123;js,vue&#125;&quot;: &quot;eslint --fix&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>全文完</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Vite-是什么&quot;&gt;&lt;a href=&quot;#Vite-是什么&quot; class=&quot;headerlink&quot; title=&quot;Vite 是什么&quot;&gt;&lt;/a&gt;Vite 是什么&lt;/h4&gt;&lt;p&gt;Vite 是一个开发构建工具，开发中它利用浏览器&lt;strong&gt;native ES Modu</summary>
      
    
    
    
    <category term="前端" scheme="https://yongmaple.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vite" scheme="https://yongmaple.com/tags/Vite/"/>
    
  </entry>
  
  <entry>
    <title>React中的nextTick</title>
    <link href="https://yongmaple.com/2021/03/29/React%E4%B8%AD%E7%9A%84nextTick/"/>
    <id>https://yongmaple.com/2021/03/29/React%E4%B8%AD%E7%9A%84nextTick/</id>
    <published>2021-03-29T15:57:09.000Z</published>
    <updated>2021-04-26T06:21:28.288Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在项目开发中，使用 AntV-L7 的 Draw-Control，需要实现在弹框中地图画圈框选范围。<br>使用了 hooks 的写法，在弹框出现后地图正常显示，点击画圈或其他绘图功能后，绘图的 canvas 只有约一半大小。<br>思考后认为应该是在<code>new DrawControl()</code>时，useState 还没执行赋值，错误范例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleDrawCircle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  setShowModal(<span class="literal">true</span>)</span><br><span class="line">  scene = <span class="keyword">new</span> Scene(&#123;</span><br><span class="line">    id: <span class="string">&#x27;drawCircleWrap&#x27;</span>,</span><br><span class="line">    map: <span class="keyword">new</span> GaodeMap(&#123;</span><br><span class="line">      style: <span class="string">&#x27;dark&#x27;</span>,</span><br><span class="line">      center: [<span class="number">120.190494</span>, <span class="number">30.189643</span>],</span><br><span class="line">      pitch: <span class="number">0</span>,</span><br><span class="line">      zoom: <span class="number">4</span>,</span><br><span class="line">      token: GAODE_TOKEN,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;)</span><br><span class="line">  scene.on(<span class="string">&#x27;loaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    drawControl = <span class="keyword">new</span> DrawControl(scene, &#123;</span><br><span class="line">      position: <span class="string">&#x27;topright&#x27;</span>,</span><br><span class="line">      layout: <span class="string">&#x27;horizontal&#x27;</span>,</span><br><span class="line">      controls: &#123;</span><br><span class="line">        point: <span class="literal">false</span>,</span><br><span class="line">        line: <span class="literal">false</span>,</span><br><span class="line">        polygon: <span class="literal">false</span>,</span><br><span class="line">        circle: <span class="literal">true</span>,</span><br><span class="line">        rect: <span class="literal">false</span>,</span><br><span class="line">        <span class="keyword">delete</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    scene.addControl(drawControl)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照以前写Vue的经验，只要用nextTick就能解决了，但是搜了一下，React中没有nextTick，但是有两种替代方式</p><ol><li><code>setTimeout(() =&gt; &#123;&#125;, 0)</code></li><li><code>useEffect(() =&gt; &#123;&#125;, [showModal])</code><br>两种方式在我看来都不是很好看……最后还是决定用<code>setTimeout</code>，因为用<code>useEffect</code>还需要判断下showModal是否为true</li></ol><p>如果用Class的写法，也可以这样<code>setState(&#123;&#125;,() =&gt; &#123;&#125;)</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;在项目开发中，使用 AntV-L7 的 Draw-Control，需要实现在弹框中地图画圈框选范围。&lt;br&gt;使用了 hooks 的写法，在弹</summary>
      
    
    
    
    <category term="前端" scheme="https://yongmaple.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="AntV" scheme="https://yongmaple.com/tags/AntV/"/>
    
    <category term="React" scheme="https://yongmaple.com/tags/React/"/>
    
    <category term="nextTick" scheme="https://yongmaple.com/tags/nextTick/"/>
    
    <category term="hooks" scheme="https://yongmaple.com/tags/hooks/"/>
    
  </entry>
  
  <entry>
    <title>Vue和React设计思路</title>
    <link href="https://yongmaple.com/2021/03/29/Vue%E5%92%8CReact%E6%AF%94%E8%BE%83/"/>
    <id>https://yongmaple.com/2021/03/29/Vue%E5%92%8CReact%E6%AF%94%E8%BE%83/</id>
    <published>2021-03-29T07:44:09.000Z</published>
    <updated>2021-04-26T06:21:28.340Z</updated>
    
    <content type="html"><![CDATA[<h4 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h4><ul><li>Vue1<br>只有响应式，没有vdom，所有的都是通知的机制</li><li>React15<br>Class Component</li><li>Vue2<br>引入了vdom</li><li>React16<br>引入了Fiber和Hooks</li><li>Vue3 &amp; React17</li></ul><h4 id="Vue3-amp-React17"><a href="#Vue3-amp-React17" class="headerlink" title="Vue3 &amp; React17"></a>Vue3 &amp; React17</h4><ul><li>Vue OptionApi<ol><li>优点：结构清晰，好理解，数据去data，方法去methods等，易学。</li><li>缺点：就是反复横跳，在处理一个逻辑时，需要在template、data、methods等反复操作。mixins有个问题，可能命名冲突，同时mixins时this是个黑盒，里面有什么是不知道的，ts支持差</li></ol></li><li>Vue CompositionApi<ol><li>缺点：难看，不如Option简单。return很蛋疼，return也要反复横跳</li><li>优点：</li></ol><ul><li>可以做tree-shaking，比如没有用到computed，代码build的时候就会删掉Vue3里面的computed的代码</li><li>组件可以任意拆分 方便组合 逻辑都是函数，组合优于继承</li><li>命名冲突了只要:起个别名就行了</li></ul></li><li>渐进式更新ref api<ul><li>setup写在script，解决return等冗余</li><li>方言：<code>let x = ref(0)</code> =&gt; <code>ref: x = 1</code>使用时可以不用写<code>x.value</code></li></ul></li><li>composition和hooks的区别<ul><li>语法上比较像，但底层设计上区别很大</li><li>hooks中例如useState每次render都会执行，所以有严格的顺序要求，不能写在if里面</li><li>composition后续靠的是响应式通知</li><li>都采用组合的形式，函数式的组件是未来</li></ul></li><li>vue 响应式 + vdom<ul><li>响应式： 数据变了通知你</li><li>vdom： 数据变了你不知道哪里变了，需要算一次diff，才知道变化</li><li>vue1只有响应式，项目大了之后，响应式对象太多，导致卡顿</li></ul></li><li>react纯vdom<ul><li>vdom树太大，diff时间超过16.6ms，会导致卡顿</li></ul></li><li>React Class =&gt; hooks</li></ul><h4 id="JSX-和-Template"><a href="#JSX-和-Template" class="headerlink" title="JSX 和 Template"></a>JSX 和 Template</h4><p>未完待续</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;发展历程&quot;&gt;&lt;a href=&quot;#发展历程&quot; class=&quot;headerlink&quot; title=&quot;发展历程&quot;&gt;&lt;/a&gt;发展历程&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;Vue1&lt;br&gt;只有响应式，没有vdom，所有的都是通知的机制&lt;/li&gt;
&lt;li&gt;React15&lt;br&gt;Clas</summary>
      
    
    
    
    <category term="前端" scheme="https://yongmaple.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="React" scheme="https://yongmaple.com/tags/React/"/>
    
    <category term="Vue" scheme="https://yongmaple.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>设置iTerm2免密登陆ssh远程服务器</title>
    <link href="https://yongmaple.com/2021/03/27/%E8%AE%BE%E7%BD%AEiTerm2%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86ssh%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://yongmaple.com/2021/03/27/%E8%AE%BE%E7%BD%AEiTerm2%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86ssh%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2021-03-27T15:51:52.000Z</published>
    <updated>2021-04-26T06:21:28.340Z</updated>
    
    <content type="html"><![CDATA[<p>转载自<a href="https://zhuanlan.zhihu.com/p/180500618">https://zhuanlan.zhihu.com/p/180500618</a></p><p>原文中代码存在bug，已修改，如下：</p><span id="more"></span><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/expect -f</span></span><br><span class="line"><span class="comment">#trap sigwinch spawned</span></span><br><span class="line">  <span class="built_in">trap</span> &#123;</span><br><span class="line">    <span class="built_in">set</span> rows [stty rows]</span><br><span class="line">    <span class="built_in">set</span> cols [stty columns]</span><br><span class="line">    stty rows <span class="variable">$rows</span> columns <span class="variable">$cols</span> &lt; <span class="variable">$spawn_out</span>(slave,name)</span><br><span class="line">   &#125; WINCH</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> user username</span><br><span class="line"><span class="built_in">set</span> host 0.0.0.0</span><br><span class="line"><span class="built_in">set</span> password keys</span><br><span class="line"><span class="built_in">set</span> timeout -1</span><br><span class="line">spawn ssh -XY <span class="variable">$user</span>@<span class="variable">$host</span></span><br><span class="line">expect <span class="string">&quot;*password:*&quot;</span></span><br><span class="line">send <span class="string">&quot;<span class="variable">$password</span>\r&quot;</span></span><br><span class="line">interact</span><br><span class="line">expect eof</span><br></pre></td></tr></table></figure><p>简述下逻辑就是，</p><ol><li>在本地你想存在命令的地方建个文件夹</li><li>把上面的代码写好，保存进去</li><li>然后在iterm2里配置好</li><li>之后iterm2就可以一键执行代码了，用来登录服务器，并窗口可以自适应<br>具体可以看原文</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;转载自&lt;a href=&quot;https://zhuanlan.zhihu.com/p/180500618&quot;&gt;https://zhuanlan.zhihu.com/p/180500618&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原文中代码存在bug，已修改，如下：&lt;/p&gt;</summary>
    
    
    
    <category term="工具" scheme="https://yongmaple.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="iTerm2" scheme="https://yongmaple.com/tags/iTerm2/"/>
    
  </entry>
  
  <entry>
    <title>React递归渲染AntD菜单</title>
    <link href="https://yongmaple.com/2021/03/25/React%E9%80%92%E5%BD%92%E6%B8%B2%E6%9F%93AntD%E8%8F%9C%E5%8D%95/"/>
    <id>https://yongmaple.com/2021/03/25/React%E9%80%92%E5%BD%92%E6%B8%B2%E6%9F%93AntD%E8%8F%9C%E5%8D%95/</id>
    <published>2021-03-25T10:30:55.000Z</published>
    <updated>2021-04-26T06:21:28.288Z</updated>
    
    <content type="html"><![CDATA[<h3 id="layouts的写法"><a href="#layouts的写法" class="headerlink" title="layouts的写法"></a>layouts的写法</h3><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> renderMenu = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> data.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.routes &amp;&amp; item.routes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;SubMenu</span><br><span class="line">          key=&#123;item.name&#125;</span><br><span class="line">          title=&#123;item.name&#125;</span><br><span class="line">          icon=&#123;item.icon ? createIcon(item.icon) : <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;renderMenu(item.routes)&#125;</span><br><span class="line">        &lt;/SubMenu&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (item.other) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Menu.Item key=&#123;item.path&#125; icon=&#123;item.icon ? createIcon(item.icon) : <span class="string">&#x27;&#x27;</span>&#125;&gt;</span><br><span class="line">        &#123;item.name&#125;</span><br><span class="line">      &lt;/Menu.Item&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> handleMenu = <span class="function">(<span class="params">&#123; key &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  history.push(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  ...</span><br><span class="line">  &lt;Menu</span><br><span class="line">    defaultSelectedKeys=&#123;[location.pathname]&#125;</span><br><span class="line">    mode=<span class="string">&quot;inline&quot;</span></span><br><span class="line">    inlineCollapsed=&#123;collapsed&#125;</span><br><span class="line">    className=&#123;style.menu&#125;</span><br><span class="line">    onClick=&#123;handleMenu&#125;</span><br><span class="line">  &gt;</span><br><span class="line">    &#123;renderMenu(routes)&#125;</span><br><span class="line">  &lt;/Menu&gt;</span><br><span class="line">  ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="routes的写法"><a href="#routes的写法" class="headerlink" title="routes的写法"></a>routes的写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  exact: <span class="literal">true</span>,</span><br><span class="line">  path: <span class="string">&#x27;/foo&#x27;</span>,</span><br><span class="line">  component: <span class="string">&#x27;@/pages/foo&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">  icon: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  exact: <span class="literal">true</span>,</span><br><span class="line">  path: <span class="string">&#x27;/foobar&#x27;</span>,</span><br><span class="line">  component: <span class="string">&#x27;@/pages/foobar&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;Foobar&#x27;</span>,</span><br><span class="line">  icon: <span class="string">&#x27;foobar&#x27;</span>,</span><br><span class="line">  other: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  exact: <span class="literal">true</span>,</span><br><span class="line">  name: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">  icon: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      exact: <span class="literal">true</span>,</span><br><span class="line">      path: <span class="string">&#x27;/baz&#x27;</span>,</span><br><span class="line">      component: <span class="string">&#x27;@/pages/baz&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;Baz&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">exact</span>: <span class="literal">true</span>, </span><br><span class="line">      path: <span class="string">&#x27;/qux&#x27;</span>, </span><br><span class="line">      component: <span class="string">&#x27;@/pages/qux&#x27;</span>, </span><br><span class="line">      name: <span class="string">&#x27;Qux&#x27;</span> </span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;layouts的写法&quot;&gt;&lt;a href=&quot;#layouts的写法&quot; class=&quot;headerlink&quot; title=&quot;layouts的写法&quot;&gt;&lt;/a&gt;layouts的写法&lt;/h3&gt;</summary>
    
    
    
    <category term="前端" scheme="https://yongmaple.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="AntD" scheme="https://yongmaple.com/tags/AntD/"/>
    
    <category term="React" scheme="https://yongmaple.com/tags/React/"/>
    
    <category term="Menu" scheme="https://yongmaple.com/tags/Menu/"/>
    
  </entry>
  
  <entry>
    <title>hexo中图片组件hexo-asset-image的使用</title>
    <link href="https://yongmaple.com/2021/03/16/hexo%E4%B8%AD%E5%9B%BE%E7%89%87%E7%BB%84%E4%BB%B6hexo-asset-image%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://yongmaple.com/2021/03/16/hexo%E4%B8%AD%E5%9B%BE%E7%89%87%E7%BB%84%E4%BB%B6hexo-asset-image%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-03-16T17:30:10.000Z</published>
    <updated>2021-04-26T06:21:28.340Z</updated>
    
    <content type="html"><![CDATA[<p>hexo中直接通过<code>npm i hexo-asset-image</code>下载的组件由于没人维护，目前无法直接使用。<br>根据<a href="https://blog.csdn.net/xjm850552586/article/details/84101345">https://blog.csdn.net/xjm850552586/article/details/84101345</a>的代码.<br>我fork了原<code>hexo-asset-image</code>项目，在npm上发布了<code>hexo-assets-images</code>组件。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-<span class="built_in">image</span> --<span class="built_in">save</span></span><br></pre></td></tr></table></figure><p><code>hexo new post [title]</code>后，会在_posts文件夹下生成同名文件夹<br>在需要插入图片的地方写<code>![logo](logo.jpg)</code>，将插入<code>[title]</code>文件夹下logo.jpg.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;hexo中直接通过&lt;code&gt;npm i hexo-asset-image&lt;/code&gt;下载的组件由于没人维护，目前无法直接使用。&lt;br&gt;根据&lt;a href=&quot;https://blog.csdn.net/xjm850552586/article/details/841013</summary>
      
    
    
    
    <category term="其他" scheme="https://yongmaple.com/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
  <entry>
    <title>移动端100VH时高度不满</title>
    <link href="https://yongmaple.com/2021/03/09/%E7%A7%BB%E5%8A%A8%E7%AB%AF100VH%E6%97%B6%E9%AB%98%E5%BA%A6%E4%B8%8D%E6%BB%A1/"/>
    <id>https://yongmaple.com/2021/03/09/%E7%A7%BB%E5%8A%A8%E7%AB%AF100VH%E6%97%B6%E9%AB%98%E5%BA%A6%E4%B8%8D%E6%BB%A1/</id>
    <published>2021-03-09T14:31:44.000Z</published>
    <updated>2021-04-26T06:21:28.340Z</updated>
    
    <content type="html"><![CDATA[<p>参考自<a href="https://blog.csdn.net/lgno2/article/details/109446447">移动端避免使用100vh</a></p><h4 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h4><p>钉钉H5开发，使用<code>dd_full_screen=true&amp;showmenu=false</code>设置为全屏，在iphoneX上，高度不足，底部缺失部分</p><span id="more"></span><p><img src="/2021/03/09/%E7%A7%BB%E5%8A%A8%E7%AB%AF100VH%E6%97%B6%E9%AB%98%E5%BA%A6%E4%B8%8D%E6%BB%A1/image.png"></p><h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>核心问题是移动浏览器（我正在为您浏览，Chrome和Safari）具有“帮助”功能，其中地址栏有时可见，有时隐藏，从而改变了视口的可见大小。这些浏览器没有将100vh高度调整为视口高度变化时屏幕的可见部分，而是将100vh设置为浏览器的高度，并隐藏了地址栏。结果是，当地址栏可见时，屏幕的底部将被切除。</p><p>如下所示：<br><img src="/2021/03/09/%E7%A7%BB%E5%8A%A8%E7%AB%AF100VH%E6%97%B6%E9%AB%98%E5%BA%A6%E4%B8%8D%E6%BB%A1/image2.jpg"></p><p>当显示地址栏时，由于移动浏览器错误地将100vh设置为屏幕高度而没有显示地址栏，因此屏幕底部被切断。在上图中，应隐藏在屏幕底部的按钮。更糟糕的是，当用户首次访问移动设备上的网站时，地址栏将在顶部可见，因此默认的体验是破碎的体验。</p><h4 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h4><p>使用window.innerHeight动态设置高度</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;参考自&lt;a href=&quot;https://blog.csdn.net/lgno2/article/details/109446447&quot;&gt;移动端避免使用100vh&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;复现：&quot;&gt;&lt;a href=&quot;#复现：&quot; class=&quot;headerlink&quot; title=&quot;复现：&quot;&gt;&lt;/a&gt;复现：&lt;/h4&gt;&lt;p&gt;钉钉H5开发，使用&lt;code&gt;dd_full_screen=true&amp;amp;showmenu=false&lt;/code&gt;设置为全屏，在iphoneX上，高度不足，底部缺失部分&lt;/p&gt;</summary>
    
    
    
    <category term="报错" scheme="https://yongmaple.com/categories/%E6%8A%A5%E9%94%99/"/>
    
    
    <category term="移动端适配" scheme="https://yongmaple.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>AntD中menu动态生成，及动态生成Icon</title>
    <link href="https://yongmaple.com/2021/03/09/AntD%E4%B8%ADmenu%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%EF%BC%8C%E5%8F%8A%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90Icon/"/>
    <id>https://yongmaple.com/2021/03/09/AntD%E4%B8%ADmenu%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%EF%BC%8C%E5%8F%8A%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90Icon/</id>
    <published>2021-03-09T14:28:30.000Z</published>
    <updated>2021-04-26T06:21:28.288Z</updated>
    
    <content type="html"><![CDATA[<p>在 routes.ts 里面配置路由，menu 根据 routes 动态生成</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    exact: <span class="literal">false</span>,</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    component: <span class="string">&#x27;@/layouts/index&#x27;</span>,</span><br><span class="line">    routes: [</span><br><span class="line">      &#123;</span><br><span class="line">        exact: <span class="literal">true</span>,</span><br><span class="line">        path: <span class="string">&#x27;/overview&#x27;</span>,</span><br><span class="line">        component: <span class="string">&#x27;@/pages/Overview&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;总览&#x27;</span>,</span><br><span class="line">        icon: <span class="string">&#x27;RadarChartOutlined&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        exact: <span class="literal">true</span>,</span><br><span class="line">        path: <span class="string">&#x27;/events&#x27;</span>,</span><br><span class="line">        component: <span class="string">&#x27;@/pages/Events&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;事件列表&#x27;</span>,</span><br><span class="line">        icon: <span class="string">&#x27;BarsOutlined&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        exact: <span class="literal">true</span>,</span><br><span class="line">        path: <span class="string">&#x27;/feedback&#x27;</span>,</span><br><span class="line">        component: <span class="string">&#x27;@/pages/Feedback&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;情报反馈&#x27;</span>,</span><br><span class="line">        icon: <span class="string">&#x27;AlertOutlined&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        exact: <span class="literal">true</span>,</span><br><span class="line">        path: <span class="string">&#x27;/contacts&#x27;</span>,</span><br><span class="line">        component: <span class="string">&#x27;@/pages/Contacts&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;联系人&#x27;</span>,</span><br><span class="line">        icon: <span class="string">&#x27;DeploymentUnitOutlined&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        exact: <span class="literal">true</span>,</span><br><span class="line">        name: <span class="string">&#x27;后台管理&#x27;</span>,</span><br><span class="line">        icon: <span class="string">&#x27;SlidersOutlined&#x27;</span>,</span><br><span class="line">        routes: [</span><br><span class="line">          &#123;</span><br><span class="line">            exact: <span class="literal">true</span>,</span><br><span class="line">            path: <span class="string">&#x27;/classifications&#x27;</span>,</span><br><span class="line">            component: <span class="string">&#x27;@/pages/Classifications&#x27;</span>,</span><br><span class="line">            name: <span class="string">&#x27;分类管理&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            exact: <span class="literal">true</span>,</span><br><span class="line">            path: <span class="string">&#x27;/records&#x27;</span>,</span><br><span class="line">            component: <span class="string">&#x27;@/pages/Records&#x27;</span>,</span><br><span class="line">            name: <span class="string">&#x27;操作日志&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>生成 menu</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Icon <span class="keyword">from</span> <span class="string">&#x27;@alipay/bigfish/icons&#x27;</span>;</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">// 用React.createElement动态创建元素</span></span><br><span class="line"><span class="keyword">const</span> createIcon = <span class="function">(<span class="params">name: string</span>) =&gt;</span></span><br><span class="line">  React.createElement(Icon &amp;&amp; (Icon <span class="keyword">as</span> any)[name], &#123;</span><br><span class="line">    style: &#123; <span class="attr">fontSize</span>: <span class="string">&#x27;16px&#x27;</span> &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="keyword">const</span> renderMenu = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> data.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.routes &amp;&amp; item.routes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;SubMenu key=&#123;item.name&#125; title=&#123;item.name&#125; icon=&#123;item.icon ? createIcon(item.icon) : <span class="string">&#x27;&#x27;</span>&#125;&gt;</span><br><span class="line">          &#123;renderMenu(item.routes)&#125;</span><br><span class="line">        &lt;/SubMenu&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Menu.Item key=&#123;item.path&#125; icon=&#123;item.icon ? createIcon(item.icon) : <span class="string">&#x27;&#x27;</span>&#125;&gt;</span><br><span class="line">        &#123;item.name&#125;</span><br><span class="line">      &lt;/Menu.Item&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  ...</span><br><span class="line">    &lt;Menu</span><br><span class="line">      defaultSelectedKeys=&#123;[location.pathname]&#125;</span><br><span class="line">      <span class="comment">// defaultOpenKeys=&#123;[&#x27;sub1&#x27;]&#125;</span></span><br><span class="line">      mode=<span class="string">&quot;inline&quot;</span></span><br><span class="line">      inlineCollapsed=&#123;collapsed&#125;</span><br><span class="line">      className=&#123;style.menu&#125;</span><br><span class="line">      onClick=&#123;handleMenu&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123; renderMenu(routes) &#125;</span><br><span class="line">    &lt;/Menu&gt;</span><br><span class="line">  ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;在 routes.ts 里面配置路由，menu 根据 routes 动态生成&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://yongmaple.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="AntD" scheme="https://yongmaple.com/tags/AntD/"/>
    
  </entry>
  
  <entry>
    <title>在mac上使用android模拟器通过chrome调试webview内页面</title>
    <link href="https://yongmaple.com/2021/02/09/%E5%9C%A8mac%E4%B8%8A%E4%BD%BF%E7%94%A8android%E6%A8%A1%E6%8B%9F%E5%99%A8%E9%80%9A%E8%BF%87chrome%E8%B0%83%E8%AF%95webview%E5%86%85%E9%A1%B5%E9%9D%A2/"/>
    <id>https://yongmaple.com/2021/02/09/%E5%9C%A8mac%E4%B8%8A%E4%BD%BF%E7%94%A8android%E6%A8%A1%E6%8B%9F%E5%99%A8%E9%80%9A%E8%BF%87chrome%E8%B0%83%E8%AF%95webview%E5%86%85%E9%A1%B5%E9%9D%A2/</id>
    <published>2021-02-09T14:23:05.000Z</published>
    <updated>2021-04-26T06:21:28.340Z</updated>
    
    <content type="html"><![CDATA[<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol><li>钉钉dev App <a href="http://download.alicdn.com/wireless/dingtalk/latest/rimet_10006337.apk?spm=ding_open_doc.document.0.0.4f077391n1eV6r&file=rimet_10006337.apk">下载地址</a></li><li>网易mumu模拟器（不使用VirtualBox等违规软件）</li><li>adb工具包<br>• 检查是否安装过 <code>adb devices</code><br>• 通过brew安装 <code>brew cask install android-platform-tools</code><br>• 检查不通过的话，重启一下 <code>adb kill-server &amp;&amp; adb server &amp;&amp; adb shell</code></li><li>android开发工具(只为了android的驱动，如果可以连接，那就不用装了) <a href="https://developer.android.com/">下载地址</a></li><li>chrome浏览器<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4></li><li>在mumu中安钉钉dev.apk，拖进去就行</li><li>在mumu中打开<code>开发者模式</code>，并启用<code>usb调试</code></li><li>在mumu文件管理中点击左上角图标，再点击左下角设置图标，选择常规设置-访问模式，选择超级用户访问模式</li><li>在mumu文件管理中搜索hosts，添加mac的ip地址和local.alipay.net 如：<code>30.38.33.35       local.alipay.net</code></li><li>打开钉钉dev，前往要调试的页面</li><li>打开chrome，输入<code>chrome://inspect</code></li><li>选择对应页面调试<h4 id="可能存在的问题"><a href="#可能存在的问题" class="headerlink" title="可能存在的问题"></a>可能存在的问题</h4></li><li>如果手机打开页面后，inspect中仍然看不到，就重启adb  <code>adb kill-server &amp;&amp; adb server &amp;&amp; adb shell</code></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;钉钉dev App &lt;a href=&quot;http://download.alicdn.com/wireless/d</summary>
      
    
    
    
    <category term="工具" scheme="https://yongmaple.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="android模拟器" scheme="https://yongmaple.com/tags/android%E6%A8%A1%E6%8B%9F%E5%99%A8/"/>
    
    <category term="webview" scheme="https://yongmaple.com/tags/webview/"/>
    
  </entry>
  
  <entry>
    <title>用JS获取translate3d中的数值</title>
    <link href="https://yongmaple.com/2021/02/09/%E7%94%A8JS%E8%8E%B7%E5%8F%96translate3d%E4%B8%AD%E7%9A%84%E6%95%B0%E5%80%BC/"/>
    <id>https://yongmaple.com/2021/02/09/%E7%94%A8JS%E8%8E%B7%E5%8F%96translate3d%E4%B8%AD%E7%9A%84%E6%95%B0%E5%80%BC/</id>
    <published>2021-02-09T14:21:42.000Z</published>
    <updated>2021-04-26T06:21:28.340Z</updated>
    
    <content type="html"><![CDATA[<p>代码如下：</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取DOM</span></span><br><span class="line"><span class="keyword">const</span> scrollContainer = <span class="built_in">document</span>.getElementsByClassName(</span><br><span class="line">  <span class="string">&#x27;viewer-container__viewer-image-container&#x27;</span></span><br><span class="line">)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">const</span> imgDom = scrollContainer.childNodes[<span class="number">0</span>]</span><br><span class="line"><span class="comment">// 获取transform</span></span><br><span class="line"><span class="keyword">const</span> translates = <span class="built_in">document</span>.defaultView.getComputedStyle(imgDom, <span class="literal">null</span>).transform <span class="comment">//  matrix(a,b,c,d,e,f)</span></span><br><span class="line"><span class="comment">// 分割matrix矩阵，需要先清除多出来的一个)</span></span><br><span class="line"><span class="keyword">const</span> split = translates.replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="comment">// 获取y轴值</span></span><br><span class="line"><span class="keyword">const</span> y = <span class="built_in">Number</span>(split[split.length - <span class="number">1</span>])</span><br><span class="line"><span class="comment">// 获取x轴值</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="built_in">Number</span>(split[split.length - <span class="number">2</span>])</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;代码如下：&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://yongmaple.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="translate3d" scheme="https://yongmaple.com/tags/translate3d/"/>
    
  </entry>
  
  <entry>
    <title>JS十大经典排序</title>
    <link href="https://yongmaple.com/2021/01/05/JS%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F/"/>
    <id>https://yongmaple.com/2021/01/05/JS%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F/</id>
    <published>2021-01-05T15:07:22.000Z</published>
    <updated>2021-04-26T06:21:28.288Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/yinhao-jack/p/10838401.html">https://www.cnblogs.com/yinhao-jack/p/10838401.html</a></p><h4 id="1-冒泡排序（Bubble-Sort）"><a href="#1-冒泡排序（Bubble-Sort）" class="headerlink" title="1. 冒泡排序（Bubble Sort）"></a>1. 冒泡排序（Bubble Sort）</h4><p>冒泡排序须知：<br>作为最简单的排序算法之一，冒泡排序给我的感觉就像 Abandon 在单词书里出现的感觉一样，每次都在第一页第一位，所以最熟悉。。。冒泡排序还有一种优化算法，就是立一个 flag，当在一趟序列遍历中元素没有发生交换，则证明该序列已经有序。但这种改进对于提升性能来说并没有什么太大作用。。。</p><p>什么时候最快（Best Cases）：<br>当输入的数据已经是正序时（都已经是正序了，我还要你冒泡排序有何用啊。。。。）</p><p>什么时候最慢（Worst Cases）：<br>当输入的数据是反序时（写一个 for 循环反序输出数据不就行了，干嘛要用你冒泡排序呢，我是闲的吗。。。）</p><p>冒泡排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="comment">//相邻元素两两对比</span></span><br><span class="line">        <span class="keyword">var</span> temp = arr[j + <span class="number">1</span>] <span class="comment">//元素交换</span></span><br><span class="line">        arr[j + <span class="number">1</span>] = arr[j]</span><br><span class="line">        arr[j] = temp</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-选择排序（Selection-Sort）"><a href="#2-选择排序（Selection-Sort）" class="headerlink" title="2. 选择排序（Selection Sort）"></a>2. 选择排序（Selection Sort）</h4><p>选择排序须知：<br>在时间复杂度上表现最稳定的排序算法之一，因为无论什么数据进去都是 O(n²)的时间复杂度。。。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p><p>选择排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length</span><br><span class="line">  <span class="keyword">var</span> minIndex, temp</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    minIndex = i</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">        <span class="comment">//寻找最小的数</span></span><br><span class="line">        minIndex = j <span class="comment">//将最小数的索引保存</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = arr[i]</span><br><span class="line">    arr[i] = arr[minIndex]</span><br><span class="line">    arr[minIndex] = temp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-插入排序（Insertion-Sort）"><a href="#3-插入排序（Insertion-Sort）" class="headerlink" title="3. 插入排序（Insertion Sort）"></a>3. 插入排序（Insertion Sort）</h4><p>插入排序须知：<br>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。当然，如果你说你打扑克牌摸牌的时候从来不按牌的大小整理牌，那估计这辈子你对插入排序的算法都不会产生任何兴趣了。。。<br>插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。对于这种算法，得了懒癌的我就套用教科书上的一句经典的话吧：感兴趣的同学可以在课后自行研究。。。</p><p>插入排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length</span><br><span class="line">  <span class="keyword">var</span> preIndex, current</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    preIndex = i - <span class="number">1</span></span><br><span class="line">    current = arr[i]</span><br><span class="line">    <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class="line">      arr[preIndex + <span class="number">1</span>] = arr[preIndex]</span><br><span class="line">      preIndex--</span><br><span class="line">    &#125;</span><br><span class="line">    arr[preIndex + <span class="number">1</span>] = current</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-希尔排序（Shell-Sort）"><a href="#4-希尔排序（Shell-Sort）" class="headerlink" title="4. 希尔排序（Shell Sort）"></a>4. 希尔排序（Shell Sort）</h5><p>希尔排序须知：<br>希尔排序是插入排序的一种更高效率的实现。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第 4 版》的合著者 Robert Sedgewick 提出的。在这里，我就使用了这种方法。</p><p>希尔排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length,</span><br><span class="line">    temp,</span><br><span class="line">    gap = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> (gap &lt; len / <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">//动态定义间隔序列</span></span><br><span class="line">    gap = gap * <span class="number">3</span> + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (gap; gap &gt; <span class="number">0</span>; gap = <span class="built_in">Math</span>.floor(gap / <span class="number">3</span>)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = gap; i &lt; len; i++) &#123;</span><br><span class="line">      temp = arr[i]</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = i - gap; j &gt; <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j -= gap) &#123;</span><br><span class="line">        arr[j + gap] = arr[j]</span><br><span class="line">      &#125;</span><br><span class="line">      arr[j + gap] = temp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-归并排序（Merge-Sort）"><a href="#5-归并排序（Merge-Sort）" class="headerlink" title="5. 归并排序（Merge Sort）"></a>5. 归并排序（Merge Sort）</h4><p>归并排序须知：<br>作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：</p><p>自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）<br>自下而上的迭代<br>在《数据结构与算法 JavaScript 描述》中，作者给出了自下而上的迭代方法。但是对于递归法，作者却认为：</p><blockquote><p>However, it is not possible to do so in JavaScript, as the recursion goes too deep for the language to handle.<br>然而,在 JavaScript 中这种方式不太可行,因为这个算法的递归深度对它来讲太深了。</p></blockquote><p>说实话，我不太理解这句话。意思是 JavaScript 编译器内存太小，递归太深容易造成内存溢出吗？还望有大神能够指教。<br>更新：<br>在《JavaScript 语言精粹》的第四章里提到了递归问题。对我之前的疑问进行了解答：</p><blockquote><p>Some languages offer the tail recursion optimization. This means that if a function returns the result of invoking itself recursively, then the invocation is replaced with a loop, which can significantly speed things up. Unfortunately, JavaScript does not currently provide tail recursion optimization. Functions that recurse very deeply can fail by exhausting the return stack.<br>一些语言提供了尾递归优化。这意味着如果一个函数返回自身递归调用的结果，那么调用的过程会被替换为一个循环，它可以显著提高速度。遗憾的是，JavaScript 当前并没有提供尾递归优化。深度递归的函数可能会因为堆栈溢出而运行失败。</p></blockquote><p>简而言之，就是 JavaScript 没有对递归进行优化。运用递归函数不仅没有运行速度上的优势，还可能造成程序运行失败。因此不建议使用递归。</p><p>和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是 O(n log n）的时间复杂度。代价是需要额外的内存空间。</p><p>归并排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//采用自上而下的递归方法</span></span><br><span class="line">  <span class="keyword">var</span> len = arr.length</span><br><span class="line">  <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> middle = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>),</span><br><span class="line">    left = arr.slice(<span class="number">0</span>, middle),</span><br><span class="line">    right = arr.slice(middle)</span><br><span class="line">  <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (left.length &gt; <span class="number">0</span> &amp;&amp; right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]) &#123;</span><br><span class="line">      result.push(left.shift())</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.push(right.shift())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (left.length) result.push(left.shift())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (right.length) result.push(right.shift())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-快速排序（Quick-Sort）"><a href="#6-快速排序（Quick-Sort）" class="headerlink" title="6. 快速排序（Quick Sort）"></a>6. 快速排序（Quick Sort）</h4><p>快速排序须知：<br>又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。<br>快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高! 它是处理大数据最快的排序算法之一了。虽然 Worst Case 的时间复杂度达到了 O(n²)，但是人家就是优秀，在大多数情况下都比平均时间复杂度为 O(n log n) 的排序算法表现要更好，可是这是为什么呢，我也不知道。。。好在我的强迫症又犯了，查了 N 多资料终于在《算法艺术与信息学竞赛》上找到了满意的答案：</p><p>快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(n log n) ，且 O(n log n)记号中隐含的常数因子很小，比复杂度稳定等于 O(n log n)的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。</p><p>更新：<br>《算法 第四版》里对于快速排序的优缺点进行了更加明确的解释：</p><p>快速排序的内循环比大多数排序算法都要短小，这意味着它无论是在理论上还是在实际中都要更快。它的主要缺点是非常脆弱，在实现时要非常小心才能避免低劣的性能。</p><p>快速排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr, left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length,</span><br><span class="line">    partitionIndex,</span><br><span class="line">    left = <span class="keyword">typeof</span> left != <span class="string">&#x27;number&#x27;</span> ? <span class="number">0</span> : left,</span><br><span class="line">    right = <span class="keyword">typeof</span> right != <span class="string">&#x27;number&#x27;</span> ? len - <span class="number">1</span> : right</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">    partitionIndex = partition(arr, left, right)</span><br><span class="line">    quickSort(arr, left, partitionIndex - <span class="number">1</span>)</span><br><span class="line">    quickSort(arr, partitionIndex + <span class="number">1</span>, right)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">arr, left, right</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//分区操作</span></span><br><span class="line">  <span class="keyword">var</span> pivot = left, <span class="comment">//设定基准值（pivot）</span></span><br><span class="line">    index = pivot + <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = index; i &lt;= right; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; arr[pivot]) &#123;</span><br><span class="line">      swap(arr, i, index)</span><br><span class="line">      index++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  swap(arr, pivot, index - <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> index - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> temp = arr[i]</span><br><span class="line">  arr[i] = arr[j]</span><br><span class="line">  arr[j] = temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-堆排序（Heap-Sort）"><a href="#7-堆排序（Heap-Sort）" class="headerlink" title="7. 堆排序（Heap Sort）"></a>7. 堆排序（Heap Sort）</h4><p>堆排序须知：<br>堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：</p><pre><code>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列</code></pre><p>堆排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> len;    <span class="comment">//因为声明的多个函数都需要数据长度，所以把len设置成为全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildMaxHeap</span>(<span class="params">arr</span>) </span>&#123;   <span class="comment">//建立大顶堆</span></span><br><span class="line">     len = arr.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="built_in">Math</span>.floor(len/<span class="number">2</span>); i &amp;gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        heapify(arr, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapify</span>(<span class="params">arr, i</span>) </span>&#123;     <span class="comment">//堆调整</span></span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">2</span> * i + <span class="number">1</span>,</span><br><span class="line">         right = <span class="number">2</span> * i + <span class="number">2</span>,</span><br><span class="line">         largest = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">         largest = right;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line">         swap(arr, i, largest);</span><br><span class="line">        heapify(arr, largest);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">heapSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">     buildMaxHeap(arr);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length-<span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">         swap(arr, <span class="number">0</span>, i);</span><br><span class="line">        len--;</span><br><span class="line">        heapify(arr, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-计数排序（Counting-Sort）"><a href="#8-计数排序（Counting-Sort）" class="headerlink" title="8. 计数排序（Counting Sort）"></a>8. 计数排序（Counting Sort）</h4><p>计数排序须知：<br>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。<br>作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p><p>计数排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countingSort</span>(<span class="params">arr, maxValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bucket = <span class="keyword">new</span> <span class="built_in">Array</span>(maxValue + <span class="number">1</span>),</span><br><span class="line">    sortedIndex = <span class="number">0</span></span><br><span class="line">  ;(arrLen = arr.length), (bucketLen = maxValue + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrLen; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!bucket[arr[i]]) &#123;</span><br><span class="line">      bucket[arr[i]] = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    bucket[arr[i]]++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; bucketLen; j++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (bucket[j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      arr[sortedIndex++] = j</span><br><span class="line">      bucket[j]--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-桶排序（Bucket-Sort）"><a href="#9-桶排序（Bucket-Sort）" class="headerlink" title="9. 桶排序（Bucket Sort）"></a>9. 桶排序（Bucket Sort）</h4><p>桶排序须知：<br>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。<br>为了使桶排序更加高效，我们需要做到这两点：</p><p>在额外空间充足的情况下，尽量增大桶的数量<br>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中<br>同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。</p><p>什么时候最快（Best Cases）：<br>当输入的数据可以均匀的分配到每一个桶中</p><p>什么时候最慢（Worst Cases）：<br>当输入的数据被分配到了同一个桶中</p><p>桶排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bucketSort</span>(<span class="params">arr, bucketSize</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> i</span><br><span class="line">  <span class="keyword">var</span> minValue = arr[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">var</span> maxValue = arr[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; minValue) &#123;</span><br><span class="line">      minValue = arr[i] <span class="comment">//输入数据的最小值</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] &gt; maxValue) &#123;</span><br><span class="line">      maxValue = arr[i] <span class="comment">//输入数据的最大值</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//桶的初始化</span></span><br><span class="line">  <span class="keyword">var</span> DEFAULT_BUCKET_SIZE = <span class="number">5</span> <span class="comment">//设置桶的默认数量为5</span></span><br><span class="line">  bucketSize = bucketSize || DEFAULT_BUCKET_SIZE</span><br><span class="line">  <span class="keyword">var</span> bucketCount = <span class="built_in">Math</span>.floor((maxValue - minValue) / bucketSize) + <span class="number">1</span></span><br><span class="line">  <span class="keyword">var</span> buckets = <span class="keyword">new</span> <span class="built_in">Array</span>(bucketCount)</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; buckets.length; i++) &#123;</span><br><span class="line">    buckets[i] = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//利用映射函数将数据分配到各个桶中</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    buckets[<span class="built_in">Math</span>.floor((arr[i] - minValue) / bucketSize)].push(arr[i])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  arr.length = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; buckets.length; i++) &#123;</span><br><span class="line">    insertionSort(buckets[i]) <span class="comment">//对每个桶进行排序，这里使用了插入排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; buckets[i].length; j++) &#123;</span><br><span class="line">      arr.push(buckets[i][j])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-基数排序（Radix-Sort）"><a href="#10-基数排序（Radix-Sort）" class="headerlink" title="10. 基数排序（Radix Sort）"></a>10. 基数排序（Radix Sort）</h4><p>基数排序须知：<br>基数排序有两种方法：</p><p>MSD 从高位开始进行排序<br>LSD 从低位开始进行排序<br>基数排序 vs 计数排序 vs 桶排序<br>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：<br>基数排序：根据键值的每位数字来分配桶<br>计数排序：每个桶只存储单一键值<br>桶排序：每个桶存储一定范围的数值</p><p>基数排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LSD Radix Sort</span></span><br><span class="line"><span class="keyword">var</span> counter = []</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">radixSort</span>(<span class="params">arr, maxDigit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> mod = <span class="number">10</span></span><br><span class="line">  <span class="keyword">var</span> dev = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxDigit; i++, dev *= <span class="number">10</span>, mod *= <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">      <span class="keyword">var</span> bucket = <span class="built_in">parseInt</span>((arr[j] % mod) / dev)</span><br><span class="line">      <span class="keyword">if</span> (counter[bucket] == <span class="literal">null</span>) &#123;</span><br><span class="line">        counter[bucket] = []</span><br><span class="line">      &#125;</span><br><span class="line">      counter[bucket].push(arr[j])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> pos = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; counter.length; j++) &#123;</span><br><span class="line">      <span class="keyword">var</span> value = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">if</span> (counter[j] != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> ((value = counter[j].shift()) != <span class="literal">null</span>) &#123;</span><br><span class="line">          arr[pos++] = value</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/yinhao-jack/p/10838401.html&quot;&gt;https://www.cnblogs.com/yinhao-jack/p/10838401.html&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;1-冒泡排序（</summary>
      
    
    
    
    <category term="思维" scheme="https://yongmaple.com/categories/%E6%80%9D%E7%BB%B4/"/>
    
    
    <category term="排序" scheme="https://yongmaple.com/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>this指向的4种情况</title>
    <link href="https://yongmaple.com/2021/01/05/this%E6%8C%87%E5%90%91%E7%9A%844%E7%A7%8D%E6%83%85%E5%86%B5/"/>
    <id>https://yongmaple.com/2021/01/05/this%E6%8C%87%E5%90%91%E7%9A%844%E7%A7%8D%E6%83%85%E5%86%B5/</id>
    <published>2021-01-05T15:07:22.000Z</published>
    <updated>2021-04-26T06:21:28.340Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-在对象属性中的-this"><a href="#1-在对象属性中的-this" class="headerlink" title="1. 在对象属性中的 this"></a>1. 在对象属性中的 this</h4><p>对象的属性是函数，那么函数中的 this 指向对象本身</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  x: <span class="number">123</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// &#123;x: 123, fn: ƒ&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.x) <span class="comment">// 123</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">obj.fn()</span><br></pre></td></tr></table></figure><p>对象的属性是函数，函数内部还有函数，那么二级（及以上）函数的 this 都指向 window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  x: <span class="number">456</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;fn&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// &#123;x: 456, fn: ƒ&#125;</span></span><br><span class="line">    <span class="keyword">var</span> f1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;fn.f1&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …&#125;</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.x) <span class="comment">// undefined</span></span><br><span class="line">      <span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;fn.f2&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …&#125;</span></span><br><span class="line">      &#125;</span><br><span class="line">      f2()</span><br><span class="line">    &#125;</span><br><span class="line">    f1()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">obj.fn()</span><br></pre></td></tr></table></figure><h4 id="2-构造函数中的-this"><a href="#2-构造函数中的-this" class="headerlink" title="2. 构造函数中的 this"></a>2. 构造函数中的 this</h4><p>构造函数中的一级函数，this 指向通过构造函数 new 出来的实例（例子中的 person）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&#x27;linlif&#x27;</span></span><br><span class="line">  <span class="built_in">this</span>.fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;fn&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// &#123;name: &quot;linlif&quot;, fn: ƒ&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</span><br><span class="line">person.fn()</span><br></pre></td></tr></table></figure><p>构造函数中的二级(及以上)函数，this 指向的是 window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&#x27;linlif&#x27;</span></span><br><span class="line">  <span class="built_in">this</span>.fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;fn&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// &#123;name: &quot;linlif&quot;, fn: ƒ&#125;</span></span><br><span class="line">    <span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;f2&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …&#125;</span></span><br><span class="line">      <span class="keyword">var</span> f3 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;f3&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …&#125;</span></span><br><span class="line">      &#125;</span><br><span class="line">      f3()</span><br><span class="line">    &#125;</span><br><span class="line">    f2()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</span><br><span class="line">person.fn()</span><br></pre></td></tr></table></figure><h4 id="3-全局上下文环境中-this"><a href="#3-全局上下文环境中-this" class="headerlink" title="3. 全局上下文环境中 this"></a>3. 全局上下文环境中 this</h4><p>全局上下文环境，this 指向浏览器的 window 对象，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局的this</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span> === <span class="built_in">window</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局的普通函数</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">global</span> = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">global</span>()</span><br></pre></td></tr></table></figure><h4 id="4-call-和-apply-对-this-指向的影响"><a href="#4-call-和-apply-对-this-指向的影响" class="headerlink" title="4. call()和 apply()对 this 指向的影响"></a>4. call()和 apply()对 this 指向的影响</h4><p>使用 call()方法后，this 指向 call()方法的参数。使用 apply()的结果和 call()是一致的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改变调用对象为gObj</span></span><br><span class="line"><span class="keyword">var</span> gObj = &#123;</span><br><span class="line">  name: <span class="string">&#x27;gName&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> aaa = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// &#123;name: &quot;gName&quot;&#125;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name) <span class="comment">// gName</span></span><br><span class="line">&#125;</span><br><span class="line">aaa.call(gObj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变调用对象为window</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;global&#x27;</span></span><br><span class="line"><span class="keyword">var</span> bbb = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …&#125;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name) <span class="comment">// global</span></span><br><span class="line">&#125;</span><br><span class="line">bbb.call(<span class="built_in">this</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;1-在对象属性中的-this&quot;&gt;&lt;a href=&quot;#1-在对象属性中的-this&quot; class=&quot;headerlink&quot; title=&quot;1. 在对象属性中的 this&quot;&gt;&lt;/a&gt;1. 在对象属性中的 this&lt;/h4&gt;&lt;p&gt;对象的属性是函数，那么函数中的 this 指向对象本身&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://yongmaple.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="this" scheme="https://yongmaple.com/tags/this/"/>
    
  </entry>
  
</feed>
