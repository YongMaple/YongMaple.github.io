<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Vue全家桶&amp;原理</title>
      <link href="2021/04/01/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6&amp;%E5%8E%9F%E7%90%86/"/>
      <url>2021/04/01/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6&amp;%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="项目地址见本文结尾"><a href="#项目地址见本文结尾" class="headerlink" title="项目地址见本文结尾"></a><em>项目地址见本文结尾</em></h2><h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><p>创建一个新的项目，<code>vue create vue-study</code>，选择 vue2，添加 vue-router 和 vuex，<code> vue add router</code>、<code>vue add vux </code></p><h4 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h4><p><em>Vue router 是 Vue.js 官方的路由管理器。它和 Vue 的核心深度集成，让构建单页面应用易如反掌</em></p><h5 id="核心步骤"><a href="#核心步骤" class="headerlink" title="核心步骤"></a>核心步骤</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/router/index.js</span></span><br><span class="line"><span class="comment">// 使用vue-router插件</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line">Vue.use(VueRouter)</span><br><span class="line"><span class="comment">// 创建Router实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// src/main.js</span></span><br><span class="line"><span class="comment">// 在根组件上添加该实例</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"><span class="comment">// src/App.vue</span></span><br><span class="line"><span class="comment">// 添加路由视图</span></span><br><span class="line">&lt;router-view/&gt;</span><br><span class="line"><span class="comment">// 导航</span></span><br><span class="line">&lt;router-link to=<span class="string">&quot;/&quot;</span>&gt;Home&lt;/router-link&gt;</span><br><span class="line">&lt;router-link to=<span class="string">&quot;/about&quot;</span>&gt;About&lt;/router-link&gt;</span><br><span class="line"><span class="built_in">this</span>.$router.push(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"><span class="built_in">this</span>.$router.push(<span class="string">&#x27;/about&#x27;</span>)</span><br></pre></td></tr></table></figure><h5 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h5><ul><li>实现一个插件<ul><li>实现 VueRouter 类<ul><li>处理路由选项</li><li>监控 url 变化，hashchange</li><li>响应这个变化</li></ul></li><li>实现 install 方法<ul><li>$router注册（this.$router.push）</li><li>两个全局组件（router-link,router-view）</li></ul></li></ul></li></ul><h5 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h5><p>为了检测后续成果，直接在<code>src/router/</code>下新建一个<code>vuerouter.js</code>，并将<code>src/router/index.js</code>中的<code>import VueRouter from &#39;vue-router&#39;</code>改为<code>import VueRouter from &#39;./vuerouter&#39;</code>。如果实现了目标，可以直接查看效果。</p><p>要实现一个 Vue 插件，要给当前类实现一个静态的<code>install</code>方法，<code>install</code>方法将来会被 vue 调用，该函数接收 Vue 构造函数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">VueRouter.install = <span class="function"><span class="keyword">function</span> (<span class="params">_Vue</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> VueRouter</span><br></pre></td></tr></table></figure><p>为了组件中能够使用<code>this.$router.push()</code>，需要挂载路由器实例$router<br>需要实现<code>Vue.prototype.$router = router</code> router在<code>/src/router/index.js</code>的<code>const router = new VueRouter(&#123; routes &#125;)</code>中传入 但是<code>Vue.use(VueRouter)</code>时会立刻调用<code>install</code>方法，在install执行时router实例还不存在 所以需要使用<code>Vue.mixin</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Vue</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// install.call(VueRouter, Vue) install调用时，如此传入_Vue</span></span><br><span class="line">VueRouter.install = <span class="function"><span class="keyword">function</span> (<span class="params">_Vue</span>) </span>&#123;</span><br><span class="line">  Vue = _Vue</span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 这些代码延迟到了组件实例化的时候才执行，这时就可以获取到组件选项了</span></span><br><span class="line">      <span class="comment">// 这些代码会在所有组件中都执行，但是只有在根实例中才有router，所以只在根实例中才执行如下代码</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.$options.router) &#123;</span><br><span class="line">        Vue.prototype.$router = <span class="built_in">this</span>.$options.router</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> VueRouter</span><br></pre></td></tr></table></figure><p>此时如果运行项目，会报错<code>Unknown custom element: &lt;router-link&gt;</code>和<code>Unknown custom element: &lt;router-view&gt;</code></p><h6 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h6><p>注册全局组件<code>router-view</code>和<code>router-link</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Vue</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// install.call(VueRouter, Vue) install调用时，如此传入_Vue</span></span><br><span class="line">VueRouter.install = <span class="function"><span class="keyword">function</span>(<span class="params">_Vue</span>) </span>&#123;</span><br><span class="line">  Vue = _Vue</span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  Vue.component(<span class="string">&quot;router-link&quot;</span>, &#123;&#125;)</span><br><span class="line">  Vue.component(<span class="string">&quot;router-view&quot;</span>, &#123;&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> VueRouter</span><br></pre></td></tr></table></figure><p>为组件添加<code>template</code>会报错，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;router-link&#x27;</span>, &#123;</span><br><span class="line">  template: <span class="string">&#x27;&lt;a&gt;xxxx&lt;/a&gt;&#x27;</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Vue warn]: You are <span class="keyword">using</span> the runtime-<span class="keyword">only</span> build <span class="keyword">of</span> Vue <span class="keyword">where</span> the <span class="keyword">template</span> compiler <span class="keyword">is</span> <span class="keyword">not</span> available. Either pre-compile the templates <span class="keyword">into</span> render <span class="keyword">functions</span>, <span class="keyword">or</span> use the compiler-included build.</span><br></pre></td></tr></table></figure><p>当前环境是 webpack 的预打包版本，不包含编译器，所有不支持<code>template</code></p><p>改为用<code>render(h)&#123;&#125;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;router-link&#x27;</span>, &#123;</span><br><span class="line">  <span class="comment">// h是createElement，最终返回一个vdom</span></span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;router-link&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">Vue.component(<span class="string">&#x27;router-view&#x27;</span>, &#123;</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">&#x27;div&#x27;</span>, <span class="string">&#x27;router-view&#x27;</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>现在可以在页面上看到结果了<br><img src="/2021/04/01/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6&%E5%8E%9F%E7%90%86/1.png"></p><p>使用<code>router-link</code>时，正常是这么写的<code>&lt;router-link to=&quot;/about&quot;&gt;about&lt;/router-link&gt;</code></p><p>现在需要拿到<code>about</code>来替换上面占位的<code>router-link</code></p><p>只需要使用<code>this.$slots.default</code>即可</p><p>还需要加上<code>to</code>属性，所以需要从<code>props</code>中传进来</p><p>这里实现<code>hash</code>的写法，给<code>href</code>添加<code>#</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;router-link&#x27;</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    to: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> h(<span class="string">&#x27;a&#x27;</span>, &#123; <span class="attr">attrs</span>: &#123; <span class="attr">href</span>: <span class="string">`#<span class="subst">$&#123;<span class="built_in">this</span>.to&#125;</span>`</span> &#125; &#125;, <span class="built_in">this</span>.$slots.default)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里也可以支持 jsx 的写法，不过不推荐，因为对当前执行环境有依赖，希望不配置 jsx 也能使用</p><p>jsx 写法如下：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">&#x27;router-link&#x27;</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    to: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&#123;</span>`#$&#123;<span class="attr">this.to</span>&#125;`&#125;&gt;</span>&#123;this.$slots.default&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>🎉 router-link 完成</p><h6 id="router-view"><a href="#router-view" class="headerlink" title="router-view"></a>router-view</h6><p>现在如果直接把组件拿过来，render 出来，就可以在页面上展示出来了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../views/Home.vue&#x27;</span></span><br><span class="line">...</span><br><span class="line">  Vue.component(<span class="string">&quot;router-view&quot;</span>, &#123;</span><br><span class="line">    <span class="comment">// h函数可以接收的参数除了字符串，也可以是组件的配置对象</span></span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> h(Home);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在创建实例的时候，传进来的<code>routes</code>里面包含了组件和 url 的映射关系<code>new VueRouter(&#123;routes: [...]&#125;)</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 保存一下，以便在router-view中拿，通过this.$router.$options拿</span></span><br><span class="line">    <span class="comment">// options就是 new VueRouter(&#123;routes: [...]&#125;) 里面传过来的</span></span><br><span class="line">    <span class="built_in">this</span>.$options = options</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在获取当前地址<code>current</code>，去掉 hash 的#就是了。<code>window.location.hash.slice(1) || &quot;/&quot;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">this</span>.current = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>) || <span class="string">&quot;/&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">  Vue.component(<span class="string">&quot;router-view&quot;</span>, &#123;</span><br><span class="line">    <span class="function"><span class="title">render</span>(<span class="params">h</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// 获取当前路由对应的组件</span></span><br><span class="line">      <span class="keyword">let</span> component = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">const</span> route = <span class="built_in">this</span>.$router.$options.routes.find(</span><br><span class="line">        (route) =&gt; route.path === <span class="built_in">this</span>.$router.current</span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">if</span> (route) &#123;</span><br><span class="line">        component = route.component</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> h(component);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>现在打开页面，会发现刷新页面可以改变页面，点击路由却不会改变</p><ol><li>还没有监听的 hash 的改变</li><li>render 函数只执行一次，需要响应式</li></ol><p>监听 hash，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 监听hash变化</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.current = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里申明响应式属性的方式：</p><ol><li><code>new Vue(&#123;data: &#123; current: ... &#125;&#125;)</code></li><li><code>Vue.util.defineReactive</code>，这是隐藏 api</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">VueRouter</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 把current作为响应式数据</span></span><br><span class="line">    <span class="comment">// 将来发生变化，router-view的render函数能够再次执行</span></span><br><span class="line">    <span class="keyword">const</span> initial = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>) || <span class="string">&#x27;/&#x27;</span></span><br><span class="line">    Vue.util.defineReactive(<span class="built_in">this</span>, <span class="string">&#x27;current&#x27;</span>, initial)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;hashchange&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.current = <span class="built_in">window</span>.location.hash.slice(<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>🎉router-view 完成</p><h4 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h4><p><em>Vuex 集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以可预测的方式发生变化</em></p><h5 id="目标-1"><a href="#目标-1" class="headerlink" title="目标"></a>目标</h5><ul><li>实现插件<ul><li>实现 Store 类<ul><li>维持一个响应式状态 state</li><li>实现 commit()</li><li>实现 dispatch()</li><li>getters</li></ul></li><li>挂载$store</li></ul></li></ul><h5 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h5><p>和 router 一样，先把<code>src/store/index.js</code>中的引用改掉<code>import Vuex from &#39;./vuex.js&#39;</code></p><p>并添加检测成果逻辑<br><code>/src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;./vuex.js&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    counter: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      state.counter++</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">&#x27;add&#x27;</span>)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;&#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>src/App.vue</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;nav&quot;&gt;</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;&quot;&gt;Home&lt;&#x2F;router-link&gt; |</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;about&quot;&gt;About&lt;&#x2F;router-link&gt;</span><br><span class="line">      &lt;p @click&#x3D;&quot;$store.commit(&#39;add&#39;)&quot;&gt;commit:&#123;&#123; $store.state.counter &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;p @click&#x3D;&quot;$store.dispatch(&#39;add&#39;)&quot;&gt;dispatch:&#123;&#123; $store.state.counter &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;router-view &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p>在正常使用时，使用<code>new Vuex.Store</code>的方式，所以区别于 router 如下写：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">install</span>(<span class="params">_Vue</span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; Store, install &#125;</span><br></pre></td></tr></table></figure><p>和 router 一样，挂载$store</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> Vue</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">install</span>(<span class="params">_Vue</span>) </span>&#123;</span><br><span class="line">  Vue = _Vue</span><br><span class="line">  <span class="comment">// 挂载$store</span></span><br><span class="line">  Vue.mixin(&#123;</span><br><span class="line">    <span class="function"><span class="title">beforeCreate</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">this</span>.$options.store) &#123;</span><br><span class="line">        Vue.prototype.$store = <span class="built_in">this</span>.$options.store</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123; Store, install &#125;</span><br></pre></td></tr></table></figure><p>添加响应式属性 state</p><p>在这里不能使用<code>Vue.set(this, &#39;xxx&#39;, &#123;&#125;)</code>，因为 Vue.set 是给响应式对象动态添加一个属性，这里的 this 不是一个响应式对象</p><p>router 已经用过<code>Vue.util.defineReactive</code>，这里用<code>new Vue()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 保存选项</span></span><br><span class="line">    <span class="built_in">this</span>.$options = options</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应式操作</span></span><br><span class="line">    <span class="built_in">this</span>.state = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      data: options.state,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在直接给用户暴露了 state，用户可以直接接触到 Vue 实例，需要把 Vue 实例藏起来，让用户不能直接修改 state，而是通过 commit、dispatch 的方式修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 保存选项</span></span><br><span class="line">    <span class="built_in">this</span>.$options = options</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 响应式操作</span></span><br><span class="line">    <span class="built_in">this</span>._vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">      data: &#123;</span><br><span class="line">        <span class="comment">// 加上$$，既要对state做响应式，还不做代理</span></span><br><span class="line">        $$state: options.state,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> <span class="title">state</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>._vm)</span><br><span class="line">    <span class="comment">// _data和$data是一回事</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>._vm._data.$$state</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title">state</span>(<span class="params">v</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;请使用replaceState重置状态&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台打印_vm</p><p><img src="/2021/04/01/Vue%E5%85%A8%E5%AE%B6%E6%A1%B6&%E5%8E%9F%E7%90%86/2.jpg"></p><p><code>__ob__</code>表示这是一个响应式对象</p><p>同时，_vm 上并没有$state，加上$之后$state 被隐藏起来了，这是 Vue 内部约定</p><p>实现 commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 保存mutations</span></span><br><span class="line">  <span class="built_in">this</span>._mutations = options.mutations</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// type 调用的mutation的名字 payload 参数</span></span><br><span class="line"><span class="function"><span class="title">commit</span>(<span class="params">type, payload</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> entry = <span class="built_in">this</span>._mutations[type]</span><br><span class="line">  <span class="keyword">if</span> (!entry) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;unknown mutation&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  entry(<span class="built_in">this</span>.state, payload)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现 dispath</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 保存actions</span></span><br><span class="line">  <span class="built_in">this</span>._actions = options.actions</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">dispatch</span>(<span class="params">type, payload</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> entry = <span class="built_in">this</span>._actions[type]</span><br><span class="line">  <span class="keyword">if</span> (!entry) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">&#x27;unknown action&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 使用时如下： add(&#123; commit, dispatch, state, rootState ...&#125;) &#123;&#125;</span></span><br><span class="line">  <span class="comment">// 就是store实例，所以传this</span></span><br><span class="line">  entry(<span class="built_in">this</span>, payload)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在 commit 可以正常使用，dispatch 会报错</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught TypeError: Cannot <span class="keyword">read</span> <span class="keyword">property</span><span class="title"> </span>&#x27;_mutations&#x27; of undefined</span><br></pre></td></tr></table></figure><p>这是因为 this 指向问题</p><p>这里锁死上下文</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="comment">// 绑定commit和dispatch上下文为store实例</span></span><br><span class="line">  <span class="built_in">this</span>.commit = <span class="built_in">this</span>.commit.bind(<span class="built_in">this</span>)</span><br><span class="line">  <span class="built_in">this</span>.dispatch = <span class="built_in">this</span>.dispatch.bind(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="实现-getters"><a href="#实现-getters" class="headerlink" title="实现 getters"></a>实现 getters</h5><p>同样先添加检验的代码<br>App.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;div id&#x3D;&quot;nav&quot;&gt;</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;&quot;&gt;Home&lt;&#x2F;router-link&gt; |</span><br><span class="line">      &lt;router-link to&#x3D;&quot;&#x2F;about&quot;&gt;About&lt;&#x2F;router-link&gt;</span><br><span class="line">      &lt;p @click&#x3D;&quot;$store.commit(&#39;add&#39;)&quot;&gt;commit:&#123;&#123; $store.state.counter &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;p @click&#x3D;&quot;$store.dispatch(&#39;add&#39;)&quot;&gt;dispatch:&#123;&#123; $store.state.counter &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">      &lt;p&gt;doubleCounter:&#123;&#123; $store.getters.doubleCounter &#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;router-view &#x2F;&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure><p><code>src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;./vuex.js&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    counter: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      state.counter++</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="function"><span class="title">add</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        commit(<span class="string">&#x27;add&#x27;</span>)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;&#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    <span class="function"><span class="title">doubleCounter</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> state.counter * <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>和上面一样，先保存 getters</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="built_in">this</span>._getters = options.getters</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 computed 来处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应式操作</span></span><br><span class="line"><span class="built_in">this</span>._vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    <span class="comment">// 加上$$，既要对state做响应式，还不做代理</span></span><br><span class="line">    $$state: options.state,</span><br><span class="line">  &#125;,</span><br><span class="line">  computed,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在 Vue 里<code>computed</code>应该是一个对象，key 是没有参数的函数</p><p>先定义一个 computed 选项，再给用户暴露一个 getters</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 定义computed选项</span></span><br><span class="line">    <span class="keyword">const</span> computed = &#123;&#125;</span><br><span class="line">    <span class="comment">// 给用户暴露getters</span></span><br><span class="line">    <span class="built_in">this</span>.getters = &#123;&#125;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>遍历<code>this._getters</code>执行<br><code>this._getters</code>是这样的结构<code>&#123;doubleCounter(state) &#123;&#125;&#125;</code>，但是需要的是无参数的函数，所以需要封装一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">options</span>)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 保存getters</span></span><br><span class="line">    <span class="built_in">this</span>._getters = options.getters</span><br><span class="line">    <span class="comment">// 定义computed选项</span></span><br><span class="line">    <span class="keyword">const</span> computed = &#123;&#125;</span><br><span class="line">    <span class="comment">// 给用户暴露getters</span></span><br><span class="line">    <span class="built_in">this</span>.getters = &#123;&#125;</span><br><span class="line">    <span class="keyword">const</span> store = <span class="built_in">this</span></span><br><span class="line">    <span class="comment">// this._getters =&gt; &#123;doubleCounter(state) &#123;&#125;&#125;</span></span><br><span class="line">    <span class="built_in">Object</span>.keys(<span class="built_in">this</span>._getters).forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 获取用户定义的getter</span></span><br><span class="line">      <span class="comment">// 直接使用this._getters会有指向问题，所以定义了store</span></span><br><span class="line">      <span class="keyword">const</span> fn = store._getters[key]</span><br><span class="line">      <span class="comment">// 转换为computed可以使用的无参数形式</span></span><br><span class="line">      computed[key] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fn(store.state)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终用户访问时，只能是只读的，所以为 getters 定义只读属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this._getters =&gt; &#123;doubleCounter(state) &#123;&#125;&#125;</span></span><br><span class="line"><span class="built_in">Object</span>.keys(<span class="built_in">this</span>._getters).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取用户定义的getter</span></span><br><span class="line">  <span class="keyword">const</span> fn = store._getters[key]</span><br><span class="line">  <span class="comment">// 转换为computed可以使用的无参数形式</span></span><br><span class="line">  computed[key] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fn(store.state)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 为getters定义只读属性</span></span><br><span class="line">  <span class="built_in">Object</span>.defineProperty(store.getters, key, &#123;</span><br><span class="line">    get: <span class="function">() =&gt;</span> store._vm[key],</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>🎉getters完成</p><p><em>项目地址：<a href="https://github.com/YongMaple/vue-study">https://github.com/YongMaple/vue-study</a></em></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> vue-router </tag>
            
            <tag> vuex </tag>
            
            <tag> 手撕源码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vite2工程化</title>
      <link href="2021/03/30/Vite2%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
      <url>2021/03/30/Vite2%E5%B7%A5%E7%A8%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h4 id="Vite是什么"><a href="#Vite是什么" class="headerlink" title="Vite是什么"></a>Vite是什么</h4><p>Vite是一个开发构建工具，开发中它利用浏览器<strong>native ES Module</strong>特性按需导入源码，预打包依赖。<br>特点：</p><ul><li>启动快</li><li>更新快</li></ul><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init @vite/app</span><br></pre></td></tr></table></figure><h4 id="将资源引入为URL"><a href="#将资源引入为URL" class="headerlink" title="将资源引入为URL"></a>将资源引入为URL</h4><p>服务时引入一个静态资源会返回解析后的公共路径：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析为地址</span></span><br><span class="line"><span class="keyword">import</span> logo <span class="keyword">from</span> <span class="string">&#x27;./assets/logo.png&#x27;</span>  <span class="comment">// 输出/src/assets/logo.png</span></span><br></pre></td></tr></table></figure><p>使用这个路径</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">&quot;logo&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>可以打开Chrome Network，看App.vue，可以看到里面的地址是被解析后的公共路径<br><img src="/2021/03/30/Vite2%E5%B7%A5%E7%A8%8B%E5%8C%96/20210330162917.jpg"></p><h4 id="设置别名"><a href="#设置别名" class="headerlink" title="设置别名"></a>设置别名</h4><p>vite.config.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> resolve <span class="keyword">from</span> <span class="string">&#x27;path&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  ...</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: resolve(<span class="string">&#x27;./src&#x27;</span>),</span><br><span class="line">      <span class="string">&#x27;comps&#x27;</span>: resolve(<span class="string">&#x27;./src/components&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>style中同样可以使用别名来引入图片等</p><h4 id="TS整合"><a href="#TS整合" class="headerlink" title="TS整合"></a>TS整合</h4><p>默认整合ts，可以直接使用，<code>&lt;script lang=&quot;ts&quot;&gt;</code>即可，需要固定ts版本的话，在<code>package.json</code>的<code>devDependencies</code>中直接添加<code>&quot;typescript&quot;: &quot;4.1.5&quot;</code>即可</p><p>tsconfig.json可以自行配置后放入项目即可</p><h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><p><code>vite.config.js</code>中添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  ...</span><br><span class="line">  server: &#123;</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        target: <span class="string">&quot;***&quot;</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        rewrite: <span class="function">(<span class="params">path</span>) =&gt;</span> path.replace(<span class="regexp">/^\api/</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="数据mock"><a href="#数据mock" class="headerlink" title="数据mock"></a>数据mock</h4><p>安装依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i mockjs -S</span><br><span class="line">npm i vite-plugin-mock -D</span><br></pre></td></tr></table></figure><p>引入插件，<code>vite.config.js</code>中添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; viteMockServe &#125; <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-mock&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> defineConfig(&#123;</span><br><span class="line">  ...</span><br><span class="line">  plugins: [ viteMockServe(&#123;&#125;) ]</span><br><span class="line">  ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>项目下创建<code>mock</code>文件夹，文件夹下就可以创建mock数据了，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    url: <span class="string">&quot;/api/users&quot;</span>,</span><br><span class="line">    method: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    response: <span class="function"><span class="params">req</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        code: <span class="number">0</span>,</span><br><span class="line">        data: [&#123; <span class="attr">name</span>: <span class="string">&quot;foo&quot;</span> &#125;, &#123; <span class="attr">name</span>: <span class="string">&quot;bar&quot;</span> &#125;]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="代码规范"><a href="#代码规范" class="headerlink" title="代码规范"></a>代码规范</h4><p>使用<code>eslint + prettier</code>规范代码<br>添加如下依赖：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;@typescript-eslint/eslint-plugin&quot;</span>: <span class="string">&quot;^4.15.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@typescript-eslint/parser&quot;</span>: <span class="string">&quot;^4.15.2&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vue/eslint-config-prettier&quot;</span>: <span class="string">&quot;^6.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vue/eslint-config-typescript&quot;</span>: <span class="string">&quot;^7.0.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;@vuedx/typescript-plugin-vue&quot;</span>: <span class="string">&quot;^0.6.3&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span>: <span class="string">&quot;^7.20.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint-plugin-prettier&quot;</span>: <span class="string">&quot;^3.3.1&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;eslint-plugin-vue&quot;</span>: <span class="string">&quot;^7.6.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;prettier&quot;</span>: <span class="string">&quot;^2.2.1&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>未完待续</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>React中的nextTick</title>
      <link href="2021/03/29/React%E4%B8%AD%E7%9A%84nextTick/"/>
      <url>2021/03/29/React%E4%B8%AD%E7%9A%84nextTick/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在项目开发中，使用 AntV-L7 的 Draw-Control，需要实现在弹框中地图画圈框选范围。<br>使用了 hooks 的写法，在弹框出现后地图正常显示，点击画圈或其他绘图功能后，绘图的 canvas 只有约一半大小。<br>思考后认为应该是在<code>new DrawControl()</code>时，useState 还没执行赋值，错误范例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> handleDrawCircle = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  setShowModal(<span class="literal">true</span>)</span><br><span class="line">  scene = <span class="keyword">new</span> Scene(&#123;</span><br><span class="line">    id: <span class="string">&#x27;drawCircleWrap&#x27;</span>,</span><br><span class="line">    map: <span class="keyword">new</span> GaodeMap(&#123;</span><br><span class="line">      style: <span class="string">&#x27;dark&#x27;</span>,</span><br><span class="line">      center: [<span class="number">120.190494</span>, <span class="number">30.189643</span>],</span><br><span class="line">      pitch: <span class="number">0</span>,</span><br><span class="line">      zoom: <span class="number">4</span>,</span><br><span class="line">      token: GAODE_TOKEN,</span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;)</span><br><span class="line">  scene.on(<span class="string">&#x27;loaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    drawControl = <span class="keyword">new</span> DrawControl(scene, &#123;</span><br><span class="line">      position: <span class="string">&#x27;topright&#x27;</span>,</span><br><span class="line">      layout: <span class="string">&#x27;horizontal&#x27;</span>,</span><br><span class="line">      controls: &#123;</span><br><span class="line">        point: <span class="literal">false</span>,</span><br><span class="line">        line: <span class="literal">false</span>,</span><br><span class="line">        polygon: <span class="literal">false</span>,</span><br><span class="line">        circle: <span class="literal">true</span>,</span><br><span class="line">        rect: <span class="literal">false</span>,</span><br><span class="line">        <span class="keyword">delete</span>: <span class="literal">true</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    scene.addControl(drawControl)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照以前写Vue的经验，只要用nextTick就能解决了，但是搜了一下，React中没有nextTick，但是有两种替代方式</p><ol><li><code>setTimeout(() =&gt; &#123;&#125;, 0)</code></li><li><code>useEffect(() =&gt; &#123;&#125;, [showModal])</code><br>两种方式在我看来都不是很好看……最后还是决定用<code>setTimeout</code>，因为用<code>useEffect</code>还需要判断下showModal是否为true</li></ol><p>如果用Class的写法，也可以这样<code>setState(&#123;&#125;,() =&gt; &#123;&#125;)</code></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
            <tag> AntV </tag>
            
            <tag> nextTick </tag>
            
            <tag> hooks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue和React设计思路</title>
      <link href="2021/03/29/Vue%E5%92%8CReact%E6%AF%94%E8%BE%83/"/>
      <url>2021/03/29/Vue%E5%92%8CReact%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<h4 id="发展历程"><a href="#发展历程" class="headerlink" title="发展历程"></a>发展历程</h4><ul><li>Vue1<br>只有响应式，没有vdom，所有的都是通知的机制</li><li>React15<br>Class Component</li><li>Vue2<br>引入了vdom</li><li>React16<br>引入了Fiber和Hooks</li><li>Vue3 &amp; React17</li></ul><h4 id="Vue3-amp-React17"><a href="#Vue3-amp-React17" class="headerlink" title="Vue3 &amp; React17"></a>Vue3 &amp; React17</h4><ul><li>Vue OptionApi<ol><li>优点：结构清晰，好理解，数据去data，方法去methods等，易学。</li><li>缺点：就是反复横跳，在处理一个逻辑时，需要在template、data、methods等反复操作。mixins有个问题，可能命名冲突，同时mixins时this是个黑盒，里面有什么是不知道的，ts支持差</li></ol></li><li>Vue CompositionApi<ol><li>缺点：难看，不如Option简单。return很蛋疼，return也要反复横跳</li><li>优点：</li></ol><ul><li>可以做tree-shaking，比如没有用到computed，代码build的时候就会删掉Vue3里面的computed的代码</li><li>组件可以任意拆分 方便组合 逻辑都是函数，组合优于继承</li><li>命名冲突了只要:起个别名就行了</li></ul></li><li>渐进式更新ref api<ul><li>setup写在script，解决return等冗余</li><li>方言：<code>let x = ref(0)</code> =&gt; <code>ref: x = 1</code>使用时可以不用写<code>x.value</code></li></ul></li><li>composition和hooks的区别<ul><li>语法上比较像，但底层设计上区别很大</li><li>hooks中例如useState每次render都会执行，所以有严格的顺序要求，不能写在if里面</li><li>composition后续靠的是响应式通知</li><li>都采用组合的形式，函数式的组件是未来</li></ul></li><li>vue 响应式 + vdom<ul><li>响应式： 数据变了通知你</li><li>vdom： 数据变了你不知道哪里变了，需要算一次diff，才知道变化</li><li>vue1只有响应式，项目大了之后，响应式对象太多，导致卡顿</li></ul></li><li>react纯vdom<ul><li>vdom树太大，diff时间超过16.6ms，会导致卡顿</li></ul></li><li>React Class =&gt; hooks</li></ul><h4 id="JSX-和-Template"><a href="#JSX-和-Template" class="headerlink" title="JSX 和 Template"></a>JSX 和 Template</h4><p>未完待续</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设置iTerm2免密登陆ssh远程服务器</title>
      <link href="2021/03/27/%E8%AE%BE%E7%BD%AEiTerm2%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86ssh%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>2021/03/27/%E8%AE%BE%E7%BD%AEiTerm2%E5%85%8D%E5%AF%86%E7%99%BB%E9%99%86ssh%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>转载自<a href="https://zhuanlan.zhihu.com/p/180500618">https://zhuanlan.zhihu.com/p/180500618</a></p><p>原文中代码存在bug，已修改，如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/expect -f</span></span><br><span class="line"><span class="comment">#trap sigwinch spawned</span></span><br><span class="line">  <span class="built_in">trap</span> &#123;</span><br><span class="line">    <span class="built_in">set</span> rows [stty rows]</span><br><span class="line">    <span class="built_in">set</span> cols [stty columns]</span><br><span class="line">    stty rows <span class="variable">$rows</span> columns <span class="variable">$cols</span> &lt; <span class="variable">$spawn_out</span>(slave,name)</span><br><span class="line">   &#125; WINCH</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> user username</span><br><span class="line"><span class="built_in">set</span> host 0.0.0.0</span><br><span class="line"><span class="built_in">set</span> password keys</span><br><span class="line"><span class="built_in">set</span> timeout -1</span><br><span class="line">spawn ssh -XY <span class="variable">$user</span>@<span class="variable">$host</span></span><br><span class="line">expect <span class="string">&quot;*password:*&quot;</span></span><br><span class="line">send <span class="string">&quot;<span class="variable">$password</span>\r&quot;</span></span><br><span class="line">interact</span><br><span class="line">expect eof</span><br></pre></td></tr></table></figure><p>简述下逻辑就是，</p><ol><li>在本地你想存在命令的地方建个文件夹</li><li>把上面的代码写好，保存进去</li><li>然后在iterm2里配置好</li><li>之后iterm2就可以一键执行代码了，用来登录服务器，并窗口可以自适应<br>具体可以看原文</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iTerm2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React递归渲染AntD菜单</title>
      <link href="2021/03/25/React%E9%80%92%E5%BD%92%E6%B8%B2%E6%9F%93AntD%E8%8F%9C%E5%8D%95/"/>
      <url>2021/03/25/React%E9%80%92%E5%BD%92%E6%B8%B2%E6%9F%93AntD%E8%8F%9C%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h3 id="layouts的写法"><a href="#layouts的写法" class="headerlink" title="layouts的写法"></a>layouts的写法</h3><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> renderMenu = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> data.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.routes &amp;&amp; item.routes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;SubMenu</span><br><span class="line">          key=&#123;item.name&#125;</span><br><span class="line">          title=&#123;item.name&#125;</span><br><span class="line">          icon=&#123;item.icon ? createIcon(item.icon) : <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;renderMenu(item.routes)&#125;</span><br><span class="line">        &lt;/SubMenu&gt;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (item.other) <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Menu.Item key=&#123;item.path&#125; icon=&#123;item.icon ? createIcon(item.icon) : <span class="string">&#x27;&#x27;</span>&#125;&gt;</span><br><span class="line">        &#123;item.name&#125;</span><br><span class="line">      &lt;/Menu.Item&gt;</span><br><span class="line">    )</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> handleMenu = <span class="function">(<span class="params">&#123; key &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  history.push(key)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  ...</span><br><span class="line">  &lt;Menu</span><br><span class="line">    defaultSelectedKeys=&#123;[location.pathname]&#125;</span><br><span class="line">    mode=<span class="string">&quot;inline&quot;</span></span><br><span class="line">    inlineCollapsed=&#123;collapsed&#125;</span><br><span class="line">    className=&#123;style.menu&#125;</span><br><span class="line">    onClick=&#123;handleMenu&#125;</span><br><span class="line">  &gt;</span><br><span class="line">    &#123;renderMenu(routes)&#125;</span><br><span class="line">  &lt;/Menu&gt;</span><br><span class="line">  ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="routes的写法"><a href="#routes的写法" class="headerlink" title="routes的写法"></a>routes的写法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  exact: <span class="literal">true</span>,</span><br><span class="line">  path: <span class="string">&#x27;/foo&#x27;</span>,</span><br><span class="line">  component: <span class="string">&#x27;@/pages/foo&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;Foo&#x27;</span>,</span><br><span class="line">  icon: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  exact: <span class="literal">true</span>,</span><br><span class="line">  path: <span class="string">&#x27;/foobar&#x27;</span>,</span><br><span class="line">  component: <span class="string">&#x27;@/pages/foobar&#x27;</span>,</span><br><span class="line">  name: <span class="string">&#x27;Foobar&#x27;</span>,</span><br><span class="line">  icon: <span class="string">&#x27;foobar&#x27;</span>,</span><br><span class="line">  other: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  exact: <span class="literal">true</span>,</span><br><span class="line">  name: <span class="string">&#x27;Bar&#x27;</span>,</span><br><span class="line">  icon: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      exact: <span class="literal">true</span>,</span><br><span class="line">      path: <span class="string">&#x27;/baz&#x27;</span>,</span><br><span class="line">      component: <span class="string">&#x27;@/pages/baz&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;Baz&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">exact</span>: <span class="literal">true</span>, </span><br><span class="line">      path: <span class="string">&#x27;/qux&#x27;</span>, </span><br><span class="line">      component: <span class="string">&#x27;@/pages/qux&#x27;</span>, </span><br><span class="line">      name: <span class="string">&#x27;Qux&#x27;</span> </span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AntD </tag>
            
            <tag> React </tag>
            
            <tag> Menu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo中图片组件hexo-asset-image的使用</title>
      <link href="2021/03/16/hexo%E4%B8%AD%E5%9B%BE%E7%89%87%E7%BB%84%E4%BB%B6hexo-asset-image%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2021/03/16/hexo%E4%B8%AD%E5%9B%BE%E7%89%87%E7%BB%84%E4%BB%B6hexo-asset-image%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>hexo中直接通过<code>npm i hexo-asset-image</code>下载的组件由于没人维护，目前无法直接使用。<br>根据<a href="https://blog.csdn.net/xjm850552586/article/details/84101345">https://blog.csdn.net/xjm850552586/article/details/84101345</a>的代码.<br>我fork了原<code>hexo-asset-image</code>项目，在npm上发布了<code>hexo-assets-images</code>组件。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-<span class="built_in">image</span> --<span class="built_in">save</span></span><br></pre></td></tr></table></figure><p><code>hexo new post [title]</code>后，会在_posts文件夹下生成同名文件夹<br>在需要插入图片的地方写<code>![logo](logo.jpg)</code>，将插入<code>[title]</code>文件夹下logo.jpg.</p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>移动端100VH时高度不满</title>
      <link href="2021/03/09/%E7%A7%BB%E5%8A%A8%E7%AB%AF100VH%E6%97%B6%E9%AB%98%E5%BA%A6%E4%B8%8D%E6%BB%A1/"/>
      <url>2021/03/09/%E7%A7%BB%E5%8A%A8%E7%AB%AF100VH%E6%97%B6%E9%AB%98%E5%BA%A6%E4%B8%8D%E6%BB%A1/</url>
      
        <content type="html"><![CDATA[<p>参考自<a href="https://blog.csdn.net/lgno2/article/details/109446447">移动端避免使用100vh</a></p><h4 id="复现："><a href="#复现：" class="headerlink" title="复现："></a>复现：</h4><p>钉钉H5开发，使用<code>dd_full_screen=true&amp;showmenu=false</code>设置为全屏，在iphoneX上，高度不足，底部缺失部分</p><span id="more"></span><p><img src="/2021/03/09/%E7%A7%BB%E5%8A%A8%E7%AB%AF100VH%E6%97%B6%E9%AB%98%E5%BA%A6%E4%B8%8D%E6%BB%A1/image.png"></p><h4 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h4><p>核心问题是移动浏览器（我正在为您浏览，Chrome和Safari）具有“帮助”功能，其中地址栏有时可见，有时隐藏，从而改变了视口的可见大小。这些浏览器没有将100vh高度调整为视口高度变化时屏幕的可见部分，而是将100vh设置为浏览器的高度，并隐藏了地址栏。结果是，当地址栏可见时，屏幕的底部将被切除。</p><p>如下所示：<br><img src="/2021/03/09/%E7%A7%BB%E5%8A%A8%E7%AB%AF100VH%E6%97%B6%E9%AB%98%E5%BA%A6%E4%B8%8D%E6%BB%A1/image2.jpg"></p><p>当显示地址栏时，由于移动浏览器错误地将100vh设置为屏幕高度而没有显示地址栏，因此屏幕底部被切断。在上图中，应隐藏在屏幕底部的按钮。更糟糕的是，当用户首次访问移动设备上的网站时，地址栏将在顶部可见，因此默认的体验是破碎的体验。</p><h4 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h4><p>使用window.innerHeight动态设置高度</p>]]></content>
      
      
      <categories>
          
          <category> 报错 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动端适配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AntD中menu动态生成，及动态生成Icon</title>
      <link href="2021/03/09/AntD%E4%B8%ADmenu%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%EF%BC%8C%E5%8F%8A%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90Icon/"/>
      <url>2021/03/09/AntD%E4%B8%ADmenu%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90%EF%BC%8C%E5%8F%8A%E5%8A%A8%E6%80%81%E7%94%9F%E6%88%90Icon/</url>
      
        <content type="html"><![CDATA[<p>在 routes.ts 里面配置路由，menu 根据 routes 动态生成</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    exact: <span class="literal">false</span>,</span><br><span class="line">    path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    component: <span class="string">&#x27;@/layouts/index&#x27;</span>,</span><br><span class="line">    routes: [</span><br><span class="line">      &#123;</span><br><span class="line">        exact: <span class="literal">true</span>,</span><br><span class="line">        path: <span class="string">&#x27;/overview&#x27;</span>,</span><br><span class="line">        component: <span class="string">&#x27;@/pages/Overview&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;总览&#x27;</span>,</span><br><span class="line">        icon: <span class="string">&#x27;RadarChartOutlined&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        exact: <span class="literal">true</span>,</span><br><span class="line">        path: <span class="string">&#x27;/events&#x27;</span>,</span><br><span class="line">        component: <span class="string">&#x27;@/pages/Events&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;事件列表&#x27;</span>,</span><br><span class="line">        icon: <span class="string">&#x27;BarsOutlined&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        exact: <span class="literal">true</span>,</span><br><span class="line">        path: <span class="string">&#x27;/feedback&#x27;</span>,</span><br><span class="line">        component: <span class="string">&#x27;@/pages/Feedback&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;情报反馈&#x27;</span>,</span><br><span class="line">        icon: <span class="string">&#x27;AlertOutlined&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        exact: <span class="literal">true</span>,</span><br><span class="line">        path: <span class="string">&#x27;/contacts&#x27;</span>,</span><br><span class="line">        component: <span class="string">&#x27;@/pages/Contacts&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;联系人&#x27;</span>,</span><br><span class="line">        icon: <span class="string">&#x27;DeploymentUnitOutlined&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        exact: <span class="literal">true</span>,</span><br><span class="line">        name: <span class="string">&#x27;后台管理&#x27;</span>,</span><br><span class="line">        icon: <span class="string">&#x27;SlidersOutlined&#x27;</span>,</span><br><span class="line">        routes: [</span><br><span class="line">          &#123;</span><br><span class="line">            exact: <span class="literal">true</span>,</span><br><span class="line">            path: <span class="string">&#x27;/classifications&#x27;</span>,</span><br><span class="line">            component: <span class="string">&#x27;@/pages/Classifications&#x27;</span>,</span><br><span class="line">            name: <span class="string">&#x27;分类管理&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          &#123;</span><br><span class="line">            exact: <span class="literal">true</span>,</span><br><span class="line">            path: <span class="string">&#x27;/records&#x27;</span>,</span><br><span class="line">            component: <span class="string">&#x27;@/pages/Records&#x27;</span>,</span><br><span class="line">            name: <span class="string">&#x27;操作日志&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>生成 menu</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Icon <span class="keyword">from</span> <span class="string">&#x27;@alipay/bigfish/icons&#x27;</span>;</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">// 用React.createElement动态创建元素</span></span><br><span class="line"><span class="keyword">const</span> createIcon = <span class="function">(<span class="params">name: string</span>) =&gt;</span></span><br><span class="line">  React.createElement(Icon &amp;&amp; (Icon <span class="keyword">as</span> any)[name], &#123;</span><br><span class="line">    style: &#123; <span class="attr">fontSize</span>: <span class="string">&#x27;16px&#x27;</span> &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="keyword">const</span> renderMenu = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> data.map(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (item.routes &amp;&amp; item.routes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;SubMenu key=&#123;item.name&#125; title=&#123;item.name&#125; icon=&#123;item.icon ? createIcon(item.icon) : <span class="string">&#x27;&#x27;</span>&#125;&gt;</span><br><span class="line">          &#123;renderMenu(item.routes)&#125;</span><br><span class="line">        &lt;/SubMenu&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Menu.Item key=&#123;item.path&#125; icon=&#123;item.icon ? createIcon(item.icon) : <span class="string">&#x27;&#x27;</span>&#125;&gt;</span><br><span class="line">        &#123;item.name&#125;</span><br><span class="line">      &lt;/Menu.Item&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">  ...</span><br><span class="line">    &lt;Menu</span><br><span class="line">      defaultSelectedKeys=&#123;[location.pathname]&#125;</span><br><span class="line">      <span class="comment">// defaultOpenKeys=&#123;[&#x27;sub1&#x27;]&#125;</span></span><br><span class="line">      mode=<span class="string">&quot;inline&quot;</span></span><br><span class="line">      inlineCollapsed=&#123;collapsed&#125;</span><br><span class="line">      className=&#123;style.menu&#125;</span><br><span class="line">      onClick=&#123;handleMenu&#125;</span><br><span class="line">    &gt;</span><br><span class="line">      &#123; renderMenu(routes) &#125;</span><br><span class="line">    &lt;/Menu&gt;</span><br><span class="line">  ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AntD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在mac上使用android模拟器通过chrome调试webview内页面</title>
      <link href="2021/02/09/%E5%9C%A8mac%E4%B8%8A%E4%BD%BF%E7%94%A8android%E6%A8%A1%E6%8B%9F%E5%99%A8%E9%80%9A%E8%BF%87chrome%E8%B0%83%E8%AF%95webview%E5%86%85%E9%A1%B5%E9%9D%A2/"/>
      <url>2021/02/09/%E5%9C%A8mac%E4%B8%8A%E4%BD%BF%E7%94%A8android%E6%A8%A1%E6%8B%9F%E5%99%A8%E9%80%9A%E8%BF%87chrome%E8%B0%83%E8%AF%95webview%E5%86%85%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol><li>钉钉dev App <a href="http://download.alicdn.com/wireless/dingtalk/latest/rimet_10006337.apk?spm=ding_open_doc.document.0.0.4f077391n1eV6r&file=rimet_10006337.apk">下载地址</a></li><li>网易mumu模拟器（不使用VirtualBox等违规软件）</li><li>adb工具包<br>• 检查是否安装过 <code>adb devices</code><br>• 通过brew安装 <code>brew cask install android-platform-tools</code><br>• 检查不通过的话，重启一下 <code>adb kill-server &amp;&amp; adb server &amp;&amp; adb shell</code></li><li>android开发工具(只为了android的驱动，如果可以连接，那就不用装了) <a href="https://developer.android.com/">下载地址</a></li><li>chrome浏览器<h4 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h4></li><li>在mumu中安钉钉dev.apk，拖进去就行</li><li>在mumu中打开<code>开发者模式</code>，并启用<code>usb调试</code></li><li>在mumu文件管理中点击左上角图标，再点击左下角设置图标，选择常规设置-访问模式，选择超级用户访问模式</li><li>在mumu文件管理中搜索hosts，添加mac的ip地址和local.alipay.net 如：<code>30.38.33.35       local.alipay.net</code></li><li>打开钉钉dev，前往要调试的页面</li><li>打开chrome，输入<code>chrome://inspect</code></li><li>选择对应页面调试<h4 id="可能存在的问题"><a href="#可能存在的问题" class="headerlink" title="可能存在的问题"></a>可能存在的问题</h4></li><li>如果手机打开页面后，inspect中仍然看不到，就重启adb  <code>adb kill-server &amp;&amp; adb server &amp;&amp; adb shell</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> android模拟器 </tag>
            
            <tag> webview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用JS获取translate3d中的数值</title>
      <link href="2021/02/09/%E7%94%A8JS%E8%8E%B7%E5%8F%96translate3d%E4%B8%AD%E7%9A%84%E6%95%B0%E5%80%BC/"/>
      <url>2021/02/09/%E7%94%A8JS%E8%8E%B7%E5%8F%96translate3d%E4%B8%AD%E7%9A%84%E6%95%B0%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>代码如下：</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取DOM</span></span><br><span class="line"><span class="keyword">const</span> scrollContainer = <span class="built_in">document</span>.getElementsByClassName(</span><br><span class="line">  <span class="string">&#x27;viewer-container__viewer-image-container&#x27;</span></span><br><span class="line">)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">const</span> imgDom = scrollContainer.childNodes[<span class="number">0</span>]</span><br><span class="line"><span class="comment">// 获取transform</span></span><br><span class="line"><span class="keyword">const</span> translates = <span class="built_in">document</span>.defaultView.getComputedStyle(imgDom, <span class="literal">null</span>).transform <span class="comment">//  matrix(a,b,c,d,e,f)</span></span><br><span class="line"><span class="comment">// 分割matrix矩阵，需要先清除多出来的一个)</span></span><br><span class="line"><span class="keyword">const</span> split = translates.replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line"><span class="comment">// 获取y轴值</span></span><br><span class="line"><span class="keyword">const</span> y = <span class="built_in">Number</span>(split[split.length - <span class="number">1</span>])</span><br><span class="line"><span class="comment">// 获取x轴值</span></span><br><span class="line"><span class="keyword">const</span> x = <span class="built_in">Number</span>(split[split.length - <span class="number">2</span>])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> translate3d </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS十大经典排序</title>
      <link href="2021/01/05/JS%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F/"/>
      <url>2021/01/05/JS%E5%8D%81%E5%A4%A7%E7%BB%8F%E5%85%B8%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/yinhao-jack/p/10838401.html">https://www.cnblogs.com/yinhao-jack/p/10838401.html</a></p><h4 id="1-冒泡排序（Bubble-Sort）"><a href="#1-冒泡排序（Bubble-Sort）" class="headerlink" title="1. 冒泡排序（Bubble Sort）"></a>1. 冒泡排序（Bubble Sort）</h4><p>冒泡排序须知：<br>作为最简单的排序算法之一，冒泡排序给我的感觉就像 Abandon 在单词书里出现的感觉一样，每次都在第一页第一位，所以最熟悉。。。冒泡排序还有一种优化算法，就是立一个 flag，当在一趟序列遍历中元素没有发生交换，则证明该序列已经有序。但这种改进对于提升性能来说并没有什么太大作用。。。</p><p>什么时候最快（Best Cases）：<br>当输入的数据已经是正序时（都已经是正序了，我还要你冒泡排序有何用啊。。。。）</p><p>什么时候最慢（Worst Cases）：<br>当输入的数据是反序时（写一个 for 循环反序输出数据不就行了，干嘛要用你冒泡排序呢，我是闲的吗。。。）</p><p>冒泡排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; len - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="comment">//相邻元素两两对比</span></span><br><span class="line">        <span class="keyword">var</span> temp = arr[j + <span class="number">1</span>] <span class="comment">//元素交换</span></span><br><span class="line">        arr[j + <span class="number">1</span>] = arr[j]</span><br><span class="line">        arr[j] = temp</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-选择排序（Selection-Sort）"><a href="#2-选择排序（Selection-Sort）" class="headerlink" title="2. 选择排序（Selection Sort）"></a>2. 选择排序（Selection Sort）</h4><p>选择排序须知：<br>在时间复杂度上表现最稳定的排序算法之一，因为无论什么数据进去都是 O(n²)的时间复杂度。。。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p><p>选择排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">selectionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length</span><br><span class="line">  <span class="keyword">var</span> minIndex, temp</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    minIndex = i</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &lt; arr[minIndex]) &#123;</span><br><span class="line">        <span class="comment">//寻找最小的数</span></span><br><span class="line">        minIndex = j <span class="comment">//将最小数的索引保存</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    temp = arr[i]</span><br><span class="line">    arr[i] = arr[minIndex]</span><br><span class="line">    arr[minIndex] = temp</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-插入排序（Insertion-Sort）"><a href="#3-插入排序（Insertion-Sort）" class="headerlink" title="3. 插入排序（Insertion Sort）"></a>3. 插入排序（Insertion Sort）</h4><p>插入排序须知：<br>插入排序的代码实现虽然没有冒泡排序和选择排序那么简单粗暴，但它的原理应该是最容易理解的了，因为只要打过扑克牌的人都应该能够秒懂。当然，如果你说你打扑克牌摸牌的时候从来不按牌的大小整理牌，那估计这辈子你对插入排序的算法都不会产生任何兴趣了。。。<br>插入排序和冒泡排序一样，也有一种优化算法，叫做拆半插入。对于这种算法，得了懒癌的我就套用教科书上的一句经典的话吧：感兴趣的同学可以在课后自行研究。。。</p><p>插入排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertionSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length</span><br><span class="line">  <span class="keyword">var</span> preIndex, current</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">    preIndex = i - <span class="number">1</span></span><br><span class="line">    current = arr[i]</span><br><span class="line">    <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; arr[preIndex] &gt; current) &#123;</span><br><span class="line">      arr[preIndex + <span class="number">1</span>] = arr[preIndex]</span><br><span class="line">      preIndex--</span><br><span class="line">    &#125;</span><br><span class="line">    arr[preIndex + <span class="number">1</span>] = current</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-希尔排序（Shell-Sort）"><a href="#4-希尔排序（Shell-Sort）" class="headerlink" title="4. 希尔排序（Shell Sort）"></a>4. 希尔排序（Shell Sort）</h5><p>希尔排序须知：<br>希尔排序是插入排序的一种更高效率的实现。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序的核心在于间隔序列的设定。既可以提前设定好间隔序列，也可以动态的定义间隔序列。动态定义间隔序列的算法是《算法（第 4 版》的合著者 Robert Sedgewick 提出的。在这里，我就使用了这种方法。</p><p>希尔排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">shellSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length,</span><br><span class="line">    temp,</span><br><span class="line">    gap = <span class="number">1</span></span><br><span class="line">  <span class="keyword">while</span> (gap &lt; len / <span class="number">3</span>) &#123;</span><br><span class="line">    <span class="comment">//动态定义间隔序列</span></span><br><span class="line">    gap = gap * <span class="number">3</span> + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (gap; gap &gt; <span class="number">0</span>; gap = <span class="built_in">Math</span>.floor(gap / <span class="number">3</span>)) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = gap; i &lt; len; i++) &#123;</span><br><span class="line">      temp = arr[i]</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = i - gap; j &gt; <span class="number">0</span> &amp;&amp; arr[j] &gt; temp; j -= gap) &#123;</span><br><span class="line">        arr[j + gap] = arr[j]</span><br><span class="line">      &#125;</span><br><span class="line">      arr[j + gap] = temp</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-归并排序（Merge-Sort）"><a href="#5-归并排序（Merge-Sort）" class="headerlink" title="5. 归并排序（Merge Sort）"></a>5. 归并排序（Merge Sort）</h4><p>归并排序须知：<br>作为一种典型的分而治之思想的算法应用，归并排序的实现由两种方法：</p><p>自上而下的递归（所有递归的方法都可以用迭代重写，所以就有了第 2 种方法）<br>自下而上的迭代<br>在《数据结构与算法 JavaScript 描述》中，作者给出了自下而上的迭代方法。但是对于递归法，作者却认为：</p><blockquote><p>However, it is not possible to do so in JavaScript, as the recursion goes too deep for the language to handle.<br>然而,在 JavaScript 中这种方式不太可行,因为这个算法的递归深度对它来讲太深了。</p></blockquote><p>说实话，我不太理解这句话。意思是 JavaScript 编译器内存太小，递归太深容易造成内存溢出吗？还望有大神能够指教。<br>更新：<br>在《JavaScript 语言精粹》的第四章里提到了递归问题。对我之前的疑问进行了解答：</p><blockquote><p>Some languages offer the tail recursion optimization. This means that if a function returns the result of invoking itself recursively, then the invocation is replaced with a loop, which can significantly speed things up. Unfortunately, JavaScript does not currently provide tail recursion optimization. Functions that recurse very deeply can fail by exhausting the return stack.<br>一些语言提供了尾递归优化。这意味着如果一个函数返回自身递归调用的结果，那么调用的过程会被替换为一个循环，它可以显著提高速度。遗憾的是，JavaScript 当前并没有提供尾递归优化。深度递归的函数可能会因为堆栈溢出而运行失败。</p></blockquote><p>简而言之，就是 JavaScript 没有对递归进行优化。运用递归函数不仅没有运行速度上的优势，还可能造成程序运行失败。因此不建议使用递归。</p><p>和选择排序一样，归并排序的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是 O(n log n）的时间复杂度。代价是需要额外的内存空间。</p><p>归并排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mergeSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//采用自上而下的递归方法</span></span><br><span class="line">  <span class="keyword">var</span> len = arr.length</span><br><span class="line">  <span class="keyword">if</span> (len &lt; <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> middle = <span class="built_in">Math</span>.floor(len / <span class="number">2</span>),</span><br><span class="line">    left = arr.slice(<span class="number">0</span>, middle),</span><br><span class="line">    right = arr.slice(middle)</span><br><span class="line">  <span class="keyword">return</span> merge(mergeSort(left), mergeSort(right))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = []</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (left.length &gt; <span class="number">0</span> &amp;&amp; right.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (left[<span class="number">0</span>] &lt;= right[<span class="number">0</span>]) &#123;</span><br><span class="line">      result.push(left.shift())</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      result.push(right.shift())</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (left.length) result.push(left.shift())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (right.length) result.push(right.shift())</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-快速排序（Quick-Sort）"><a href="#6-快速排序（Quick-Sort）" class="headerlink" title="6. 快速排序（Quick Sort）"></a>6. 快速排序（Quick Sort）</h4><p>快速排序须知：<br>又是一种分而治之思想在排序算法上的典型应用。本质上来看，快速排序应该算是在冒泡排序基础上的递归分治法。<br>快速排序的名字起的是简单粗暴，因为一听到这个名字你就知道它存在的意义，就是快，而且效率高! 它是处理大数据最快的排序算法之一了。虽然 Worst Case 的时间复杂度达到了 O(n²)，但是人家就是优秀，在大多数情况下都比平均时间复杂度为 O(n log n) 的排序算法表现要更好，可是这是为什么呢，我也不知道。。。好在我的强迫症又犯了，查了 N 多资料终于在《算法艺术与信息学竞赛》上找到了满意的答案：</p><p>快速排序的最坏运行情况是 O(n²)，比如说顺序数列的快排。但它的平摊期望时间是 O(n log n) ，且 O(n log n)记号中隐含的常数因子很小，比复杂度稳定等于 O(n log n)的归并排序要小很多。所以，对绝大多数顺序性较弱的随机数列而言，快速排序总是优于归并排序。</p><p>更新：<br>《算法 第四版》里对于快速排序的优缺点进行了更加明确的解释：</p><p>快速排序的内循环比大多数排序算法都要短小，这意味着它无论是在理论上还是在实际中都要更快。它的主要缺点是非常脆弱，在实现时要非常小心才能避免低劣的性能。</p><p>快速排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr, left, right</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> len = arr.length,</span><br><span class="line">    partitionIndex,</span><br><span class="line">    left = <span class="keyword">typeof</span> left != <span class="string">&#x27;number&#x27;</span> ? <span class="number">0</span> : left,</span><br><span class="line">    right = <span class="keyword">typeof</span> right != <span class="string">&#x27;number&#x27;</span> ? len - <span class="number">1</span> : right</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">    partitionIndex = partition(arr, left, right)</span><br><span class="line">    quickSort(arr, left, partitionIndex - <span class="number">1</span>)</span><br><span class="line">    quickSort(arr, partitionIndex + <span class="number">1</span>, right)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">partition</span>(<span class="params">arr, left, right</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//分区操作</span></span><br><span class="line">  <span class="keyword">var</span> pivot = left, <span class="comment">//设定基准值（pivot）</span></span><br><span class="line">    index = pivot + <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = index; i &lt;= right; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; arr[pivot]) &#123;</span><br><span class="line">      swap(arr, i, index)</span><br><span class="line">      index++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  swap(arr, pivot, index - <span class="number">1</span>)</span><br><span class="line">  <span class="keyword">return</span> index - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> temp = arr[i]</span><br><span class="line">  arr[i] = arr[j]</span><br><span class="line">  arr[j] = temp</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-堆排序（Heap-Sort）"><a href="#7-堆排序（Heap-Sort）" class="headerlink" title="7. 堆排序（Heap Sort）"></a>7. 堆排序（Heap Sort）</h4><p>堆排序须知：<br>堆排序可以说是一种利用堆的概念来排序的选择排序。分为两种方法：</p><pre><code>大顶堆：每个节点的值都大于或等于其子节点的值，在堆排序算法中用于升序排列小顶堆：每个节点的值都小于或等于其子节点的值，在堆排序算法中用于降序排列</code></pre><p>堆排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> len;    <span class="comment">//因为声明的多个函数都需要数据长度，所以把len设置成为全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildMaxHeap</span>(<span class="params">arr</span>) </span>&#123;   <span class="comment">//建立大顶堆</span></span><br><span class="line">     len = arr.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="built_in">Math</span>.floor(len/<span class="number">2</span>); i &amp;gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        heapify(arr, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">heapify</span>(<span class="params">arr, i</span>) </span>&#123;     <span class="comment">//堆调整</span></span><br><span class="line">    <span class="keyword">var</span> left = <span class="number">2</span> * i + <span class="number">1</span>,</span><br><span class="line">         right = <span class="number">2</span> * i + <span class="number">2</span>,</span><br><span class="line">         largest = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (left &lt; len &amp;&amp; arr[left] &gt; arr[largest]) &#123;</span><br><span class="line">        largest = left;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (right &lt; len &amp;&amp; arr[right] &gt; arr[largest]) &#123;</span><br><span class="line">         largest = right;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (largest != i) &#123;</span><br><span class="line">         swap(arr, i, largest);</span><br><span class="line">        heapify(arr, largest);</span><br><span class="line">    &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">arr, i, j</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> temp = arr[i];</span><br><span class="line">    arr[i] = arr[j];</span><br><span class="line">    arr[j] = temp;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">heapSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">     buildMaxHeap(arr);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = arr.length-<span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">         swap(arr, <span class="number">0</span>, i);</span><br><span class="line">        len--;</span><br><span class="line">        heapify(arr, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-计数排序（Counting-Sort）"><a href="#8-计数排序（Counting-Sort）" class="headerlink" title="8. 计数排序（Counting Sort）"></a>8. 计数排序（Counting Sort）</h4><p>计数排序须知：<br>计数排序的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。<br>作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p><p>计数排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">countingSort</span>(<span class="params">arr, maxValue</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bucket = <span class="keyword">new</span> <span class="built_in">Array</span>(maxValue + <span class="number">1</span>),</span><br><span class="line">    sortedIndex = <span class="number">0</span></span><br><span class="line">  ;(arrLen = arr.length), (bucketLen = maxValue + <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arrLen; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!bucket[arr[i]]) &#123;</span><br><span class="line">      bucket[arr[i]] = <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">    bucket[arr[i]]++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; bucketLen; j++) &#123;</span><br><span class="line">    <span class="keyword">while</span> (bucket[j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      arr[sortedIndex++] = j</span><br><span class="line">      bucket[j]--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-桶排序（Bucket-Sort）"><a href="#9-桶排序（Bucket-Sort）" class="headerlink" title="9. 桶排序（Bucket Sort）"></a>9. 桶排序（Bucket Sort）</h4><p>桶排序须知：<br>桶排序是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。<br>为了使桶排序更加高效，我们需要做到这两点：</p><p>在额外空间充足的情况下，尽量增大桶的数量<br>使用的映射函数能够将输入的 N 个数据均匀的分配到 K 个桶中<br>同时，对于桶中元素的排序，选择何种比较排序算法对于性能的影响至关重要。</p><p>什么时候最快（Best Cases）：<br>当输入的数据可以均匀的分配到每一个桶中</p><p>什么时候最慢（Worst Cases）：<br>当输入的数据被分配到了同一个桶中</p><p>桶排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bucketSort</span>(<span class="params">arr, bucketSize</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (arr.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> i</span><br><span class="line">  <span class="keyword">var</span> minValue = arr[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">var</span> maxValue = arr[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] &lt; minValue) &#123;</span><br><span class="line">      minValue = arr[i] <span class="comment">//输入数据的最小值</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (arr[i] &gt; maxValue) &#123;</span><br><span class="line">      maxValue = arr[i] <span class="comment">//输入数据的最大值</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//桶的初始化</span></span><br><span class="line">  <span class="keyword">var</span> DEFAULT_BUCKET_SIZE = <span class="number">5</span> <span class="comment">//设置桶的默认数量为5</span></span><br><span class="line">  bucketSize = bucketSize || DEFAULT_BUCKET_SIZE</span><br><span class="line">  <span class="keyword">var</span> bucketCount = <span class="built_in">Math</span>.floor((maxValue - minValue) / bucketSize) + <span class="number">1</span></span><br><span class="line">  <span class="keyword">var</span> buckets = <span class="keyword">new</span> <span class="built_in">Array</span>(bucketCount)</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; buckets.length; i++) &#123;</span><br><span class="line">    buckets[i] = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//利用映射函数将数据分配到各个桶中</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    buckets[<span class="built_in">Math</span>.floor((arr[i] - minValue) / bucketSize)].push(arr[i])</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  arr.length = <span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; buckets.length; i++) &#123;</span><br><span class="line">    insertionSort(buckets[i]) <span class="comment">//对每个桶进行排序，这里使用了插入排序</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; buckets[i].length; j++) &#123;</span><br><span class="line">      arr.push(buckets[i][j])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-基数排序（Radix-Sort）"><a href="#10-基数排序（Radix-Sort）" class="headerlink" title="10. 基数排序（Radix Sort）"></a>10. 基数排序（Radix Sort）</h4><p>基数排序须知：<br>基数排序有两种方法：</p><p>MSD 从高位开始进行排序<br>LSD 从低位开始进行排序<br>基数排序 vs 计数排序 vs 桶排序<br>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：<br>基数排序：根据键值的每位数字来分配桶<br>计数排序：每个桶只存储单一键值<br>桶排序：每个桶存储一定范围的数值</p><p>基数排序 JavaScript 代码实现：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//LSD Radix Sort</span></span><br><span class="line"><span class="keyword">var</span> counter = []</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">radixSort</span>(<span class="params">arr, maxDigit</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> mod = <span class="number">10</span></span><br><span class="line">  <span class="keyword">var</span> dev = <span class="number">1</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; maxDigit; i++, dev *= <span class="number">10</span>, mod *= <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">      <span class="keyword">var</span> bucket = <span class="built_in">parseInt</span>((arr[j] % mod) / dev)</span><br><span class="line">      <span class="keyword">if</span> (counter[bucket] == <span class="literal">null</span>) &#123;</span><br><span class="line">        counter[bucket] = []</span><br><span class="line">      &#125;</span><br><span class="line">      counter[bucket].push(arr[j])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> pos = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; counter.length; j++) &#123;</span><br><span class="line">      <span class="keyword">var</span> value = <span class="literal">null</span></span><br><span class="line">      <span class="keyword">if</span> (counter[j] != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span> ((value = counter[j].shift()) != <span class="literal">null</span>) &#123;</span><br><span class="line">          arr[pos++] = value</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 思维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>this指向的4种情况</title>
      <link href="2021/01/05/this%E6%8C%87%E5%90%91%E7%9A%844%E7%A7%8D%E6%83%85%E5%86%B5/"/>
      <url>2021/01/05/this%E6%8C%87%E5%90%91%E7%9A%844%E7%A7%8D%E6%83%85%E5%86%B5/</url>
      
        <content type="html"><![CDATA[<h4 id="1-在对象属性中的-this"><a href="#1-在对象属性中的-this" class="headerlink" title="1. 在对象属性中的 this"></a>1. 在对象属性中的 this</h4><p>对象的属性是函数，那么函数中的 this 指向对象本身</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  x: <span class="number">123</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// &#123;x: 123, fn: ƒ&#125;</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.x) <span class="comment">// 123</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">obj.fn()</span><br></pre></td></tr></table></figure><p>对象的属性是函数，函数内部还有函数，那么二级（及以上）函数的 this 都指向 window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  x: <span class="number">456</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;fn&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// &#123;x: 456, fn: ƒ&#125;</span></span><br><span class="line">    <span class="keyword">var</span> f1 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;fn.f1&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …&#125;</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.x) <span class="comment">// undefined</span></span><br><span class="line">      <span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;fn.f2&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …&#125;</span></span><br><span class="line">      &#125;</span><br><span class="line">      f2()</span><br><span class="line">    &#125;</span><br><span class="line">    f1()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">obj.fn()</span><br></pre></td></tr></table></figure><h4 id="2-构造函数中的-this"><a href="#2-构造函数中的-this" class="headerlink" title="2. 构造函数中的 this"></a>2. 构造函数中的 this</h4><p>构造函数中的一级函数，this 指向通过构造函数 new 出来的实例（例子中的 person）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&#x27;linlif&#x27;</span></span><br><span class="line">  <span class="built_in">this</span>.fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;fn&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// &#123;name: &quot;linlif&quot;, fn: ƒ&#125;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</span><br><span class="line">person.fn()</span><br></pre></td></tr></table></figure><p>构造函数中的二级(及以上)函数，this 指向的是 window</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = <span class="string">&#x27;linlif&#x27;</span></span><br><span class="line">  <span class="built_in">this</span>.fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;fn&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// &#123;name: &quot;linlif&quot;, fn: ƒ&#125;</span></span><br><span class="line">    <span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;f2&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …&#125;</span></span><br><span class="line">      <span class="keyword">var</span> f3 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;f3&#x27;</span>, <span class="built_in">this</span>) <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …&#125;</span></span><br><span class="line">      &#125;</span><br><span class="line">      f3()</span><br><span class="line">    &#125;</span><br><span class="line">    f2()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person()</span><br><span class="line">person.fn()</span><br></pre></td></tr></table></figure><h4 id="3-全局上下文环境中-this"><a href="#3-全局上下文环境中-this" class="headerlink" title="3. 全局上下文环境中 this"></a>3. 全局上下文环境中 this</h4><p>全局上下文环境，this 指向浏览器的 window 对象，例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局的this</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span> === <span class="built_in">window</span>) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局的普通函数</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">global</span> = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">global</span>()</span><br></pre></td></tr></table></figure><h4 id="4-call-和-apply-对-this-指向的影响"><a href="#4-call-和-apply-对-this-指向的影响" class="headerlink" title="4. call()和 apply()对 this 指向的影响"></a>4. call()和 apply()对 this 指向的影响</h4><p>使用 call()方法后，this 指向 call()方法的参数。使用 apply()的结果和 call()是一致的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 改变调用对象为gObj</span></span><br><span class="line"><span class="keyword">var</span> gObj = &#123;</span><br><span class="line">  name: <span class="string">&#x27;gName&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> aaa = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// &#123;name: &quot;gName&quot;&#125;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name) <span class="comment">// gName</span></span><br><span class="line">&#125;</span><br><span class="line">aaa.call(gObj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 改变调用对象为window</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;global&#x27;</span></span><br><span class="line"><span class="keyword">var</span> bbb = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>) <span class="comment">// Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …&#125;</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name) <span class="comment">// global</span></span><br><span class="line">&#125;</span><br><span class="line">bbb.call(<span class="built_in">this</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="2021/01/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>2021/01/05/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h4><p>1、单例模式<br>这种设计模式的思想是确保一个类只有唯一实例，一般用于全局缓存，比如全局window，唯一登录浮窗等。采用闭包的方式实现如下：</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> single = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getInstance</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="comment">// 如果该实例存在，则直接返回，否则就对其实例化</span></span><br><span class="line">        <span class="keyword">if</span>( instance=== <span class="literal">undefined</span> )&#123;</span><br><span class="line">            instance= <span class="keyword">new</span> Construct();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// ... 生成单例的构造函数的代码</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getInstance : getInstance</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>2、工厂模式<br>工厂模式是创建对象的常用设计模式，为了不暴露创建对象的具体逻辑，将逻辑封装在一个函数中，这个函数就称为一个工厂。本质上是一个负责生产对象实例的工厂。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安全模式创建的工厂方法函数</span></span><br><span class="line"><span class="keyword">let</span> UserFactory = <span class="function"><span class="keyword">function</span>(<span class="params">role</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">this</span> <span class="keyword">instanceof</span> UserFactory) &#123;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="keyword">new</span> <span class="built_in">this</span>[role]();</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> UserFactory(role);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//工厂方法函数的原型中设置所有对象的构造函数</span></span><br><span class="line">UserFactory.prototype = &#123;</span><br><span class="line">  SuperAdmin: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;超级管理员&quot;</span>,</span><br><span class="line">    <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;通讯录&#x27;</span>, <span class="string">&#x27;发现页&#x27;</span>, <span class="string">&#x27;应用数据&#x27;</span>, <span class="string">&#x27;权限管理&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  Admin: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;管理员&quot;</span>,</span><br><span class="line">    <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;通讯录&#x27;</span>, <span class="string">&#x27;发现页&#x27;</span>, <span class="string">&#x27;应用数据&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  NormalUser: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;普通用户&#x27;</span>,</span><br><span class="line">    <span class="built_in">this</span>.viewPage = [<span class="string">&#x27;首页&#x27;</span>, <span class="string">&#x27;通讯录&#x27;</span>, <span class="string">&#x27;发现页&#x27;</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用</span></span><br><span class="line"><span class="keyword">let</span> superAdmin = UserFactory(<span class="string">&#x27;SuperAdmin&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> admin = UserFactory(<span class="string">&#x27;Admin&#x27;</span>) </span><br><span class="line"><span class="keyword">let</span> normalUser = UserFactory(<span class="string">&#x27;NormalUser&#x27;</span>)</span><br></pre></td></tr></table></figure><p>3、策略模式<br>策略模式的本意将算法的使用与算法的实现分离开来，避免多重判断调用哪些算法。适用于有多个判断分支的场景，如解决表单验证的问题。你可以创建一个validator对象，有一个validate()方法。这个方法被调用时不用区分具体的表单类型，它总是会返回同样的结果——一个没有通过验证的列表和错误信息。实现方式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对于vip客户</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">vipPrice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.discount = <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">vipPrice.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">　　<span class="keyword">return</span> price * <span class="built_in">this</span>.discount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对于老客户</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">oldPrice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.discount = <span class="number">0.3</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">oldPrice.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> price * <span class="built_in">this</span>.discount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 对于普通客户</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Price</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.discount = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Price.prototype.getPrice = <span class="function"><span class="keyword">function</span>(<span class="params">price</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> price ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上下文，对于客户端的使用</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Context</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="built_in">this</span>.strategy = <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">this</span>.price = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">Context.prototype.set = <span class="function"><span class="keyword">function</span>(<span class="params">name, strategy, price</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.strategy = strategy;</span><br><span class="line">    <span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line">Context.prototype.getResult = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.name + <span class="string">&#x27; 的结账价为: &#x27;</span> + <span class="built_in">this</span>.strategy.getPrice(<span class="built_in">this</span>.price));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> context = <span class="keyword">new</span> Context();</span><br><span class="line"><span class="keyword">var</span> vip = <span class="keyword">new</span> vipPrice();</span><br><span class="line">context.set (<span class="string">&#x27;vip客户&#x27;</span>, vip, <span class="number">200</span>);</span><br><span class="line">context.getResult();   <span class="comment">// vip客户 的结账价为: 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> old = <span class="keyword">new</span> oldPrice();</span><br><span class="line">context.set (<span class="string">&#x27;老客户&#x27;</span>, old, <span class="number">200</span>);</span><br><span class="line">context.getResult();  <span class="comment">// 老客户 的结账价为: 60</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Price = <span class="keyword">new</span> Price();</span><br><span class="line">context.set (<span class="string">&#x27;普通客户&#x27;</span>, Price, <span class="number">200</span>);</span><br><span class="line">context.getResult();  <span class="comment">// 普通客户 的结账价为: 200</span></span><br></pre></td></tr></table></figure><p>4、代理模式<br>代理模式是为其他对象提供一种代理，也就是当其他对象直接访问该对象时，如果开销较大，就可以通过这个代理层控制对该对象的访问。常见的使用场景为懒加载，合并http请求和缓存。代理模式的实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 目标对象，是真正被代理的对象</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Subject</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    Subject.prototype.request = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Proxy</span>(<span class="params">realSubject</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.realSubject = realSubject;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Proxy</span>.prototype.request = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.realSubject.request();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;());</span><br></pre></td></tr></table></figure><p>5、观察者模式<br>也叫发布订阅模式，在这种模式中，一个订阅者订阅发布者，当一个特定的事件发生的时候，发布者会通知（调用）所有的订阅者。实现代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> EventCenter = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> events = &#123;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">on</span>(<span class="params">event, handler</span>)</span>&#123;</span><br><span class="line">        events[event] = events[event] || [];</span><br><span class="line">        events[event].push(&#123;</span><br><span class="line">            handler: handler</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fire</span>(<span class="params">event, args</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!events[event]) &#123;<span class="keyword">return</span>&#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; events[event].length; i++) &#123;</span><br><span class="line">            events[event][i].handler(args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">off</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">delete</span> events[event];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        on: on,</span><br><span class="line">        fire: fire,</span><br><span class="line">        off: off</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">EventCenter.on(<span class="string">&#x27;event&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;event received...&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>6、模块模式<br>模块模式可以指定类想暴露的属性和方法，并且不会污染全局。采用闭包的形式，实现如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>&#123;</span><br><span class="line">        name: name,</span><br><span class="line">        sayName: sayName</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><p>7、构造函数模式和混合模式<br>构造函数和混合模式就是js中继承的两种实现方式，前者通过构造函数的形式定义类，通过new新增实例。而后者是将构造函数的引用属性和方法放到其原型上，子类是父类原型的一个实例。</p>]]></content>
      
      
      <categories>
          
          <category> 思维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VueCli中代理websocket</title>
      <link href="2020/09/29/VueCli%E4%B8%AD%E4%BB%A3%E7%90%86websocket/"/>
      <url>2020/09/29/VueCli%E4%B8%AD%E4%BB%A3%E7%90%86websocket/</url>
      
        <content type="html"><![CDATA[<p>vue.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">    host: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">    port: <span class="string">&#x27;9007&#x27;</span>,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">        <span class="string">&#x27;/socket&#x27;</span>: &#123;</span><br><span class="line">            target: <span class="string">`ws://<span class="subst">$&#123;baseUrl&#125;</span>`</span>,</span><br><span class="line">            ws: <span class="literal">true</span>,</span><br><span class="line">            pathRewrite: &#123; <span class="string">&#x27;^/socket&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">            changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> socket = <span class="keyword">new</span> WebSocket(</span><br><span class="line">  <span class="string">&#x27;ws://&#x27;</span> + location.host + <span class="string">&#x27;/socket/wx-cyberspace/websocket/attack&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>nginx 关键配置</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"><span class="keyword">map</span> $http_upgrade $connection_upgrade &#123;</span><br><span class="line">default upgrade;</span><br><span class="line"><span class="string">&#x27;&#x27;</span>      <span class="keyword">close</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        <span class="keyword">listen</span>       <span class="number">8083</span>;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">location ^~ /<span class="keyword">socket</span> &#123;</span><br><span class="line">            proxy_pass http:<span class="regexp">//l</span>ocalhost:<span class="number">8080</span>/;</span><br><span class="line">            proxy_http_version <span class="number">1.1</span>;</span><br><span class="line">            proxy_set_header Host $host;</span><br><span class="line">            proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">            proxy_read_timeout <span class="number">120</span>s;</span><br><span class="line">            proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">            proxy_set_header Connection $connection_upgrade;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3中app.config.globalProperties在build后指向错误</title>
      <link href="2020/09/29/Vue3%E4%B8%ADapp.config.globalProperties%E5%9C%A8build%E5%90%8E%E6%8C%87%E5%90%91%E9%94%99%E8%AF%AF/"/>
      <url>2020/09/29/Vue3%E4%B8%ADapp.config.globalProperties%E5%9C%A8build%E5%90%8E%E6%8C%87%E5%90%91%E9%94%99%E8%AF%AF/</url>
      
        <content type="html"><![CDATA[<p>在 Vue2 中，我们这样在全局挂载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span></span><br><span class="line">Vue.prototype.$moment = moment</span><br></pre></td></tr></table></figure><p>在 Vue3 中，我们需要这样挂载</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dayjs <span class="keyword">from</span> <span class="string">&#x27;dayjs&#x27;</span></span><br><span class="line">app.config.globalProperties.$dayjs = dayjs</span><br></pre></td></tr></table></figure><p>在引用时</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; ctx &#125; = getCurrentInstance()</span><br><span class="line">    ctx.$dayjs()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述方式在 dev 中没有问题，但是 build 之后就会报错<br>应该改为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getCurrentInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; proxy &#125; = getCurrentInstance()</span><br><span class="line">    proxy.$dayjs()</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 报错 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报错 </tag>
            
            <tag> Vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装yarn create nuxt-app xxx时报错</title>
      <link href="2020/08/30/%E5%AE%89%E8%A3%85yarn%20create%20nuxt-app%20xxx%E6%97%B6%E6%8A%A5%E9%94%99/"/>
      <url>2020/08/30/%E5%AE%89%E8%A3%85yarn%20create%20nuxt-app%20xxx%E6%97%B6%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>如下：</p><span id="more"></span><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">/Users/jimmy/.config/yarn/global/node_modules/sao/lib/installPackages.js:108</span><br><span class="line">throw new SAOError(Failed to install <span class="variable">$&#123;packageName&#125;</span> <span class="keyword">in</span> <span class="variable">$&#123;cwd&#125;</span>)</span><br><span class="line">^</span><br><span class="line">SAOError: Failed to install packages <span class="keyword">in</span> /Users/jimmy/work/tuliang/cross-border-pc-ssr-ts</span><br><span class="line">at ChildProcess. (/Users/jimmy/.config/yarn/global/node_modules/sao/lib/installPackages.js:108:15)</span><br><span class="line">at ChildProcess.emit (events.js:315:20)</span><br><span class="line">at maybeClose (internal/child_process.js:1021:16)</span><br><span class="line">at Socket. (internal/child_process.js:443:11)</span><br><span class="line">at Socket.emit (events.js:315:20)</span><br><span class="line">at Pipe. (net.js:674:12) &#123;</span><br><span class="line">__sao: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">error Command failed.</span><br><span class="line">Exit code: 1</span><br><span class="line">Command: /usr/<span class="built_in">local</span>/bin/create-nuxt-app</span><br><span class="line">Arguments: cross-border-pc-ssr-ts</span><br><span class="line">Directory: /Users/jimmy/work/tuliang</span><br><span class="line">Output:</span><br><span class="line">info Visit https://yarnpkg.com/en/docs/cli/create <span class="keyword">for</span> documentation about this <span class="built_in">command</span></span><br></pre></td></tr></table></figure><p>升级 yarn 到 1.22.4 版本后解决</p>]]></content>
      
      
      <categories>
          
          <category> 报错 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css裁切不规则图形</title>
      <link href="2020/08/28/css%E8%A3%81%E5%88%87%E4%B8%8D%E8%A7%84%E5%88%99%E5%9B%BE%E5%BD%A2/"/>
      <url>2020/08/28/css%E8%A3%81%E5%88%87%E4%B8%8D%E8%A7%84%E5%88%99%E5%9B%BE%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<p>使用 clip-path 属性，简单的可以用 polygon 属性画不规则多边形，复杂的可以用 svg 的 path 处理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">height</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;0&quot;</span> <span class="attr">preserveAspectRatio</span>=<span class="string">&quot;xMinYMin meet&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">defs</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">clipPath</span> <span class="attr">id</span>=<span class="string">&quot;svgPath&quot;</span>&gt;</span></span><br><span class="line">      &lt;path</span><br><span class="line">        d=&quot;M215,100.3c97.8-32.6,90.5-71.9,336-77.6</span><br><span class="line">          c92.4-2.1,98.1,81.6,121.8,116.4c101.7,149.9,53.5,155.9,14.7,178c-96.4,54.9,5.4,269-257,115.1c-57-33.5-203,46.3-263.7,20.1</span><br><span class="line">          c-33.5-14.5-132.5-45.5-95-111.1C125.9,246.6,98.6,139.1,215,100.3z&quot;</span><br><span class="line">      &gt;<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">clipPath</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">defs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="comment">/* clip-path:polygon(50% 0%, 100% 50%, 50% 100%, 0% 50%); */</span></span><br><span class="line">  <span class="attribute">clip-path</span>: <span class="built_in">url</span>(<span class="string">&#x27;#svgPath&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cesium相机高度自适应多个坐标</title>
      <link href="2020/08/26/Cesium%E7%9B%B8%E6%9C%BA%E9%AB%98%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94%E5%A4%9A%E4%B8%AA%E5%9D%90%E6%A0%87/"/>
      <url>2020/08/26/Cesium%E7%9B%B8%E6%9C%BA%E9%AB%98%E5%BA%A6%E8%87%AA%E9%80%82%E5%BA%94%E5%A4%9A%E4%B8%AA%E5%9D%90%E6%A0%87/</url>
      
        <content type="html"><![CDATA[<p>获取东南西北经纬度，使用 Rectangle.fromDegrees 构建矩形</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> west, south, east, north</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="keyword">const</span> item = arr[i]</span><br><span class="line">  <span class="keyword">if</span> (!west || item.assetIpLng &lt; west) west = item.assetIpLng</span><br><span class="line">  <span class="keyword">if</span> (!south || item.assetIpLat &lt; south) south = item.assetIpLat</span><br><span class="line">  <span class="keyword">if</span> (!east || item.assetIpLng &gt; east) east = item.assetIpLng</span><br><span class="line">  <span class="keyword">if</span> (!north || item.assetIpLat &gt; north) north = item.assetIpLat</span><br><span class="line">  _this.$emit(</span><br><span class="line">    <span class="string">&#x27;addPoint&#x27;</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      lon: item.assetIpLng,</span><br><span class="line">      lat: item.assetIpLat,</span><br><span class="line">    &#125;,</span><br><span class="line">    []</span><br><span class="line">  )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再 flyTo</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>._viewer.scene.camera.flyTo(&#123;</span><br><span class="line">  destination: Cesium.Rectangle.fromDegrees(west, south, east, north),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cesium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>flex-direction为column时，子元素宽度自动撑满</title>
      <link href="2020/08/11/flex-direction%E4%B8%BAcolumn%E6%97%B6%EF%BC%8C%E5%AD%90%E5%85%83%E7%B4%A0%E5%AE%BD%E5%BA%A6%E8%87%AA%E5%8A%A8%E6%92%91%E6%BB%A1/"/>
      <url>2020/08/11/flex-direction%E4%B8%BAcolumn%E6%97%B6%EF%BC%8C%E5%AD%90%E5%85%83%E7%B4%A0%E5%AE%BD%E5%BA%A6%E8%87%AA%E5%8A%A8%E6%92%91%E6%BB%A1/</url>
      
        <content type="html"><![CDATA[<p>父元素添加<code>align-content: flex-start;</code></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>throw new _ValidationError2.default(ajv.errors, name)</title>
      <link href="2020/08/11/throw%20new%20_ValidationError2.default(ajv.errors,%20name)/"/>
      <url>2020/08/11/throw%20new%20_ValidationError2.default(ajv.errors,%20name)/</url>
      
        <content type="html"><![CDATA[<h3 id="错误如图"><a href="#错误如图" class="headerlink" title="错误如图"></a>错误如图</h3><p><img src="http://okmneu7zl.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-12-11%20%E4%B8%8B%E5%8D%887.43.40.png"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tc-travel-frontend-activity@ build /Users/jimmy/work/tc-flight/project/tc-travel-frontend-activity</span><br><span class="line">&gt; rimraf dist &amp;&amp; npm run build:client &amp;&amp; npm run build:server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; tc-travel-frontend-activity@ build:client /Users/jimmy/work/tc-flight/project/tc-travel-frontend-activity</span><br><span class="line">&gt; cross-env NODE_ENV=product webpack --config build/webpack.client.config.js --progress --hide-modules</span><br><span class="line"></span><br><span class="line">/Users/jimmy/work/tc-flight/project/tc-travel-frontend-activity/node_modules/schema-utils/dist/validateOptions.js:40</span><br><span class="line">    throw new _ValidationError2.default(ajv.errors, name);</span><br><span class="line">    ^</span><br><span class="line"></span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>webpack 版本升级导致</p><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>修改<code>webpack.client.config.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vueConfig.loaders = &#123;</span><br><span class="line">  <span class="comment">// stylus: ExtractTextPlugin.extract(&#123;</span></span><br><span class="line">  <span class="comment">//   loader: &#x27;css-loader!stylus-loader&#x27;,</span></span><br><span class="line">  <span class="comment">//   fallbackLoader: &#x27;vue-style-loader&#x27; // &lt;- this is a dep of vue-loader</span></span><br><span class="line">  <span class="comment">// &#125;),</span></span><br><span class="line">  less: ExtractTextPlugin.extract(&#123;</span><br><span class="line">    loader: <span class="string">&#x27;css-loader!less-loader&#x27;</span>,</span><br><span class="line">    fallbackLoader: <span class="string">&#x27;vue-style-loader&#x27;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vueConfig.loaders = &#123;</span><br><span class="line">    <span class="regexp">//</span> stylus: ExtractTextPlugin.extract(&#123;</span><br><span class="line">    <span class="regexp">//</span>   loader: <span class="string">&#x27;css-loader!stylus-loader&#x27;</span>,</span><br><span class="line">    <span class="regexp">//</span>   fallbackLoader: <span class="string">&#x27;vue-style-loader&#x27;</span> <span class="regexp">//</span> &lt;- this is a dep of vue-loader</span><br><span class="line">    <span class="regexp">//</span> &#125;),</span><br><span class="line">    less: ExtractTextPlugin.extract(&#123;</span><br><span class="line">        use: <span class="string">&quot;css-loader!less-loader&quot;</span>,</span><br><span class="line">        fallback: <span class="string">&quot;vue-style-loader&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 报错 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NUXT第三方组件只在客户端运行</title>
      <link href="2020/08/11/NUXT%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BB%84%E4%BB%B6%E5%8F%AA%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%90%E8%A1%8C/"/>
      <url>2020/08/11/NUXT%E7%AC%AC%E4%B8%89%E6%96%B9%E7%BB%84%E4%BB%B6%E5%8F%AA%E5%9C%A8%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>报错：<code>navigator is no defined</code><br>原因：<code>navigator</code>只在客户端存在<br>解决：<code>plugins</code>下新建<code>vue-range-component.js</code>，代码如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vue-range-component/dist/vue-range-slider.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> VueRangeSlider <span class="keyword">from</span> <span class="string">&#x27;vue-range-component&#x27;</span></span><br><span class="line">Vue.use(VueRangeSlider)</span><br><span class="line">nuxt.config.js内新增</span><br><span class="line">  plugins: [</span><br><span class="line">    &#123; <span class="attr">src</span>: <span class="string">&quot;@/plugins/vue-range-component&quot;</span>, <span class="attr">ssr</span>: <span class="literal">false</span>&#125;,</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><p>ssr 设为 false 即可</p>]]></content>
      
      
      <categories>
          
          <category> 报错 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack项目提示Invalid Host header</title>
      <link href="2018/06/24/webpack%E9%A1%B9%E7%9B%AE%E6%8F%90%E7%A4%BAInvalid%20Host%20header/"/>
      <url>2018/06/24/webpack%E9%A1%B9%E7%9B%AE%E6%8F%90%E7%A4%BAInvalid%20Host%20header/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/bodhiye/article/details/78523333">原文地址</a></p><p>在build目录中的webpack.base.config.js中添加如下webpack-dev-server配置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">devServer:</span> &#123;</span><br><span class="line">    <span class="attr">disableHostCheck:</span> <span class="literal">true</span>,</span><br><span class="line">&#125;<span class="string">,</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 报错 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报错 </tag>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS开机启动egg.js</title>
      <link href="2018/04/01/CentOS%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8egg.js/"/>
      <url>2018/04/01/CentOS%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8egg.js/</url>
      
        <content type="html"><![CDATA[<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>rc.d/rc.local</span><br></pre></td></tr></table></figure><p>添加</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="regexp">/xdx/</span>xdx-api &amp;&amp; npm run start</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> egg.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS设置redis开机启动</title>
      <link href="2018/04/01/CentOS%E8%AE%BE%E7%BD%AEredis%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/"/>
      <url>2018/04/01/CentOS%E8%AE%BE%E7%BD%AEredis%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim <span class="regexp">/etc/</span>rc.d/rc.local</span><br></pre></td></tr></table></figure><p>在文件末尾追加</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/usr/</span>local<span class="regexp">/redis-3.0.3/</span>src<span class="regexp">/redis-server /u</span>sr<span class="regexp">/local/</span>redis-<span class="number">3.0</span>.<span class="number">3</span>/redis.conf</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/lishirong/article/details/53101513">原文</a></p><p><a href="https://blog.csdn.net/wzq793957419/article/details/55102783">参考</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS实现单行、多行文本溢出显示省略号</title>
      <link href="2018/04/01/css%E5%85%81%E8%AE%B8%E7%82%B9%E5%87%BB%E7%A9%BF%E9%80%8F/"/>
      <url>2018/04/01/css%E5%85%81%E8%AE%B8%E7%82%B9%E5%87%BB%E7%A9%BF%E9%80%8F/</url>
      
        <content type="html"><![CDATA[<p>CSS 新属性 pointer-events：字面理解是点击鼠标事件，值分别是 auto 和 none。</p><p>当使用 pointer-events:none,表示它将捕获不到任何点击，而只是让事件穿透到它的下面。代码如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.foo</span> &#123;</span><br><span class="line">  <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改host</title>
      <link href="2017/12/14/%E4%BF%AE%E6%94%B9host/"/>
      <url>2017/12/14/%E4%BF%AE%E6%94%B9host/</url>
      
        <content type="html"><![CDATA[<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /etc</span><br><span class="line">sudo vim hosts</span><br></pre></td></tr></table></figure><p>最下面添加一行：如 61.155.197.246 travelbusinessapi.17u.cn</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##</span></span><br><span class="line"><span class="comment"># Host Database</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># localhost is used to configure the loopback interface</span></span><br><span class="line"><span class="comment"># when the system is booting.  Do not change this entry.</span></span><br><span class="line"><span class="comment">##</span></span><br><span class="line">127.0.0.1       localhost</span><br><span class="line">255.255.255.255 broadcasthost</span><br><span class="line">::1             localhost</span><br><span class="line"></span><br><span class="line"><span class="comment"># Block Adobe Activation</span></span><br><span class="line">127.0.0.1       activate.adobe.com</span><br><span class="line">127.0.0.1       practivate.adobe.com</span><br><span class="line">127.0.0.1       ereg.adobe.com</span><br><span class="line">127.0.0.1       activate.wip3.adobe.com</span><br><span class="line">127.0.0.1       wip3.adobe.com</span><br><span class="line">127.0.0.1       3dns-3.adobe.com</span><br><span class="line">127.0.0.1       3dns-2.adobe.com</span><br><span class="line">127.0.0.1       adobe-dns.adobe.com</span><br><span class="line">127.0.0.1       adobe-dns-2.adobe.com</span><br><span class="line">127.0.0.1       adobe-dns-3.adobe.com</span><br><span class="line">127.0.0.1       ereg.wip3.adobe.com</span><br><span class="line">127.0.0.1       activate-sea.adobe.com</span><br><span class="line">127.0.0.1       wwis-dubc1-vip60.adobe.com</span><br><span class="line">127.0.0.1       activate-sjc0.adobe.com</span><br><span class="line">127.0.0.1       hl2rcv.adobe.com</span><br><span class="line">61.155.197.246 travelbusinessapi.17u.cn</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> host </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iOS9 使用Universal Links在微信中打开App</title>
      <link href="2017/12/13/iOS9%20%E4%BD%BF%E7%94%A8Universal%20Links%E5%9C%A8%E5%BE%AE%E4%BF%A1%E4%B8%AD%E6%89%93%E5%BC%80App/"/>
      <url>2017/12/13/iOS9%20%E4%BD%BF%E7%94%A8Universal%20Links%E5%9C%A8%E5%BE%AE%E4%BF%A1%E4%B8%AD%E6%89%93%E5%BC%80App/</url>
      
        <content type="html"><![CDATA[<p>参考地址<a href="http://www.jianshu.com/p/738ac2b8865d">http://www.jianshu.com/p/738ac2b8865d</a></p><p>下载部分组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  &lt;div</span><br><span class="line">    :class=&quot;[&#x27;fixed&#x27;,isIphonex &amp;&amp; !fringeDirection ? &#x27;isX&#x27; : &#x27;&#x27;]&quot;</span><br><span class="line">    v-iphonex</span><br><span class="line">    v-show=&quot;show&quot;</span><br><span class="line">  &gt;</span><br><span class="line">    &lt;img</span><br><span class="line">      src=&quot;../../images/cancel.png&quot;</span><br><span class="line">      alt=&quot;关闭&quot;</span><br><span class="line">      class=&quot;close&quot;</span><br><span class="line">      @click=&quot;show = false&quot;</span><br><span class="line">    /&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../images/logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;logo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;slogan&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>差旅无忧<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>让忙碌的生活更美好<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;download&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;toDownload&quot;</span>&gt;</span>立即下载<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> utils <span class="keyword">from</span> <span class="string">&#x27;@/common/utils.js&#x27;</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        show: <span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">        isIphonex: <span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">        fringeDirection: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        schemaUrl: <span class="string">&#x27;tcbiz://home/gotoHome&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        iphoneDownUrl: <span class="string">&#x27;https://itunes.apple.com/app/id1282893090&#x27;</span>,</span></span><br><span class="line">        txappcenterUrl:</span><br><span class="line"><span class="javascript">          <span class="string">&#x27;http://a.app.qq.com/o/simple.jsp?pkgname=com.businesstravel&amp;fromcase=40002&#x27;</span>,</span></span><br><span class="line"><span class="javascript">        universalLinks: <span class="string">&#x27;http://travelbusinessapi.17u.cn/action&#x27;</span>,</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">let</span> _this = <span class="built_in">this</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$iphonex.$on(<span class="string">&#x27;init&#x27;</span>, <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span></span><br><span class="line">        _this.isIphonex = v</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="javascript">      <span class="built_in">this</span>.$iphonex.$on(<span class="string">&#x27;rotate&#x27;</span>, <span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span></span><br><span class="line">        _this.fringeDirection = v</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">isWeixin</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//判断是否是微信</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> ua = navigator.userAgent.toLowerCase()</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (ua.match(<span class="regexp">/MicroMessenger/i</span>) == <span class="string">&#x27;micromessenger&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="literal">false</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line"><span class="javascript">      <span class="function"><span class="title">toDownload</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 微信无法直接打开App</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (<span class="built_in">this</span>.isWeixin()) &#123;</span></span><br><span class="line">          if (utils.isIOS9()) &#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.location = <span class="built_in">this</span>.universalLinks</span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.location = <span class="built_in">this</span>.txappcenterUrl <span class="comment">// 应用宝地址</span></span></span><br><span class="line">          &#125;</span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">let</span> _this = <span class="built_in">this</span></span></span><br><span class="line"><span class="javascript">          <span class="comment">// 如果是iOS，</span></span></span><br><span class="line"><span class="javascript">          <span class="keyword">if</span> (navigator.userAgent.match(<span class="regexp">/(iPhone|iPod|iPad);?/i</span>)) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> loadDateTime = <span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">              <span class="keyword">let</span> timeOutDateTime = <span class="keyword">new</span> <span class="built_in">Date</span>()</span></span><br><span class="line">              if (timeOutDateTime - loadDateTime &lt; 5000) &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.location = _this.iphoneDownUrl <span class="comment">//AppStore下载地址</span></span></span><br><span class="line"><span class="javascript">              &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.close()</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;, 25)</span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.location = _this.schemaUrl</span></span><br><span class="line"><span class="javascript">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (navigator.userAgent.match(<span class="regexp">/android/i</span>)) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">              <span class="built_in">window</span>.location = _this.schemaUrl</span></span><br><span class="line"><span class="javascript">              <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">window</span>.location = _this.txappcenterUrl <span class="comment">//应用宝地址</span></span></span><br><span class="line">              &#125;, 500)</span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line">  ...;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>apple-app-site-association 文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;applinks&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;apps&quot;</span>: [],</span><br><span class="line">    <span class="attr">&quot;details&quot;</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">&quot;appID&quot;</span>: <span class="string">&quot;********&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;paths&quot;</span>: [<span class="string">&quot;/action&quot;</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意点：</p><ul><li>必须跨域！必须跨域！必须跨域！iOS9.2+必须跨域才能跳转，所以在实际开发中，使用<code>https://travelbusinessapi.17u.cn/apple-app-site-association</code>放 apple-app-site-association 文件，页面使用<code>http://travelbusiness.17u.cn/</code></li><li>apple-app-site-association 所在域名必须是 https 的</li><li>paths 不可为*</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> iOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS实现单行、多行文本溢出显示省略号</title>
      <link href="2017/12/13/CSS%E5%AE%9E%E7%8E%B0%E5%8D%95%E8%A1%8C%E3%80%81%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%98%BE%E7%A4%BA%E7%9C%81%E7%95%A5%E5%8F%B7/"/>
      <url>2017/12/13/CSS%E5%AE%9E%E7%8E%B0%E5%8D%95%E8%A1%8C%E3%80%81%E5%A4%9A%E8%A1%8C%E6%96%87%E6%9C%AC%E6%BA%A2%E5%87%BA%E6%98%BE%E7%A4%BA%E7%9C%81%E7%95%A5%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<p>单行：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line"><span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line"><span class="attribute">white-space</span>: nowrap;</span><br></pre></td></tr></table></figure><p>多行：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: -webkit-box;</span><br><span class="line">-webkit-box-orient: vertical;</span><br><span class="line">-webkit-line-clamp: <span class="number">3</span>;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>input调出只有数字的键盘</title>
      <link href="2017/12/08/input%E8%B0%83%E5%87%BA%E5%8F%AA%E6%9C%89%E6%95%B0%E5%AD%97%E7%9A%84%E9%94%AE%E7%9B%98/"/>
      <url>2017/12/08/input%E8%B0%83%E5%87%BA%E5%8F%AA%E6%9C%89%E6%95%B0%E5%AD%97%E7%9A%84%E9%94%AE%E7%9B%98/</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">pattern</span>=<span class="string">&quot;[0-9]*&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 键盘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-loader升级v13.0.0导致报错</title>
      <link href="2017/12/07/vue-loader%E5%8D%87%E7%BA%A7v13.0.0%E5%AF%BC%E8%87%B4%E6%8A%A5%E9%94%99/"/>
      <url>2017/12/07/vue-loader%E5%8D%87%E7%BA%A7v13.0.0%E5%AF%BC%E8%87%B4%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<p>报错如下：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Error: </span>render function or template not defined in component: anonymous</span><br></pre></td></tr></table></figure><p>解决办法：<br>修改 vue-loader.config.js，添加 esModule: false</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.<span class="built_in">exports</span> = &#123;</span><br><span class="line">    preserveWhitespace: <span class="literal">false</span>,</span><br><span class="line">    postcss: [</span><br><span class="line">        <span class="built_in">require</span>(<span class="string">&#x27;autoprefixer&#x27;</span>)(&#123;</span><br><span class="line">            browsers: [<span class="string">&#x27;&gt; 5%&#x27;</span>]</span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    esModule: <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="esModule"><a href="#esModule" class="headerlink" title="esModule"></a>esModule</h4><ul><li>类型: Boolean</li><li>默认值: undefined</li></ul><p>是否导出兼容 esModule 的代码，默认情况下 vue-loader 会导出 commonjs 格式，像 module.exports = ….。当 esModule 设置为 true 的情况下，导出会变为 exports.__esModule = true; exports = …。适用于与 Babel 以外的 transpiler 互操作，比如 TypeScript。</p>]]></content>
      
      
      <categories>
          
          <category> 报错 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eslint规则说明</title>
      <link href="2017/11/16/Eslint%E8%A7%84%E5%88%99%E8%AF%B4%E6%98%8E/"/>
      <url>2017/11/16/Eslint%E8%A7%84%E5%88%99%E8%AF%B4%E6%98%8E/</url>
      
        <content type="html"><![CDATA[<p>如下：</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;no-alert&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用alert confirm prompt</span></span><br><span class="line">    <span class="string">&quot;no-array-constructor&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用数组构造器</span></span><br><span class="line">    <span class="string">&quot;no-bitwise&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用按位运算符</span></span><br><span class="line">    <span class="string">&quot;no-caller&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止使用arguments.caller或arguments.callee</span></span><br><span class="line">    <span class="string">&quot;no-catch-shadow&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止catch子句参数与外部作用域变量同名</span></span><br><span class="line">    <span class="string">&quot;no-class-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止给类赋值</span></span><br><span class="line">    <span class="string">&quot;no-cond-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在条件表达式中使用赋值语句</span></span><br><span class="line">    <span class="string">&quot;no-console&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用console</span></span><br><span class="line">    <span class="string">&quot;no-const-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止修改const声明的变量</span></span><br><span class="line">    <span class="string">&quot;no-constant-condition&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在条件中使用常量表达式 if(true) if(1)</span></span><br><span class="line">    <span class="string">&quot;no-continue&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用continue</span></span><br><span class="line">    <span class="string">&quot;no-control-regex&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式中使用控制字符</span></span><br><span class="line">    <span class="string">&quot;no-debugger&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用debugger</span></span><br><span class="line">    <span class="string">&quot;no-delete-var&quot;</span>: <span class="number">2</span>,<span class="comment">//不能对var声明的变量使用delete操作符</span></span><br><span class="line">    <span class="string">&quot;no-div-regex&quot;</span>: <span class="number">1</span>,<span class="comment">//不能使用看起来像除法的正则表达式/=foo/</span></span><br><span class="line">    <span class="string">&quot;no-dupe-keys&quot;</span>: <span class="number">2</span>,<span class="comment">//在创建对象字面量时不允许键重复 &#123;a:1,a:1&#125;</span></span><br><span class="line">    <span class="string">&quot;no-dupe-args&quot;</span>: <span class="number">2</span>,<span class="comment">//函数参数不能重复</span></span><br><span class="line">    <span class="string">&quot;no-duplicate-case&quot;</span>: <span class="number">2</span>,<span class="comment">//switch中的case标签不能重复</span></span><br><span class="line">    <span class="string">&quot;no-else-return&quot;</span>: <span class="number">2</span>,<span class="comment">//如果if语句里面有return,后面不能跟else语句</span></span><br><span class="line">    <span class="string">&quot;no-empty&quot;</span>: <span class="number">2</span>,<span class="comment">//块语句中的内容不能为空</span></span><br><span class="line">    <span class="string">&quot;no-empty-character-class&quot;</span>: <span class="number">2</span>,<span class="comment">//正则表达式中的[]内容不能为空</span></span><br><span class="line">    <span class="string">&quot;no-empty-label&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用空label</span></span><br><span class="line">    <span class="string">&quot;no-eq-null&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止对null使用==或!=运算符</span></span><br><span class="line">    <span class="string">&quot;no-eval&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止使用eval</span></span><br><span class="line">    <span class="string">&quot;no-ex-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止给catch语句中的异常参数赋值</span></span><br><span class="line">    <span class="string">&quot;no-extend-native&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止扩展native对象</span></span><br><span class="line">    <span class="string">&quot;no-extra-bind&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的函数绑定</span></span><br><span class="line">    <span class="string">&quot;no-extra-boolean-cast&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的bool转换</span></span><br><span class="line">    <span class="string">&quot;no-extra-parens&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止非必要的括号</span></span><br><span class="line">    <span class="string">&quot;no-extra-semi&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止多余的冒号</span></span><br><span class="line">    <span class="string">&quot;no-fallthrough&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止switch穿透</span></span><br><span class="line">    <span class="string">&quot;no-floating-decimal&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止省略浮点数中的0 .5 3.</span></span><br><span class="line">    <span class="string">&quot;no-func-assign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止重复的函数声明</span></span><br><span class="line">    <span class="string">&quot;no-implicit-coercion&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止隐式转换</span></span><br><span class="line">    <span class="string">&quot;no-implied-eval&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用隐式eval</span></span><br><span class="line">    <span class="string">&quot;no-inline-comments&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止行内备注</span></span><br><span class="line">    <span class="string">&quot;no-inner-declarations&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;functions&quot;</span>],<span class="comment">//禁止在块语句中使用声明（变量或函数）</span></span><br><span class="line">    <span class="string">&quot;no-invalid-regexp&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止无效的正则表达式</span></span><br><span class="line">    <span class="string">&quot;no-invalid-this&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止无效的this，只能用在构造器，类，对象字面量</span></span><br><span class="line">    <span class="string">&quot;no-irregular-whitespace&quot;</span>: <span class="number">2</span>,<span class="comment">//不能有不规则的空格</span></span><br><span class="line">    <span class="string">&quot;no-iterator&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用__iterator__ 属性</span></span><br><span class="line">    <span class="string">&quot;no-label-var&quot;</span>: <span class="number">2</span>,<span class="comment">//label名不能与var声明的变量名相同</span></span><br><span class="line">    <span class="string">&quot;no-labels&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止标签声明</span></span><br><span class="line">    <span class="string">&quot;no-lone-blocks&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套块</span></span><br><span class="line">    <span class="string">&quot;no-lonely-if&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止else语句内只有if语句</span></span><br><span class="line">    <span class="string">&quot;no-loop-func&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以）</span></span><br><span class="line">    <span class="string">&quot;no-mixed-requires&quot;</span>: [<span class="number">0</span>, <span class="literal">false</span>],<span class="comment">//声明时不能混用声明类型</span></span><br><span class="line">    <span class="string">&quot;no-mixed-spaces-and-tabs&quot;</span>: [<span class="number">2</span>, <span class="literal">false</span>],<span class="comment">//禁止混用tab和空格</span></span><br><span class="line">    <span class="string">&quot;linebreak-style&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;windows&quot;</span>],<span class="comment">//换行风格</span></span><br><span class="line">    <span class="string">&quot;no-multi-spaces&quot;</span>: <span class="number">1</span>,<span class="comment">//不能用多余的空格</span></span><br><span class="line">    <span class="string">&quot;no-multi-str&quot;</span>: <span class="number">2</span>,<span class="comment">//字符串不能用\换行</span></span><br><span class="line">    <span class="string">&quot;no-multiple-empty-lines&quot;</span>: [<span class="number">1</span>, &#123;<span class="string">&quot;max&quot;</span>: <span class="number">2</span>&#125;],<span class="comment">//空行最多不能超过2行</span></span><br><span class="line">    <span class="string">&quot;no-native-reassign&quot;</span>: <span class="number">2</span>,<span class="comment">//不能重写native对象</span></span><br><span class="line">    <span class="string">&quot;no-negated-in-lhs&quot;</span>: <span class="number">2</span>,<span class="comment">//in 操作符的左边不能有!</span></span><br><span class="line">    <span class="string">&quot;no-nested-ternary&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用嵌套的三目运算</span></span><br><span class="line">    <span class="string">&quot;no-new&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止在使用new构造一个实例后不赋值</span></span><br><span class="line">    <span class="string">&quot;no-new-func&quot;</span>: <span class="number">1</span>,<span class="comment">//禁止使用new Function</span></span><br><span class="line">    <span class="string">&quot;no-new-object&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用new Object()</span></span><br><span class="line">    <span class="string">&quot;no-new-require&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用new require</span></span><br><span class="line">    <span class="string">&quot;no-new-wrappers&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用new创建包装实例，new String new Boolean new Number</span></span><br><span class="line">    <span class="string">&quot;no-obj-calls&quot;</span>: <span class="number">2</span>,<span class="comment">//不能调用内置的全局对象，比如Math() JSON()</span></span><br><span class="line">    <span class="string">&quot;no-octal&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制数字</span></span><br><span class="line">    <span class="string">&quot;no-octal-escape&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用八进制转义序列</span></span><br><span class="line">    <span class="string">&quot;no-param-reassign&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止给参数重新赋值</span></span><br><span class="line">    <span class="string">&quot;no-path-concat&quot;</span>: <span class="number">0</span>,<span class="comment">//node中不能使用__dirname或__filename做路径拼接</span></span><br><span class="line">    <span class="string">&quot;no-plusplus&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用++，--</span></span><br><span class="line">    <span class="string">&quot;no-process-env&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.env</span></span><br><span class="line">    <span class="string">&quot;no-process-exit&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用process.exit()</span></span><br><span class="line">    <span class="string">&quot;no-proto&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止使用__proto__属性</span></span><br><span class="line">    <span class="string">&quot;no-redeclare&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止重复声明变量</span></span><br><span class="line">    <span class="string">&quot;no-regex-spaces&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止在正则表达式字面量中使用多个空格 /foo bar/</span></span><br><span class="line">    <span class="string">&quot;no-restricted-modules&quot;</span>: <span class="number">0</span>,<span class="comment">//如果禁用了指定模块，使用就会报错</span></span><br><span class="line">    <span class="string">&quot;no-return-assign&quot;</span>: <span class="number">1</span>,<span class="comment">//return 语句中不能有赋值表达式</span></span><br><span class="line">    <span class="string">&quot;no-script-url&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用javascript:void(0)</span></span><br><span class="line">    <span class="string">&quot;no-self-compare&quot;</span>: <span class="number">2</span>,<span class="comment">//不能比较自身</span></span><br><span class="line">    <span class="string">&quot;no-sequences&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用逗号运算符</span></span><br><span class="line">    <span class="string">&quot;no-shadow&quot;</span>: <span class="number">2</span>,<span class="comment">//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名</span></span><br><span class="line">    <span class="string">&quot;no-shadow-restricted-names&quot;</span>: <span class="number">2</span>,<span class="comment">//严格模式中规定的限制标识符不能作为声明时的变量名使用</span></span><br><span class="line">    <span class="string">&quot;no-spaced-func&quot;</span>: <span class="number">2</span>,<span class="comment">//函数调用时 函数名与()之间不能有空格</span></span><br><span class="line">    <span class="string">&quot;no-sparse-arrays&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止稀疏数组， [1,,2]</span></span><br><span class="line">    <span class="string">&quot;no-sync&quot;</span>: <span class="number">0</span>,<span class="comment">//nodejs 禁止同步方法</span></span><br><span class="line">    <span class="string">&quot;no-ternary&quot;</span>: <span class="number">0</span>,<span class="comment">//禁止使用三目运算符</span></span><br><span class="line">    <span class="string">&quot;no-trailing-spaces&quot;</span>: <span class="number">1</span>,<span class="comment">//一行结束后面不要有空格</span></span><br><span class="line">    <span class="string">&quot;no-this-before-super&quot;</span>: <span class="number">0</span>,<span class="comment">//在调用super()之前不能使用this或super</span></span><br><span class="line">    <span class="string">&quot;no-throw-literal&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止抛出字面量错误 throw &quot;error&quot;;</span></span><br><span class="line">    <span class="string">&quot;no-undef&quot;</span>: <span class="number">1</span>,<span class="comment">//不能有未定义的变量</span></span><br><span class="line">    <span class="string">&quot;no-undef-init&quot;</span>: <span class="number">2</span>,<span class="comment">//变量初始化时不能直接给它赋值为undefined</span></span><br><span class="line">    <span class="string">&quot;no-undefined&quot;</span>: <span class="number">2</span>,<span class="comment">//不能使用undefined</span></span><br><span class="line">    <span class="string">&quot;no-unexpected-multiline&quot;</span>: <span class="number">2</span>,<span class="comment">//避免多行表达式</span></span><br><span class="line">    <span class="string">&quot;no-underscore-dangle&quot;</span>: <span class="number">1</span>,<span class="comment">//标识符不能以_开头或结尾</span></span><br><span class="line">    <span class="string">&quot;no-unneeded-ternary&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的嵌套 var isYes = answer === 1 ? true : false;</span></span><br><span class="line">    <span class="string">&quot;no-unreachable&quot;</span>: <span class="number">2</span>,<span class="comment">//不能有无法执行的代码</span></span><br><span class="line">    <span class="string">&quot;no-unused-expressions&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止无用的表达式</span></span><br><span class="line">    <span class="string">&quot;no-unused-vars&quot;</span>: [<span class="number">2</span>, &#123;<span class="string">&quot;vars&quot;</span>: <span class="string">&quot;all&quot;</span>, <span class="string">&quot;args&quot;</span>: <span class="string">&quot;after-used&quot;</span>&#125;],<span class="comment">//不能有声明后未被使用的变量或参数</span></span><br><span class="line">    <span class="string">&quot;no-use-before-define&quot;</span>: <span class="number">2</span>,<span class="comment">//未定义前不能使用</span></span><br><span class="line">    <span class="string">&quot;no-useless-call&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止不必要的call和apply</span></span><br><span class="line">    <span class="string">&quot;no-void&quot;</span>: <span class="number">2</span>,<span class="comment">//禁用void操作符</span></span><br><span class="line">    <span class="string">&quot;no-var&quot;</span>: <span class="number">0</span>,<span class="comment">//禁用var，用let和const代替</span></span><br><span class="line">    <span class="string">&quot;no-warning-comments&quot;</span>: [<span class="number">1</span>, &#123; <span class="string">&quot;terms&quot;</span>: [<span class="string">&quot;todo&quot;</span>, <span class="string">&quot;fixme&quot;</span>, <span class="string">&quot;xxx&quot;</span>], <span class="string">&quot;location&quot;</span>: <span class="string">&quot;start&quot;</span> &#125;],<span class="comment">//不能有警告备注</span></span><br><span class="line">    <span class="string">&quot;no-with&quot;</span>: <span class="number">2</span>,<span class="comment">//禁用with</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;array-bracket-spacing&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//是否允许非空数组里面有多余的空格</span></span><br><span class="line">    <span class="string">&quot;arrow-parens&quot;</span>: <span class="number">0</span>,<span class="comment">//箭头函数用小括号括起来</span></span><br><span class="line">    <span class="string">&quot;arrow-spacing&quot;</span>: <span class="number">0</span>,<span class="comment">//=&gt;的前/后括号</span></span><br><span class="line">    <span class="string">&quot;accessor-pairs&quot;</span>: <span class="number">0</span>,<span class="comment">//在对象中使用getter/setter</span></span><br><span class="line">    <span class="string">&quot;block-scoped-var&quot;</span>: <span class="number">0</span>,<span class="comment">//块语句中使用var</span></span><br><span class="line">    <span class="string">&quot;brace-style&quot;</span>: [<span class="number">1</span>, <span class="string">&quot;1tbs&quot;</span>],<span class="comment">//大括号风格</span></span><br><span class="line">    <span class="string">&quot;callback-return&quot;</span>: <span class="number">1</span>,<span class="comment">//避免多次调用回调什么的</span></span><br><span class="line">    <span class="string">&quot;camelcase&quot;</span>: <span class="number">2</span>,<span class="comment">//强制驼峰法命名</span></span><br><span class="line">    <span class="string">&quot;comma-dangle&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//对象字面量项尾不能有逗号</span></span><br><span class="line">    <span class="string">&quot;comma-spacing&quot;</span>: <span class="number">0</span>,<span class="comment">//逗号前后的空格</span></span><br><span class="line">    <span class="string">&quot;comma-style&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;last&quot;</span>],<span class="comment">//逗号风格，换行时在行首还是行尾</span></span><br><span class="line">    <span class="string">&quot;complexity&quot;</span>: [<span class="number">0</span>, <span class="number">11</span>],<span class="comment">//循环复杂度</span></span><br><span class="line">    <span class="string">&quot;computed-property-spacing&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//是否允许计算后的键名什么的</span></span><br><span class="line">    <span class="string">&quot;consistent-return&quot;</span>: <span class="number">0</span>,<span class="comment">//return 后面是否允许省略</span></span><br><span class="line">    <span class="string">&quot;consistent-this&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;that&quot;</span>],<span class="comment">//this别名</span></span><br><span class="line">    <span class="string">&quot;constructor-super&quot;</span>: <span class="number">0</span>,<span class="comment">//非派生类不能调用super，派生类必须调用super</span></span><br><span class="line">    <span class="string">&quot;curly&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;all&quot;</span>],<span class="comment">//必须使用 if()&#123;&#125; 中的&#123;&#125;</span></span><br><span class="line">    <span class="string">&quot;default-case&quot;</span>: <span class="number">2</span>,<span class="comment">//switch语句最后必须有default</span></span><br><span class="line">    <span class="string">&quot;dot-location&quot;</span>: <span class="number">0</span>,<span class="comment">//对象访问符的位置，换行的时候在行首还是行尾</span></span><br><span class="line">    <span class="string">&quot;dot-notation&quot;</span>: [<span class="number">0</span>, &#123; <span class="string">&quot;allowKeywords&quot;</span>: <span class="literal">true</span> &#125;],<span class="comment">//避免不必要的方括号</span></span><br><span class="line">    <span class="string">&quot;eol-last&quot;</span>: <span class="number">0</span>,<span class="comment">//文件以单一的换行符结束</span></span><br><span class="line">    <span class="string">&quot;eqeqeq&quot;</span>: <span class="number">2</span>,<span class="comment">//必须使用全等</span></span><br><span class="line">    <span class="string">&quot;func-names&quot;</span>: <span class="number">0</span>,<span class="comment">//函数表达式必须有名字</span></span><br><span class="line">    <span class="string">&quot;func-style&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;declaration&quot;</span>],<span class="comment">//函数风格，规定只能使用函数声明/函数表达式</span></span><br><span class="line">    <span class="string">&quot;generator-star-spacing&quot;</span>: <span class="number">0</span>,<span class="comment">//生成器函数*的前后空格</span></span><br><span class="line">    <span class="string">&quot;guard-for-in&quot;</span>: <span class="number">0</span>,<span class="comment">//for in循环要用if语句过滤</span></span><br><span class="line">    <span class="string">&quot;handle-callback-err&quot;</span>: <span class="number">0</span>,<span class="comment">//nodejs 处理错误</span></span><br><span class="line">    <span class="string">&quot;id-length&quot;</span>: <span class="number">0</span>,<span class="comment">//变量名长度</span></span><br><span class="line">    <span class="string">&quot;indent&quot;</span>: [<span class="number">2</span>, <span class="number">4</span>],<span class="comment">//缩进风格</span></span><br><span class="line">    <span class="string">&quot;init-declarations&quot;</span>: <span class="number">0</span>,<span class="comment">//声明时必须赋初值</span></span><br><span class="line">    <span class="string">&quot;key-spacing&quot;</span>: [<span class="number">0</span>, &#123; <span class="string">&quot;beforeColon&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;afterColon&quot;</span>: <span class="literal">true</span> &#125;],<span class="comment">//对象字面量中冒号的前后空格</span></span><br><span class="line">    <span class="string">&quot;lines-around-comment&quot;</span>: <span class="number">0</span>,<span class="comment">//行前/行后备注</span></span><br><span class="line">    <span class="string">&quot;max-depth&quot;</span>: [<span class="number">0</span>, <span class="number">4</span>],<span class="comment">//嵌套块深度</span></span><br><span class="line">    <span class="string">&quot;max-len&quot;</span>: [<span class="number">0</span>, <span class="number">80</span>, <span class="number">4</span>],<span class="comment">//字符串最大长度</span></span><br><span class="line">    <span class="string">&quot;max-nested-callbacks&quot;</span>: [<span class="number">0</span>, <span class="number">2</span>],<span class="comment">//回调嵌套深度</span></span><br><span class="line">    <span class="string">&quot;max-params&quot;</span>: [<span class="number">0</span>, <span class="number">3</span>],<span class="comment">//函数最多只能有3个参数</span></span><br><span class="line">    <span class="string">&quot;max-statements&quot;</span>: [<span class="number">0</span>, <span class="number">10</span>],<span class="comment">//函数内最多有几个声明</span></span><br><span class="line">    <span class="string">&quot;new-cap&quot;</span>: <span class="number">2</span>,<span class="comment">//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用</span></span><br><span class="line">    <span class="string">&quot;new-parens&quot;</span>: <span class="number">2</span>,<span class="comment">//new时必须加小括号</span></span><br><span class="line">    <span class="string">&quot;newline-after-var&quot;</span>: <span class="number">2</span>,<span class="comment">//变量声明后是否需要空一行</span></span><br><span class="line">    <span class="string">&quot;object-curly-spacing&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//大括号内是否允许不必要的空格</span></span><br><span class="line">    <span class="string">&quot;object-shorthand&quot;</span>: <span class="number">0</span>,<span class="comment">//强制对象字面量缩写语法</span></span><br><span class="line">    <span class="string">&quot;one-var&quot;</span>: <span class="number">1</span>,<span class="comment">//连续声明</span></span><br><span class="line">    <span class="string">&quot;operator-assignment&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//赋值运算符 += -=什么的</span></span><br><span class="line">    <span class="string">&quot;operator-linebreak&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;after&quot;</span>],<span class="comment">//换行时运算符在行尾还是行首</span></span><br><span class="line">    <span class="string">&quot;padded-blocks&quot;</span>: <span class="number">0</span>,<span class="comment">//块语句内行首行尾是否要空行</span></span><br><span class="line">    <span class="string">&quot;prefer-const&quot;</span>: <span class="number">0</span>,<span class="comment">//首选const</span></span><br><span class="line">    <span class="string">&quot;prefer-spread&quot;</span>: <span class="number">0</span>,<span class="comment">//首选展开运算</span></span><br><span class="line">    <span class="string">&quot;prefer-reflect&quot;</span>: <span class="number">0</span>,<span class="comment">//首选Reflect的方法</span></span><br><span class="line">    <span class="string">&quot;quotes&quot;</span>: [<span class="number">1</span>, <span class="string">&quot;single&quot;</span>],<span class="comment">//引号类型 `` &quot;&quot; &#x27;&#x27;</span></span><br><span class="line">    <span class="string">&quot;quote-props&quot;</span>:[<span class="number">2</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//对象字面量中的属性名是否强制双引号</span></span><br><span class="line">    <span class="string">&quot;radix&quot;</span>: <span class="number">2</span>,<span class="comment">//parseInt必须指定第二个参数</span></span><br><span class="line">    <span class="string">&quot;id-match&quot;</span>: <span class="number">0</span>,<span class="comment">//命名检测</span></span><br><span class="line">    <span class="string">&quot;require-yield&quot;</span>: <span class="number">0</span>,<span class="comment">//生成器函数必须有yield</span></span><br><span class="line">    <span class="string">&quot;semi&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//语句强制分号结尾</span></span><br><span class="line">    <span class="string">&quot;semi-spacing&quot;</span>: [<span class="number">0</span>, &#123;<span class="string">&quot;before&quot;</span>: <span class="literal">false</span>, <span class="string">&quot;after&quot;</span>: <span class="literal">true</span>&#125;],<span class="comment">//分号前后空格</span></span><br><span class="line">    <span class="string">&quot;sort-vars&quot;</span>: <span class="number">0</span>,<span class="comment">//变量声明时排序</span></span><br><span class="line">    <span class="string">&quot;space-after-keywords&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//关键字后面是否要空一格</span></span><br><span class="line">    <span class="string">&quot;space-before-blocks&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//不以新行开始的块&#123;前面要不要有空格</span></span><br><span class="line">    <span class="string">&quot;space-before-function-paren&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;always&quot;</span>],<span class="comment">//函数定义时括号前面要不要有空格</span></span><br><span class="line">    <span class="string">&quot;space-in-parens&quot;</span>: [<span class="number">0</span>, <span class="string">&quot;never&quot;</span>],<span class="comment">//小括号里面要不要有空格</span></span><br><span class="line">    <span class="string">&quot;space-infix-ops&quot;</span>: <span class="number">0</span>,<span class="comment">//中缀操作符周围要不要有空格</span></span><br><span class="line">    <span class="string">&quot;space-return-throw-case&quot;</span>: <span class="number">2</span>,<span class="comment">//return throw case后面要不要加空格</span></span><br><span class="line">    <span class="string">&quot;space-unary-ops&quot;</span>: [<span class="number">0</span>, &#123; <span class="string">&quot;words&quot;</span>: <span class="literal">true</span>, <span class="string">&quot;nonwords&quot;</span>: <span class="literal">false</span> &#125;],<span class="comment">//一元运算符的前/后要不要加空格</span></span><br><span class="line">    <span class="string">&quot;spaced-comment&quot;</span>: <span class="number">0</span>,<span class="comment">//注释风格要不要有空格什么的</span></span><br><span class="line">    <span class="string">&quot;strict&quot;</span>: <span class="number">2</span>,<span class="comment">//使用严格模式</span></span><br><span class="line">    <span class="string">&quot;use-isnan&quot;</span>: <span class="number">2</span>,<span class="comment">//禁止比较时使用NaN，只能用isNaN()</span></span><br><span class="line">    <span class="string">&quot;valid-jsdoc&quot;</span>: <span class="number">0</span>,<span class="comment">//jsdoc规则</span></span><br><span class="line">    <span class="string">&quot;valid-typeof&quot;</span>: <span class="number">2</span>,<span class="comment">//必须使用合法的typeof的值</span></span><br><span class="line">    <span class="string">&quot;vars-on-top&quot;</span>: <span class="number">2</span>,<span class="comment">//var必须放在作用域顶部</span></span><br><span class="line">    <span class="string">&quot;wrap-iife&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;inside&quot;</span>],<span class="comment">//立即执行函数表达式的小括号风格</span></span><br><span class="line">    <span class="string">&quot;wrap-regex&quot;</span>: <span class="number">0</span>,<span class="comment">//正则表达式字面量用小括号包起来</span></span><br><span class="line">    <span class="string">&quot;yoda&quot;</span>: [<span class="number">2</span>, <span class="string">&quot;never&quot;</span>]<span class="comment">//禁止尤达条件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESlint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-router 之 keep-alive</title>
      <link href="2017/11/15/vue-router%20%E4%B9%8B%20keep-alive/"/>
      <url>2017/11/15/vue-router%20%E4%B9%8B%20keep-alive/</url>
      
        <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/zgrkaka/article/details/73480947?locationNum=1&fps=1">原文地址</a></p><h4 id="keep-alive-简介"><a href="#keep-alive-简介" class="headerlink" title="keep-alive 简介"></a>keep-alive 简介</h4><p>keep-alive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染。<br>用法也很简单：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 该组件将被缓存！ --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>props</p><p>include - 字符串或正则表达，只有匹配的组件会被缓存<br>exclude - 字符串或正则表达式，任何匹配的组件都不会被缓存</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件 a</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name 为 a 的组件将被缓存！ --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span>可以保留它的状态或避免重新渲染</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">exclude</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 除了 name 为 a 的组件都将被缓存！ --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span>可以保留它的状态或避免重新渲染</span><br></pre></td></tr></table></figure><h4 id="遇见-vue-router"><a href="#遇见-vue-router" class="headerlink" title="遇见 vue-router"></a>遇见 vue-router</h4><p>西湖雨好大，借把伞躲躲雨…<br>router-view 也是一个组件，如果直接被包在 keep-alive 里面，所有路径匹配到的视图组件都会被缓存：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 所有路径匹配到的视图组件都会被缓存！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然而产品汪总是要改需求，拦都拦不住…</p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>如果只想 router-view 里面某个组件被缓存，怎么办？</p><p>使用 include/exclude<br>增加 router.meta 属性<br>使用 include/exclude</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组件 a</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span> <span class="attr">include</span>=<span class="string">&quot;a&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 只有路径匹配到的视图 a 组件会被缓存！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="exclude-例子类似。"><a href="#exclude-例子类似。" class="headerlink" title="exclude 例子类似。"></a>exclude 例子类似。</h4><p>缺点：需要知道组件的 name，项目复杂的时候不是很好的选择<br>增加 router.meta 属性</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// routes 配置</span></span><br><span class="line">export default [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="built_in">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">    <span class="keyword">name</span>: <span class="string">&#x27;home&#x27;</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      keepAlive: <span class="literal">true</span> <span class="comment">// 需要被缓存</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, &#123;</span><br><span class="line">    <span class="built_in">path</span>: <span class="string">&#x27;/:id&#x27;</span>,</span><br><span class="line">    <span class="keyword">name</span>: <span class="string">&#x27;edit&#x27;</span>,</span><br><span class="line">    component: Edit,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      keepAlive: <span class="literal">false</span> <span class="comment">// 不需要被缓存</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;$route.meta.keepAlive&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这里是会被缓存的视图组件，比如 Home！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;!$route.meta.keepAlive&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里是不被缓存的视图组件，比如 Edit！ --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="优点：不需要例举出需要被缓存组件名称"><a href="#优点：不需要例举出需要被缓存组件名称" class="headerlink" title="优点：不需要例举出需要被缓存组件名称"></a>优点：不需要例举出需要被缓存组件名称</h4><p>【加盐】使用 router.meta 拓展</p><p>假设这里有 3 个路由： A、B、C。</p><p>需求：</p><p>默认显示 A<br>B 跳到 A，A 不刷新<br>C 跳到 A，A 刷新<br>实现方式</p><p>在 A 路由里面设置 meta 属性：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="symbol">    path:</span> <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line"><span class="symbol">    name:</span> <span class="string">&#x27;A&#x27;</span>,</span><br><span class="line"><span class="symbol">    component:</span> A,</span><br><span class="line"><span class="symbol">    meta:</span> &#123;</span><br><span class="line"><span class="symbol">        keepAlive:</span> true <span class="comment">// 需要被缓存</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 B 组件里面设置 beforeRouteLeave：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    <span class="function"><span class="title">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line">         <span class="comment">// 设置下一个路由的 meta</span></span><br><span class="line">        to.meta.keepAlive = <span class="literal">true</span>;  <span class="comment">// 让 A 缓存，即不刷新</span></span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在 C 组件里面设置 beforeRouteLeave：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;&#125;,</span><br><span class="line">    <span class="function"><span class="title">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span>, next</span>)</span> &#123;</span><br><span class="line">        <span class="comment">// 设置下一个路由的 meta</span></span><br><span class="line">        to.meta.keepAlive = <span class="literal">false</span>; <span class="comment">// 让 A 不缓存，即刷新</span></span><br><span class="line">        next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样便能实现 B 回到 A，A 不刷新；而 C 回到 A 则刷新。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>路由大法不错，不需要关心哪个页面跳转过来的，只要 router.go(-1) 就能回去，不需要额外参数。</p><p>然而在非单页应用的时候，keep-alive 并不能有效的缓存了= =</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue-router </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微信切换webview</title>
      <link href="2017/11/14/%E5%BE%AE%E4%BF%A1%E5%88%87%E6%8D%A2webview/"/>
      <url>2017/11/14/%E5%BE%AE%E4%BF%A1%E5%88%87%E6%8D%A2webview/</url>
      
        <content type="html"><![CDATA[<p>添加朋友中输入</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">:switchweb</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微信 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>去除行内元素空隙</title>
      <link href="2017/10/11/%E5%8E%BB%E9%99%A4%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E7%A9%BA%E9%9A%99/"/>
      <url>2017/10/11/%E5%8E%BB%E9%99%A4%E8%A1%8C%E5%86%85%E5%85%83%E7%B4%A0%E7%A9%BA%E9%9A%99/</url>
      
        <content type="html"><![CDATA[<h4 id="最简单的办法"><a href="#最简单的办法" class="headerlink" title="最简单的办法"></a>最简单的办法</h4><p>添加样式：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0</span>;</span><br><span class="line">  -webkit-text-size-adjust: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原文地址：<a href="http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/">http://www.zhangxinxu.com/wordpress/2012/04/inline-block-space-remove-%E5%8E%BB%E9%99%A4%E9%97%B4%E8%B7%9D/</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode快捷键</title>
      <link href="2017/10/09/vscode%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>2017/10/09/vscode%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h4 id="Mac-键盘符号说明"><a href="#Mac-键盘符号说明" class="headerlink" title="Mac 键盘符号说明"></a>Mac 键盘符号说明</h4><ul><li><code>⌘</code> == <code>Command</code></li><li><code>⇧</code> == <code>Shift</code></li><li><code>⇪</code> == <code>Caps Lock</code></li><li><code>⌥</code> == <code>Option</code></li><li><code>⌃</code> == <code>Control</code></li><li><code>↩</code> == <code>Return/Enter</code></li></ul><h4 id="常用"><a href="#常用" class="headerlink" title="常用"></a>常用</h4><table><thead><tr><th>Mac 快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>⇧⌘P, F1</td><td>显示命令面板</td></tr><tr><td>⌘P</td><td>快速打开</td></tr><tr><td>⇧⌘N</td><td>新建 窗口/实例</td></tr><tr><td>⌘W</td><td>关闭 窗口/实例</td></tr><tr><td>⌥↓ / ⌥↑</td><td>移动当前行向 下/上</td></tr><tr><td>⇧⌥↓ / ⇧⌥↑</td><td>复制当前行向 下/上</td></tr><tr><td>⇧⌘K</td><td>删除当前行</td></tr><tr><td>⌘Enter / ⇧⌘Enter</td><td>在下/上 插入一行</td></tr><tr><td>⇧⌘\</td><td>跳转到匹配的括号</td></tr><tr><td>⌘/</td><td>切换行注释</td></tr><tr><td>⌥⌘↑</td><td>在上面插入光标</td></tr><tr><td>⌥⌘↓</td><td>在下面插入光标</td></tr><tr><td>⌘F</td><td>查找</td></tr><tr><td>⌥⌘F</td><td>替换</td></tr><tr><td>⇧⌥F</td><td>格式化文档</td></tr><tr><td>⌃G</td><td>转到行…</td></tr><tr><td>⌘\</td><td>拆分编辑窗口</td></tr><tr><td>⌘1 / ⌘2 / ⌘3</td><td>聚焦到第 1，第 2，第 3 编辑器组中</td></tr><tr><td>⌘= / ⇧⌘-</td><td>放大/缩小</td></tr><tr><td>⌘B</td><td>切换侧栏可见性</td></tr><tr><td>⇧⌘E</td><td>显示资源管理器/切换焦点</td></tr><tr><td>⌃`</td><td>显示集成终端</td></tr></tbody></table><h4 id="基本编辑"><a href="#基本编辑" class="headerlink" title="基本编辑"></a>基本编辑</h4><table><thead><tr><th>Mac 快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>⌘] / ⌘[</td><td>向左/向右 缩进当前行</td></tr><tr><td>Home / End</td><td>跳到当前行的头部，尾部</td></tr><tr><td>⌘↑ / ⌘↓</td><td>跳到当前行的开始，结束</td></tr><tr><td>⌃PgUp</td><td>滚动到</td></tr><tr><td>⌃PgDown</td><td>滚动到行头/行尾</td></tr><tr><td>⌘PgUp /⌘PgDown</td><td>滚动到页头/页尾</td></tr><tr><td>⇧⌘[ / ⇧⌘]</td><td>折叠/展开区域</td></tr><tr><td>⌘K ⌘[ / ⌘K ⌘]</td><td>折叠/展开所有子区域</td></tr><tr><td>⌘K ⌘0 / ⌘K ⌘J</td><td>折叠/展开所有区域</td></tr><tr><td>⌘K ⌘C</td><td>添加行注释</td></tr><tr><td>⌘K ⌘U</td><td>删除行注释</td></tr><tr><td>⇧⌥A</td><td>切换块注释</td></tr><tr><td>⌥Z</td><td>切换文字换行</td></tr></tbody></table><h4 id="多光标和选择"><a href="#多光标和选择" class="headerlink" title="多光标和选择"></a>多光标和选择</h4><table><thead><tr><th>Mac 快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>Alt+Click</td><td>插入光标</td></tr><tr><td>⌘U</td><td>撤消上一个光标操作</td></tr><tr><td>⇧⌥I</td><td>在所选每行的末尾插入光标</td></tr><tr><td>⌘I</td><td>选择当前行</td></tr><tr><td>⇧⌘L</td><td>选择当前选择的所有事件</td></tr><tr><td>⌘F2</td><td>选择当前单词的所有出现</td></tr><tr><td>⌃⇧⌘→</td><td>展开选择</td></tr><tr><td>⌃⇧⌘←</td><td>收缩选择</td></tr><tr><td>Shift+Alt + drag mouse（拖动鼠标）</td><td>列（框）选择</td></tr><tr><td>⇧⌥⌘↑</td><td>向上列（框）选择</td></tr><tr><td>⇧⌥⌘↓</td><td>向下列（框）选择</td></tr><tr><td>⇧⌥⌘←</td><td>向左列（框）选择</td></tr><tr><td>⇧⌥⌘→</td><td>向右列（框）选择</td></tr><tr><td>⇧⌥⌘PgUp</td><td>列（框）选择 向上一页</td></tr><tr><td>⇧⌥⌘PgDown</td><td>列（框）选择 向下一页</td></tr></tbody></table><h4 id="搜索和替换"><a href="#搜索和替换" class="headerlink" title="搜索和替换"></a>搜索和替换</h4><table><thead><tr><th>Mac 快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>⌘G / ⇧⌘G</td><td>查找下一个/上一个</td></tr><tr><td>⌥Enter</td><td>Ï</td></tr><tr><td>⌘D</td><td>将选择添加到下一个查找匹配</td></tr><tr><td>⌘K ⌘D</td><td>将最后一个选择移至下一个查找匹配项</td></tr></tbody></table><h4 id="丰富的语言编辑"><a href="#丰富的语言编辑" class="headerlink" title="丰富的语言编辑"></a>丰富的语言编辑</h4><table><thead><tr><th>Mac 快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>⌃Space</td><td>触发建议</td></tr><tr><td>⇧⌘Space</td><td>触发参数提示</td></tr><tr><td>Tab</td><td>Emmet 扩展缩写</td></tr><tr><td>⌘K ⌘F</td><td>格式选择</td></tr><tr><td>F12</td><td>转到定义</td></tr><tr><td>⌥F12</td><td>Peek 定义</td></tr><tr><td>⌘K F12</td><td>打开定义到一边</td></tr><tr><td>⌘.</td><td>快速修复</td></tr><tr><td>⇧F12</td><td>显示引用</td></tr><tr><td>F2</td><td>重命名符号</td></tr><tr><td>⇧⌘. / ⇧⌘,</td><td>替换为下一个/上一个值</td></tr><tr><td>⌘K ⌘X</td><td>修剪尾随空格</td></tr><tr><td>⌘K M</td><td>更改文件语言</td></tr></tbody></table><h4 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h4><table><thead><tr><th>Mac 快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>⌘T</td><td>显示所有符号</td></tr><tr><td>⌘P</td><td>转到文件…</td></tr><tr><td>⇧⌘O</td><td>转到符号…</td></tr><tr><td>⇧⌘M</td><td>显示问题“面板”</td></tr><tr><td>F8 / ⇧F8</td><td>转到下一个/上一个错误或警告</td></tr><tr><td>⌃⇧Tab</td><td>浏览编辑器组历史记录</td></tr><tr><td>⌃- / ⌃⇧-</td><td>后退/前进</td></tr><tr><td>⌃⇧M</td><td>切换选项卡移动焦点</td></tr></tbody></table><h4 id="编辑器管理"><a href="#编辑器管理" class="headerlink" title="编辑器管理"></a>编辑器管理</h4><table><thead><tr><th>Mac 快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>⌘W</td><td>关闭编辑窗口</td></tr><tr><td>⌘K F</td><td>关闭文件</td></tr><tr><td>⌘K ⌘← / ⌘K ⌘→</td><td>聚焦到上一个/下一个编辑器组</td></tr><tr><td>⌘K ⇧⌘← / ⌘K ⇧⌘→</td><td>向左/向右移动编辑器</td></tr><tr><td>⌘K ← / ⌘K →</td><td>移动活动编辑器组</td></tr></tbody></table><h4 id="文件管理"><a href="#文件管理" class="headerlink" title="文件管理"></a>文件管理</h4><table><thead><tr><th>Mac 快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>⌘N</td><td>新建文件</td></tr><tr><td>⌘O</td><td>打开文件</td></tr><tr><td>⌘S</td><td>保存</td></tr><tr><td>⇧⌘S</td><td>保存为…</td></tr><tr><td>⌥⌘S</td><td>保存所有</td></tr><tr><td>⌘W</td><td>关闭</td></tr><tr><td>⌘K ⌘W</td><td>关闭所有</td></tr><tr><td>⇧⌘T</td><td>重新打开已关闭的编辑器</td></tr><tr><td>⌘K</td><td>输入保持打开</td></tr><tr><td>⌃Tab / ⌃⇧</td><td>选项卡打开下一个/上一个</td></tr><tr><td>⌘K P</td><td>复制活动文件的路径</td></tr><tr><td>⌘K R</td><td>在资源管理器中显示活动文件</td></tr><tr><td>⌘K O</td><td>在新窗口/实例中显示活动文件</td></tr></tbody></table><h4 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h4><table><thead><tr><th>Mac 快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>⌃⌘F</td><td>切换全屏</td></tr><tr><td>⌥⌘1</td><td>切换编辑器布局</td></tr><tr><td>⇧⌘F</td><td>显示搜索</td></tr><tr><td>⌃⇧G</td><td>显示 Git</td></tr><tr><td>⇧⌘D</td><td>显示 Debug</td></tr><tr><td>⇧⌘X</td><td>显示扩展名</td></tr><tr><td>⇧⌘H</td><td>在文件中替换</td></tr><tr><td>⇧⌘J</td><td>切换搜索详细信息</td></tr><tr><td>⇧⌘C</td><td>打开新命令提示符/终端</td></tr><tr><td>⇧⌘U</td><td>显示输出面板</td></tr><tr><td>⇧⌘V</td><td>切换 Markdown 预览</td></tr><tr><td>⌘K V</td><td>打开 Markdown 预览到一边</td></tr></tbody></table><h4 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h4><table><thead><tr><th>Mac 快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>F9</td><td>切换断点</td></tr><tr><td>F5</td><td>开始/继续</td></tr><tr><td>F11 / ⇧F11</td><td>跳进/出</td></tr><tr><td>F10</td><td>跳过</td></tr><tr><td>⇧F5</td><td>暂停</td></tr><tr><td>⌘K ⌘I</td><td>显示悬停</td></tr></tbody></table><h4 id="集成终端"><a href="#集成终端" class="headerlink" title="集成终端"></a>集成终端</h4><table><thead><tr><th>Mac 快捷键</th><th>介绍</th></tr></thead><tbody><tr><td>⌃`</td><td>显示集成终端</td></tr><tr><td>⌃⇧`</td><td>创建新终端</td></tr><tr><td>unassigned（末分配）</td><td>复制选择</td></tr><tr><td>unassigned（末分配）</td><td>粘贴到活动终端</td></tr><tr><td>⌘↑</td><td>向上滑动</td></tr><tr><td>⌘↓</td><td>下身滑动</td></tr><tr><td>PgUp</td><td>向上滚动页面</td></tr><tr><td>PgDown</td><td>向下滚动页面</td></tr><tr><td>⌘Home</td><td>滚动到顶部</td></tr><tr><td>⌘End</td><td>滚动到尾部</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统（Centos）下安装nodejs并配置环境</title>
      <link href="2017/08/30/Linux%E7%B3%BB%E7%BB%9F%EF%BC%88Centos%EF%BC%89%E4%B8%8B%E5%AE%89%E8%A3%85nodejs%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/"/>
      <url>2017/08/30/Linux%E7%B3%BB%E7%BB%9F%EF%BC%88Centos%EF%BC%89%E4%B8%8B%E5%AE%89%E8%A3%85nodejs%E5%B9%B6%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/qq_21794603/article/details/68067821">原文地址</a></p><p>总结 Centos 下安装 nodejs 并配置环境，记录成功安装的方法。推荐的安装方法是利用已编译的二进制文件安装，不推荐使用源码的形式安装，一是源码安装比较麻烦，二是需要自行下载编译浪费时间。</p><h3 id="1-安装-nodejs"><a href="#1-安装-nodejs" class="headerlink" title="1.安装 nodejs"></a>1.安装 nodejs</h3><p>访问 nodejs 的官方网站的 downdolad，网址：<a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a>，可以看到最新的 nodejs 下载，包括不同的版本，截图如下所示。</p><p><img src="http://img.blog.csdn.net/20170329190539370?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjE3OTQ2MDM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p><p>根据 Linux 的不同版本选择 32 位或 64 位，因为我的 linux 的虚拟机是 64 位的，所以我选择的是 64 位二进制安装文件（Linux Binariesx64),可以右键选择在新窗口中打开链接，记下这个地址。<a href="https://nodejs.org/dist/v6.10.1/node-v6.10.1-linux-x64.tar.xz">https://nodejs.org/dist/v6.10.1/node-v6.10.1-linux-x64.tar.xz</a></p><p>回到 linux 虚拟机，在控制台输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wget https://nodejs.org/dist/v6.10.1/node-v6.10.1-linux-x64.tar.xz</span></span><br></pre></td></tr></table></figure><p>系统将会下载这个文件，可以选择下载到默认路径。成功下载，在命令行输入命令可以查看到文件。如下图所示。</p><p><img src="http://img.blog.csdn.net/20170329194814703?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjE3OTQ2MDM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p><p>根据下载的文件可以看出它的压缩方式是.xz 的方式，所以不能直接使用 linux 命令 tar 直接下载。需要下载能够解压这种格式的工具。我们可以使用 yum 源来安装，控制台命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum search xz</span><br><span class="line">yum install xz.i386</span><br><span class="line">xz -d node-v6.10.1-linux-x64.tar.xz</span><br><span class="line">tar -xf node-v6.10.1-linux-x64.tar</span><br><span class="line">mv node-v6.10.1-linux-x64 node-v6.10.1</span><br></pre></td></tr></table></figure><p>在控制台输入<code>yum search xz</code>,在搜索到的列表中选择安装软件，如<code>yum install xz.i386</code>,解压完成后文件变为以.tar 后缀，使用<code>tar -xf node-v6.10.1-linux-x64.tar</code>解压文件。</p><p>可以更改文件名方便操作，在命令台输入<code>mv node-v6.10.1-linux-x64 node-v6.10.1</code>，更改文件名为 node-v6.10.1。</p><p>为了验证是否能够使用 node，我们可以输入<code>cd node-v6.10.1/bin</code>，输入<code>./node -v</code>查看 node 版本，安装成功则能够成功显示 node 版本。如下图所示。（截图中的 node -v 应该为./node -v，因为是后面截图的）。</p><p><img src="http://img.blog.csdn.net/20170329193059346?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjE3OTQ2MDM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p><h3 id="2-配置-nodejs"><a href="#2-配置-nodejs" class="headerlink" title="2.配置 nodejs"></a>2.配置 nodejs</h3><p>要想 node 能够在全局能够使用，需要添加连接，在控制台输入下面命令能够实现。其中“/root/node-v6.10.1/bin/node”为二进制 nodejs 文件的目录，根据上面的步骤，我这里是直接解压到了 root 目录下，所以路径为/root/node-v6.10.1/bin/node。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /root/node-v6.10.1/bin/node /usr/<span class="built_in">local</span>/bin/node</span><br><span class="line">ln -s /root/node-v6.10.1/bin/npm /usr/<span class="built_in">local</span>/bin/npm</span><br></pre></td></tr></table></figure><p>配置完成后即可在任何目录下使用 node。</p><p><img src="http://img.blog.csdn.net/20170329194133691?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjE3OTQ2MDM=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7安装mysql及mac使用navicat连接</title>
      <link href="2017/08/29/centos7%E5%AE%89%E8%A3%85mysql%E5%8F%8Amac%E4%BD%BF%E7%94%A8navicat%E8%BF%9E%E6%8E%A5/"/>
      <url>2017/08/29/centos7%E5%AE%89%E8%A3%85mysql%E5%8F%8Amac%E4%BD%BF%E7%94%A8navicat%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="安装-mysql"><a href="#安装-mysql" class="headerlink" title="安装 mysql"></a>安装 mysql</h3><p>安装部分原文地址：<a href="http://www.linuxidc.com/Linux/2016-09/135288.htm">http://www.linuxidc.com/Linux/2016-09/135288.htm</a></p><h4 id="配置-YUM-源"><a href="#配置-YUM-源" class="headerlink" title="配置 YUM 源"></a>配置 YUM 源</h4><p>在 MySQL 官网中下载 YUM 源 rpm 安装包：<a href="http://dev.mysql.com/downloads/repo/yum/">http://dev.mysql.com/downloads/repo/yum/</a></p><h5 id="下载-mysql-源安装包"><a href="#下载-mysql-源安装包" class="headerlink" title="下载 mysql 源安装包"></a>下载 mysql 源安装包</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">yum localinstall mysql57-community-release-el7-11.noarch.rpm</span><br></pre></td></tr></table></figure><h5 id="检查-mysql-源是否安装成功"><a href="#检查-mysql-源是否安装成功" class="headerlink" title="检查 mysql 源是否安装成功"></a>检查 mysql 源是否安装成功</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum repolist enabled | grep &quot;mysql.*-community.*&quot;</span><br></pre></td></tr></table></figure><p><img src="http://www.linuxidc.com/upload/2016_09/160918124758192.png"><br>看到上图所示表示安装成功。</p><p>可以修改 vim /etc/yum.repos.d/mysql-community.repo 源，改变默认安装的 mysql 版本。比如要安装 5.6 版本，将 5.7 源的 enabled=1 改成 enabled=0。然后再将 5.6 源的 enabled=0 改成 enabled=1 即可。改完之后的效果如下所示：</p><p><img src="http://www.linuxidc.com/upload/2016_09/160918124758197.jpg"></p><h4 id="安装-MySQL"><a href="#安装-MySQL" class="headerlink" title="安装 MySQL"></a>安装 MySQL</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-community-server</span><br></pre></td></tr></table></figure><h4 id="启动-MySQL-服务"><a href="#启动-MySQL-服务" class="headerlink" title="启动 MySQL 服务"></a>启动 MySQL 服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><p>查看 MySQL 的启动状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure><p>显示如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysqld.service - MySQL Server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/mysqld.service; disabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since 五 2016-06-24 04:37:37 CST; 35min ago</span><br><span class="line"> Main PID: 2888 (mysqld)</span><br><span class="line">   CGroup: /system.slice/mysqld.service</span><br><span class="line">           └─2888 /usr/sbin/mysqld --daemonize --pid-file=/var/run/mysqld/mysqld.pid</span><br><span class="line"></span><br><span class="line">6月 24 04:37:36 localhost.localdomain systemd[1]: Starting MySQL Server...</span><br><span class="line">6月 24 04:37:37 localhost.localdomain systemd[1]: Started MySQL Server.</span><br></pre></td></tr></table></figure><h4 id="开机启动"><a href="#开机启动" class="headerlink" title="开机启动"></a>开机启动</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable mysqld</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl daemon-reload</span><br></pre></td></tr></table></figure><h4 id="修改-root-本地登录密码"><a href="#修改-root-本地登录密码" class="headerlink" title="修改 root 本地登录密码"></a>修改 root 本地登录密码</h4><p>mysql 安装完成之后，在/var/log/mysqld.log 文件中给 root 生成了一个默认密码。通过下面的方式找到 root 默认密码，然后登录 mysql 进行修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p><img src="http://www.linuxidc.com/upload/2016_09/160918124758193.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;MyNewPass4!&#39;;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set password for &#39;root&#39;@&#39;localhost&#39;&#x3D;password(&#39;MyNewPass4!&#39;);</span><br></pre></td></tr></table></figure><p>注意：mysql5.7 默认安装了密码安全检查插件（validate_password），默认密码检查策略要求密码必须包含：大小写字母、数字和特殊符号，并且长度不能少于 8 位。否则会提示 ERROR 1819 (HY000): Your password does not satisfy the current policy requirements 错误，如下图所示：</p><p><img src="http://www.linuxidc.com/upload/2016_09/160918124758194.png"></p><p>通过 msyql 环境变量可以查看密码策略的相关信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;%password%&#39;;</span><br></pre></td></tr></table></figure><p><img src="http://www.linuxidc.com/upload/2016_09/160918124758195.png"></p><p>validate_password_policy：密码策略，默认为 MEDIUM 策略<br>validate_password_dictionary_file：密码策略文件，策略为 STRONG 才需要<br>validate_password_length：密码最少长度<br>validate_password_mixed_case_count：大小写字符长度，至少 1 个<br>validate_password_number_count ：数字至少 1 个<br>validate_password_special_char_count：特殊字符至少 1 个<br>上述参数是默认策略 MEDIUM 的密码检查规则。</p><p>共有以下几种密码策略：</p><table><thead><tr><th>策略</th><th>检查规则</th></tr></thead><tbody><tr><td>0 or LOW</td><td>Length</td></tr><tr><td>1 or MEDIUM Length</td><td>numeric, lowercase/uppercase, and special characters</td></tr><tr><td>2 or STRONG Length</td><td>numeric, lowercase/uppercase, and special characters; dictionary file</td></tr></tbody></table><p>MySQL 官网密码策略详细说明：<a href="http://dev.mysql.com/doc/refman/5.7/en/validate-password-options-variables.html#sysvar_validate_password_policy">http://dev.mysql.com/doc/refman/5.7/en/validate-password-options-variables.html#sysvar_validate_password_policy</a></p><h5 id="修改密码策略"><a href="#修改密码策略" class="headerlink" title="修改密码策略"></a>修改密码策略</h5><p>在/etc/my.cnf 文件添加 validate_password_policy 配置，指定密码策略</p><p>选择 0（LOW），1（MEDIUM），2（STRONG）其中一种，选择 2 需要提供密码字典文件</p><p><code>validate_password_policy=0</code></p><p>如果不需要密码策略，添加 my.cnf 文件中添加如下配置禁用即可：</p><p><code>validate_password = off</code></p><p>重新启动 mysql 服务使配置生效：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><h4 id="添加远程登录用户"><a href="#添加远程登录用户" class="headerlink" title="添加远程登录用户"></a>添加远程登录用户</h4><p>默认只允许 root 帐户在本地登录，如果要在其它机器上连接 mysql，必须修改 root 允许远程连接，或者添加一个允许远程连接的帐户，为了安全起见，我添加一个新的帐户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; GRANT ALL PRIVILEGES ON *.* TO &#39;root&#39;@&#39;%&#39; IDENTIFIED BY &#39;password&#39; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure><h4 id="配置默认编码为-utf8"><a href="#配置默认编码为-utf8" class="headerlink" title="配置默认编码为 utf8"></a>配置默认编码为 utf8</h4><p>修改/etc/my.cnf 配置文件，在[mysqld]下添加编码配置，如下所示：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character_set_server=utf8</span><br><span class="line">init_connect=&#x27;SET NAMES utf8&#x27;</span><br></pre></td></tr></table></figure><p>重新启动 mysql 服务，查看数据库默认编码如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show variables like &#39;%character%&#39;;</span><br></pre></td></tr></table></figure><p><img src="http://www.linuxidc.com/upload/2016_09/160918124758196.png"></p><p>默认配置文件路径：<br>配置文件：/etc/my.cnf<br>日志文件：/var/log//var/log/mysqld.log<br>服务启动脚本：/usr/lib/systemd/system/mysqld.service<br>socket 文件：/var/run/mysqld/mysqld.pid</p><h3 id="navicat-连接"><a href="#navicat-连接" class="headerlink" title="navicat 连接"></a>navicat 连接</h3><p>在使用 navicat 连接时，一直报错</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2013</span> - Lost <span class="keyword">connection</span> <span class="keyword">to</span> MySQL <span class="keyword">server</span> at <span class="string">&#x27;reading</span></span><br><span class="line"><span class="string">authorization packet&#x27;</span>, <span class="keyword">system</span> error: <span class="number">54</span> &quot;Connection reset by peer&quot;</span><br></pre></td></tr></table></figure><p>但是通过命令行是可以连接的</p><p>最后发现需要在 navicat 中配置 ssh 通道，此处的用户名密码是 centos 服务器的用户名和密码</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> mysql </tag>
            
            <tag> navicat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim快捷键</title>
      <link href="2017/08/11/Vim%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>2017/08/11/Vim%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="标记说明"><a href="#标记说明" class="headerlink" title="标记说明"></a>标记说明</h3><table><thead><tr><th>标记</th><th>含义</th></tr></thead><tbody><tr><td>&lt;C - p&gt;</td><td>同时按 Ctrl 和 p</td></tr><tr><td>f{char}</td><td>按 f 后面跟任意字符</td></tr><tr><td>`{a - z}</td><td>按`后面跟任意小写字母</td></tr><tr><td>m{a - zA - Z}</td><td>m 后面跟任意小写或大写字母</td></tr><tr><td>d{motion}</td><td>d 后面跟任意动作命令</td></tr><tr><td>&lt;C - r&gt;</td><td>同时按 Ctrl 和 r，后面跟一个寄存器地址</td></tr><tr><td><Esc></Esc></td><td>按 Esc 键</td></tr><tr><td><CR></CR></td><td>按回车键，也写作<code>&lt;Enter&gt;</code></td></tr><tr><td><Ctrl></Ctrl></td><td>按 Ctrl 键</td></tr><tr><td><Tab></Tab></td><td>按 Tab 键</td></tr><tr><td><Shift></Shift></td><td>按 Shift 键</td></tr><tr><td>&lt;S - Tab&gt;</td><td>同时按<code>&lt;Shift&gt;</code>和<code>&lt;Tab&gt;</code></td></tr><tr><td><Up></Up></td><td>上光标键</td></tr><tr><td><Down></Down></td><td>下光标健</td></tr><tr><td>ㄩ</td><td>空格</td></tr></tbody></table><h3 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h3><table><thead><tr><th>操作符</th><th>模式</th></tr></thead><tbody><tr><td>i</td><td>插入模式</td></tr><tr><td>R</td><td>替换模式</td></tr><tr><td>gR</td><td>虚拟替换模式</td></tr><tr><td>r</td><td>单次替换模式</td></tr><tr><td>gr</td><td>单次虚拟替换模式</td></tr><tr><td><Esc></Esc></td><td>普通模式</td></tr><tr><td>v</td><td>字符可视模式</td></tr><tr><td>V</td><td>行可视模式</td></tr><tr><td>&lt;C + v&gt;</td><td>列块可视模式</td></tr></tbody></table><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><table><thead><tr><th>操作符</th><th>作用</th></tr></thead><tbody><tr><td>hjkl</td><td>左下上右</td></tr><tr><td>.</td><td>重复上次修改</td></tr><tr><td>x</td><td>删除光标下的字符</td></tr><tr><td>dd</td><td>删除当前行</td></tr><tr><td>&gt;G</td><td>增加当前行到文档末尾处缩进</td></tr><tr><td>$</td><td>光标移至行尾</td></tr><tr><td>a</td><td>光标之后添加内容</td></tr><tr><td>A</td><td>在当前行结尾添加内容，等同：<code>$a</code></td></tr><tr><td>f{char} / t{char}</td><td>查找当前行下一处指定字符位置</td></tr><tr><td>s</td><td>删除光标下字符并进入编辑模式</td></tr><tr><td>u</td><td>撤销上次修改</td></tr><tr><td>/pattern</td><td>查找下一处匹配项</td></tr><tr><td>?pattern</td><td>查找上一处匹配项</td></tr><tr><td>:s/target/replacement</td><td>执行替换</td></tr><tr><td>:s/target/replacement/g</td><td>全部执行替换</td></tr><tr><td>q{a - z0 - 9}q</td><td>录制宏，并用<code>@x</code>执行，x 为宏的名称</td></tr><tr><td>*</td><td>查找光标所在单词 <code>:set hls</code> 可以设置高亮</td></tr><tr><td>n</td><td>跳到下一个匹配项</td></tr><tr><td>c</td><td>删除所选</td></tr><tr><td>cw</td><td>删除光标位置到单词结束，从后往前</td></tr><tr><td>db</td><td>删除光标到单词开头的内容，但保留光标字母</td></tr><tr><td>b</td><td>把光标移动到单词开头</td></tr><tr><td>dw</td><td>删除从光标位置到单词结束，从前往后</td></tr><tr><td>daw</td><td>删除单词</td></tr><tr><td>&lt;C - a&gt;</td><td>对数字加，如果光标不在数字上则移动到当前行数字上</td></tr><tr><td>&lt;C - x&gt;</td><td>对数字减，加减都可带前缀如：<code>10&lt;C - a&gt;</code>为加 10</td></tr><tr><td>yyp</td><td>复制当前行</td></tr><tr><td>&lt;C + o&gt;</td><td>插入 - 普通模式，一次命令后立刻回到插入模式</td></tr><tr><td>zz</td><td>重绘屏幕，使当前行在中央</td></tr><tr><td>&lt;C + r&gt;=6*35<CR></CR></td><td>计算 3*35</td></tr><tr><td>gv</td><td>重选上次的高亮选区</td></tr><tr><td>o</td><td>切换活动端</td></tr><tr><td>vit</td><td>高亮标签内部内容 visually select inside the tag</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>centos7配置防火墙，开启端口</title>
      <link href="2017/08/10/centos7%E9%85%8D%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99%EF%BC%8C%E5%BC%80%E5%90%AF%E7%AB%AF%E5%8F%A3/"/>
      <url>2017/08/10/centos7%E9%85%8D%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99%EF%BC%8C%E5%BC%80%E5%90%AF%E7%AB%AF%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>参考地址：</p><p><a href="http://blog.csdn.net/u013410747/article/details/61696178"> Centos7,配置防火墙，开启端口</a></p><p><a href="https://www.5yun.org/10074.html">Centos7（Firewall）防火墙开启常见端口命令</a></p><p><a href="http://www.mamicode.com/info-detail-1539878.html">firewall-cmd 的常用命令使用</a></p><p><a href="http://blog.sina.com.cn/s/blog_43b39e250102v4zt.html">CentOS 7 中 firewall-cmd 命令</a></p><hr><h3 id="1-centos7-版本对防火墙进行-加强-不再使用原来的-iptables-启用-firewall"><a href="#1-centos7-版本对防火墙进行-加强-不再使用原来的-iptables-启用-firewall" class="headerlink" title="1.centos7 版本对防火墙进行 加强,不再使用原来的 iptables,启用 firewall"></a>1.centos7 版本对防火墙进行 加强,不再使用原来的 iptables,启用 firewall</h3><h4 id="1-1-查看已开放的端口-默认不开放任何端口"><a href="#1-1-查看已开放的端口-默认不开放任何端口" class="headerlink" title="1.1 查看已开放的端口(默认不开放任何端口)"></a>1.1 查看已开放的端口(默认不开放任何端口)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --list-ports</span><br></pre></td></tr></table></figure><h4 id="1-2-开启-80-端口"><a href="#1-2-开启-80-端口" class="headerlink" title="1.2 开启 80 端口"></a>1.2 开启 80 端口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public(作用域) --add-port=80/tcp(端口和访问类型) --permanent(永久生效)</span><br></pre></td></tr></table></figure><h4 id="1-3-重启防火墙"><a href="#1-3-重启防火墙" class="headerlink" title="1.3 重启防火墙"></a>1.3 重启防火墙</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h4 id="1-4-停止防火墙"><a href="#1-4-停止防火墙" class="headerlink" title="1.4 停止防火墙"></a>1.4 停止防火墙</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br></pre></td></tr></table></figure><h4 id="1-5-禁止防火墙开机启动"><a href="#1-5-禁止防火墙开机启动" class="headerlink" title="1.5 禁止防火墙开机启动"></a>1.5 禁止防火墙开机启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">disable</span> firewalld.service</span><br></pre></td></tr></table></figure><h4 id="1-6-删除端口"><a href="#1-6-删除端口" class="headerlink" title="1.6 删除端口"></a>1.6 删除端口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone= public --remove-port=80/tcp --permanent</span><br></pre></td></tr></table></figure><h3 id="2-centos7-以下版本"><a href="#2-centos7-以下版本" class="headerlink" title="2.centos7 以下版本"></a>2.centos7 以下版本</h3><h4 id="2-1-开放-80，22，8080-端口"><a href="#2-1-开放-80，22，8080-端口" class="headerlink" title="2.1 开放 80，22，8080 端口"></a>2.1 开放 80，22，8080 端口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/sbin/iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">/sbin/iptables -I INPUT -p tcp --dport 8080 -j ACCEPT</span><br></pre></td></tr></table></figure><h4 id="2-2-保存"><a href="#2-2-保存" class="headerlink" title="2.2 保存"></a>2.2 保存</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/rc.d/init.d/iptables save</span><br></pre></td></tr></table></figure><h4 id="2-3-查看打开的端口"><a href="#2-3-查看打开的端口" class="headerlink" title="2.3 查看打开的端口"></a>2.3 查看打开的端口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/iptables status</span><br></pre></td></tr></table></figure><h4 id="2-4-关闭防火墙"><a href="#2-4-关闭防火墙" class="headerlink" title="2.4 关闭防火墙"></a>2.4 关闭防火墙</h4><h5 id="2-4-1-永久性生效，重启后不会复原"><a href="#2-4-1-永久性生效，重启后不会复原" class="headerlink" title="2.4.1 永久性生效，重启后不会复原"></a>2.4.1 永久性生效，重启后不会复原</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">开启： chkconfig iptables on</span><br><span class="line">关闭： chkconfig iptables off</span><br></pre></td></tr></table></figure><h5 id="2-4-2-即时生效，重启后复原"><a href="#2-4-2-即时生效，重启后复原" class="headerlink" title="2.4.2 即时生效，重启后复原"></a>2.4.2 即时生效，重启后复原</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">开启： service iptables start</span><br><span class="line">关闭： service iptables stop</span><br></pre></td></tr></table></figure><h3 id="3-常用命令"><a href="#3-常用命令" class="headerlink" title="3 常用命令"></a>3 常用命令</h3><h4 id="3-1-安装-Firewall-命令"><a href="#3-1-安装-Firewall-命令" class="headerlink" title="3.1 安装 Firewall 命令"></a>3.1 安装 Firewall 命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install firewalld firewalld-config</span><br></pre></td></tr></table></figure><h4 id="3-2-Firewall-开启常见端口命令"><a href="#3-2-Firewall-开启常见端口命令" class="headerlink" title="3.2 Firewall 开启常见端口命令"></a>3.2 Firewall 开启常见端口命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=443/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=22/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=21/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=53/udp --permanent</span><br></pre></td></tr></table></figure><h4 id="3-3-Firewall-关闭常见端口命令"><a href="#3-3-Firewall-关闭常见端口命令" class="headerlink" title="3.3 Firewall 关闭常见端口命令"></a>3.3 Firewall 关闭常见端口命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --remove-port=80/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --remove-port=443/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --remove-port=22/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --remove-port=21/tcp --permanent</span><br><span class="line">firewall-cmd --zone=public --remove-port=53/udp --permanent</span><br></pre></td></tr></table></figure><h4 id="3-4-批量添加区间端口"><a href="#3-4-批量添加区间端口" class="headerlink" title="3.4 批量添加区间端口"></a>3.4 批量添加区间端口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=4400-4600/udp --permanent</span><br><span class="line">firewall-cmd --zone=public --add-port=4400-4600/tcp --permanent</span><br></pre></td></tr></table></figure><h4 id="3-5-开启防火墙命令"><a href="#3-5-开启防火墙命令" class="headerlink" title="3.5 开启防火墙命令"></a>3.5 开启防火墙命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld.service</span><br></pre></td></tr></table></figure><h4 id="3-6-重启防火墙命令"><a href="#3-6-重启防火墙命令" class="headerlink" title="3.6 重启防火墙命令"></a>3.6 重启防火墙命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --reload  或者   service firewalld restart</span><br></pre></td></tr></table></figure><h4 id="3-7-查看端口列表"><a href="#3-7-查看端口列表" class="headerlink" title="3.7 查看端口列表"></a>3.7 查看端口列表</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --permanent --list-port</span><br></pre></td></tr></table></figure><h4 id="3-8-禁用防火墙"><a href="#3-8-禁用防火墙" class="headerlink" title="3.8 禁用防火墙"></a>3.8 禁用防火墙</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br></pre></td></tr></table></figure><h4 id="3-9-设置开机启动"><a href="#3-9-设置开机启动" class="headerlink" title="3.9 设置开机启动"></a>3.9 设置开机启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> firewalld</span><br></pre></td></tr></table></figure><h4 id="3-10-停止并禁用开机启动"><a href="#3-10-停止并禁用开机启动" class="headerlink" title="3.10 停止并禁用开机启动"></a>3.10 停止并禁用开机启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sytemctl <span class="built_in">disable</span> firewalld</span><br></pre></td></tr></table></figure><h4 id="3-11-查看状态"><a href="#3-11-查看状态" class="headerlink" title="3.11 查看状态"></a>3.11 查看状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status firewalld或者 firewall-cmd --state</span><br></pre></td></tr></table></figure><h4 id="3-12-永久开启-ftp-服务"><a href="#3-12-永久开启-ftp-服务" class="headerlink" title="3.12 永久开启 ftp 服务"></a>3.12 永久开启 ftp 服务</h4><p>暂时开启去除 –permanent</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --add-service=ftp --permanent</span><br></pre></td></tr></table></figure><h4 id="3-13-永久关闭-ftp-服务"><a href="#3-13-永久关闭-ftp-服务" class="headerlink" title="3.13 永久关闭 ftp 服务"></a>3.13 永久关闭 ftp 服务</h4><p>暂时关闭去除 –permanent</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --remove-service=ftp --permanent</span><br></pre></td></tr></table></figure><h4 id="3-14-让设置生效"><a href="#3-14-让设置生效" class="headerlink" title="3.14 让设置生效"></a>3.14 让设置生效</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure><h4 id="3-15-检查设置是否生效"><a href="#3-15-检查设置是否生效" class="headerlink" title="3.15 检查设置是否生效"></a>3.15 检查设置是否生效</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -L -n | grep 21</span><br></pre></td></tr></table></figure><h4 id="3-16-查询服务启用状态"><a href="#3-16-查询服务启用状态" class="headerlink" title="3.16 查询服务启用状态"></a>3.16 查询服务启用状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --query-service ftp</span><br><span class="line"></span><br><span class="line">firewall-cmd --query-service ssh</span><br><span class="line"></span><br><span class="line">firewall-cmd --query-service samba</span><br><span class="line"></span><br><span class="line">firewall-cmd --query-service http</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS下安装Oh-My-ZSH</title>
      <link href="2017/08/09/CentOS%E4%B8%8B%E5%AE%89%E8%A3%85Oh-My-ZSH/"/>
      <url>2017/08/09/CentOS%E4%B8%8B%E5%AE%89%E8%A3%85Oh-My-ZSH/</url>
      
        <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/w670328683/article/details/49782601">原文地址</a></p><p>使用 root 用户登录，下面的操作基本都没有 root 的困扰，如果非 root 用户请切换至 root 用户操作。</p><h4 id="1、查看系统当前的-shell"><a href="#1、查看系统当前的-shell" class="headerlink" title="1、查看系统当前的 shell"></a>1、查看系统当前的 shell</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure><p>返回结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><p>PS.默认的 shell 一般都是 bash</p><h4 id="2、查看-bin-下是否有-zsh-包"><a href="#2、查看-bin-下是否有-zsh-包" class="headerlink" title="2、查看 bin 下是否有 zsh 包"></a>2、查看 bin 下是否有 zsh 包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><p>返回结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/sbin/nologin</span><br><span class="line">/bin/dash</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/csh</span><br></pre></td></tr></table></figure><p>PS.默认没有安装 zsh</p><h4 id="3、安装-zsh-包"><a href="#3、安装-zsh-包" class="headerlink" title="3、安装 zsh 包"></a>3、安装 zsh 包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install zsh</span><br></pre></td></tr></table></figure><p>安装完成后查看 shell 列表</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><p>返回结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh</span><br><span class="line">/bin/bash</span><br><span class="line">/sbin/nologin</span><br><span class="line">/bin/dash</span><br><span class="line">/bin/tcsh</span><br><span class="line">/bin/csh</span><br><span class="line">/bin/zsh</span><br></pre></td></tr></table></figure><p>现在 zsh 已经安装完成了，需要把系统默认的 shell 由 bash 切换为 zsh</p><h4 id="3、切换-shell-至-zsh，代码如下："><a href="#3、切换-shell-至-zsh，代码如下：" class="headerlink" title="3、切换 shell 至 zsh，代码如下："></a>3、切换 shell 至 zsh，代码如下：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure><p>chsh 用法请自行查找，返回结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Changing shell <span class="keyword">for</span> root.</span><br><span class="line">Shell changed.</span><br></pre></td></tr></table></figure><p>按提示所述，shell 已经更改为 zsh 了，现在查看一下系统当前使用的 shell，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure><p>返回结果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/bash</span><br></pre></td></tr></table></figure><p>看样子还没切换过来，需要重启一下服务器，我的习惯做法是在 ECS 的 web 管理平台重启，reboot 到底好不好使还没试过，大家可以试试</p><p>重启过后，使用代码查看当前使用的 shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$SHELL</span></span><br></pre></td></tr></table></figure><p>返回结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/zsh</span><br></pre></td></tr></table></figure><p>得到如此结果，证明 shell 已经切换成功了。</p><hr><p>下面开始安装 oh-my-zsh</p><p>oh-my-zsh 源码是放在 github 上的，所以先要安装 git</p><h4 id="4、安装-git："><a href="#4、安装-git：" class="headerlink" title="4、安装 git："></a>4、安装 git：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install git</span><br></pre></td></tr></table></figure><h4 id="5、安装-oh-my-zsh"><a href="#5、安装-oh-my-zsh" class="headerlink" title="5、安装 oh-my-zsh:"></a>5、安装 oh-my-zsh:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</span><br></pre></td></tr></table></figure><p>如果显示如下界面表示成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">         __                                     __</span><br><span class="line">  ____  / /_     ____ ___  __  __   ____  _____/ /_</span><br><span class="line"> / __ \/ __ \   / __ `__ \/ / / /  /_  / / ___/ __ \</span><br><span class="line">/ /_/ / / / /  / / / / / / /_/ /    / /_(__  ) / / /</span><br><span class="line">\____/_/ /_/  /_/ /_/ /_/\__, /    /___/____/_/ /_/</span><br><span class="line">                        /____/                       ....is now installed!</span><br><span class="line">Please look over the ~/.zshrc file to select plugins, themes, and options.</span><br><span class="line"></span><br><span class="line">p.s. Follow us at https://twitter.com/ohmyzsh.</span><br><span class="line"></span><br><span class="line">p.p.s. Get stickers and t-shirts at http://shop.planetargon.com.</span><br></pre></td></tr></table></figure><p>如果添加插件、更改 themes 请修改~/.zshrc 或自行查询其它资料。</p><p>至此，zsh 安装完毕，开始享受 oh-my-zsh 吧，如果执行命令时提示 warning: cannot set LC_CTYPE locale 可用以下方法解决：</p><p>修改 profile：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure><p>在 profile 末尾添加以下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> LC_ALL=en_US.UTF-8</span><br><span class="line"><span class="built_in">export</span> LC_CTYPE=en_US.UTF-8</span><br></pre></td></tr></table></figure><p>引用更改后的 profile：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p>此时 bash 已切换至 zsh。</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Oh-My-ZSH </tag>
            
            <tag> CentOS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在 CentOS7 上安装 MongoDB</title>
      <link href="2017/08/09/%E5%9C%A8%20CentOS7%20%E4%B8%8A%E5%AE%89%E8%A3%85%20MongoDB/"/>
      <url>2017/08/09/%E5%9C%A8%20CentOS7%20%E4%B8%8A%E5%AE%89%E8%A3%85%20MongoDB/</url>
      
        <content type="html"><![CDATA[<p><a href="http://www.linuxidc.com/Linux/2016-06/132675.htm">原文地址</a></p><h4 id="1-通过-SecureCRT-连接至-CentOS7-服务器；"><a href="#1-通过-SecureCRT-连接至-CentOS7-服务器；" class="headerlink" title="1 通过 SecureCRT 连接至 CentOS7 服务器；"></a>1 通过 SecureCRT 连接至 CentOS7 服务器；</h4><h4 id="2-进入到-usr-local-目录："><a href="#2-进入到-usr-local-目录：" class="headerlink" title="2 进入到 /usr/local/ 目录："></a>2 进入到 /usr/local/ 目录：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br></pre></td></tr></table></figure><h4 id="3-在当前目录下创建-tools-目录："><a href="#3-在当前目录下创建-tools-目录：" class="headerlink" title="3 在当前目录下创建 tools 目录："></a>3 在当前目录下创建 tools 目录：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p tools</span><br></pre></td></tr></table></figure><h4 id="4-进入到-tools-目录中："><a href="#4-进入到-tools-目录中：" class="headerlink" title="4 进入到 tools 目录中："></a>4 进入到 tools 目录中：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tools</span><br></pre></td></tr></table></figure><h4 id="5-下载与-CentOS-系统匹配的-mongodb-linux-x86-64-rhel70-3-2-4-tgz-文件："><a href="#5-下载与-CentOS-系统匹配的-mongodb-linux-x86-64-rhel70-3-2-4-tgz-文件：" class="headerlink" title="5 下载与 CentOS 系统匹配的 mongodb-linux-x86_64-rhel70-3.2.4.tgz 文件："></a>5 下载与 CentOS 系统匹配的 mongodb-linux-x86_64-rhel70-3.2.4.tgz 文件：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-rhel70-3.2.4.tgz</span><br></pre></td></tr></table></figure><h4 id="6-解压缩-mongodb-linux-x86-64-rhel70-3-2-4-tgz-文件："><a href="#6-解压缩-mongodb-linux-x86-64-rhel70-3-2-4-tgz-文件：" class="headerlink" title="6 解压缩 mongodb-linux-x86_64-rhel70-3.2.4.tgz 文件："></a>6 解压缩 mongodb-linux-x86_64-rhel70-3.2.4.tgz 文件：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mongodb-linux-x86_64-rhel70-3.2.4.tgz</span><br></pre></td></tr></table></figure><p>解压完成后得到 mongodb-linux-x86_64-rhel70-3.2.4 文件夹及其所属的文件；</p><h4 id="7-重命名-mongodb-linux-x86-64-rhel70-3-2-4-文件为-mongodb3-2-4："><a href="#7-重命名-mongodb-linux-x86-64-rhel70-3-2-4-文件为-mongodb3-2-4：" class="headerlink" title="7 重命名 mongodb-linux-x86_64-rhel70-3.2.4 文件为 mongodb3.2.4："></a>7 重命名 mongodb-linux-x86_64-rhel70-3.2.4 文件为 mongodb3.2.4：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv mongodb-linux-x86_64-rhel70-3.2.4 mongodb3.2.4</span><br></pre></td></tr></table></figure><h4 id="8-返回到上一级目录，并创建-mongodb-目录："><a href="#8-返回到上一级目录，并创建-mongodb-目录：" class="headerlink" title="8 返回到上一级目录，并创建 mongodb 目录："></a>8 返回到上一级目录，并创建 mongodb 目录：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ../mkdir -p mongodb</span><br></pre></td></tr></table></figure><h4 id="9-将-mongodb3-2-4-文件从-usr-local-tools目录中移动到-usr-local-mongodb-目录中："><a href="#9-将-mongodb3-2-4-文件从-usr-local-tools目录中移动到-usr-local-mongodb-目录中：" class="headerlink" title="9 将 mongodb3.2.4 文件从/usr/local/tools目录中移动到 /usr/local/mongodb 目录中："></a>9 将 mongodb3.2.4 文件从<code>/usr/local/tools</code>目录中移动到 /usr/local/mongodb 目录中：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv tools/mongodb3.2.4/ mongodb/</span><br></pre></td></tr></table></figure><h4 id="10-进入到-usr-local-mongodb-mongodb3-2-4目录中："><a href="#10-进入到-usr-local-mongodb-mongodb3-2-4目录中：" class="headerlink" title="10 进入到/usr/local/mongodb/mongodb3.2.4目录中："></a>10 进入到<code>/usr/local/mongodb/mongodb3.2.4</code>目录中：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> mongodb/mongodb3.2.4</span><br></pre></td></tr></table></figure><h4 id="11-在-usr-local-mongodb-mongodb3-2-4-bin-目录中创建一个存放日志的目录："><a href="#11-在-usr-local-mongodb-mongodb3-2-4-bin-目录中创建一个存放日志的目录：" class="headerlink" title="11 在/usr/local/mongodb/mongodb3.2.4/bin/目录中创建一个存放日志的目录："></a>11 在<code>/usr/local/mongodb/mongodb3.2.4/bin/</code>目录中创建一个存放日志的目录：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p data/<span class="built_in">test</span>/logs</span><br></pre></td></tr></table></figure><h4 id="12-在-usr-local-mongodb-mongodb3-2-4-bin-目录中创建一个存放数据文件的目录："><a href="#12-在-usr-local-mongodb-mongodb3-2-4-bin-目录中创建一个存放数据文件的目录：" class="headerlink" title="12 在/usr/local/mongodb/mongodb3.2.4/bin/目录中创建一个存放数据文件的目录："></a>12 在<code>/usr/local/mongodb/mongodb3.2.4/bin/</code>目录中创建一个存放数据文件的目录：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p data/<span class="built_in">test</span>/db</span><br></pre></td></tr></table></figure><h4 id="13-进入-bin-目录中："><a href="#13-进入-bin-目录中：" class="headerlink" title="13 进入 bin 目录中："></a>13 进入 bin 目录中：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> bin/</span><br></pre></td></tr></table></figure><h4 id="14-创建配置文件-mongodb-conf："><a href="#14-创建配置文件-mongodb-conf：" class="headerlink" title="14 创建配置文件 mongodb.conf："></a>14 创建配置文件 mongodb.conf：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi mongodb.conf</span><br></pre></td></tr></table></figure><p>在 mongodb.conf 写入如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># idae - MongoDB config start - 2016-05-02</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置数据文件的存放目录</span></span><br><span class="line">dbpath = /usr/<span class="built_in">local</span>/mongodb/mongodb3.2.4/bin/data/<span class="built_in">test</span>/db</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置日志文件的存放目录及其日志文件名</span></span><br><span class="line">logpath = /usr/<span class="built_in">local</span>/mongodb/mongodb3.2.4/bin/data/<span class="built_in">test</span>/logs/mongodb.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置端口号（默认的端口号是 27017）</span></span><br><span class="line">port = 27017</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置为以守护进程的方式运行，即在后台运行</span></span><br><span class="line">fork = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># nohttpinterface = true</span></span><br><span class="line">nohttpinterface = <span class="literal">true</span></span><br><span class="line"><span class="comment"># idae - MongoDB config end - 2016-05-02</span></span><br></pre></td></tr></table></figure><p>按英文状态下的“:wq”保存并退出；</p><p>参数解释:</p><blockquote><p>–dbpath 数据库路径(数据文件)</p></blockquote><blockquote><p>–logpath 日志文件路径</p></blockquote><blockquote><p>–master 指定为主机器</p></blockquote><blockquote><p>–slave 指定为从机器</p></blockquote><blockquote><p>–source 指定主机器的 IP 地址</p></blockquote><blockquote><p>–pologSize 指定日志文件大小不超过 64M.因为 resync 是非常操作量大且耗时，最好通过设置一个足够大的 oplogSize 来避免 resync(默认的 oplog 大小是空闲磁盘大小的 5%)。</p></blockquote><blockquote><p>–logappend 日志文件末尾添加，即使用追加的方式写日志</p></blockquote><blockquote><p>–journal 启用日志</p></blockquote><blockquote><p>–port 启用端口号</p></blockquote><blockquote><p>–fork 在后台运行</p></blockquote><blockquote><p>–only 指定只复制哪一个数据库</p></blockquote><blockquote><p>–slavedelay 指从复制检测的时间间隔</p></blockquote><blockquote><p>–auth 是否需要验证权限登录(用户名和密码)</p></blockquote><blockquote><p>–syncdelay 数据写入硬盘的时间（秒），0 是不等待，直接写入</p></blockquote><blockquote><p>–notablescan 不允许表扫描</p></blockquote><blockquote><p>–maxConns 最大的并发连接数，默认 2000</p></blockquote><blockquote><p>–pidfilepath 指定进程文件，不指定则不产生进程文件</p></blockquote><blockquote><p>–bind_ip 绑定 IP，绑定后只能绑定的 IP 访问服务</p></blockquote><h4 id="15-启动-mongodb-服务："><a href="#15-启动-mongodb-服务：" class="headerlink" title="15 启动 mongodb 服务："></a>15 启动 mongodb 服务：</h4><h5 id="15-1-以自定义的-mongodb-配置文件方式启动："><a href="#15-1-以自定义的-mongodb-配置文件方式启动：" class="headerlink" title="15.1 以自定义的 mongodb 配置文件方式启动："></a>15.1 以自定义的 mongodb 配置文件方式启动：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mongod --config mongodb.conf</span><br></pre></td></tr></table></figure><h5 id="15-2-以修复模式启动-mongodb："><a href="#15-2-以修复模式启动-mongodb：" class="headerlink" title="15.2 以修复模式启动 mongodb："></a>15.2 以修复模式启动 mongodb：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mongod --repair -f mongodb.conf</span><br></pre></td></tr></table></figure><h5 id="15-3-以参数式启动："><a href="#15-3-以参数式启动：" class="headerlink" title="15.3 以参数式启动："></a>15.3 以参数式启动：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mongod /usr/<span class="built_in">local</span>/mongodb/mongodb3.2.4/bin/mongod --dbpath=/usr/<span class="built_in">local</span>/mongodb/mongodb3.2.4/bin/data/<span class="built_in">test</span>/db --logpath=/usr/<span class="built_in">local</span>/mongodb/mongodb3.2.4/bin/data/<span class="built_in">test</span>/logs/mongodb.log --fork</span><br></pre></td></tr></table></figure><p>如果报如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: child process failed, exited with error number 1</span><br></pre></td></tr></table></figure><p>很可能是 mongodb.conf 中配置的路径不一致问题；</p><p>如果报如下错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR: child process failed, exited with error number 100</span><br></pre></td></tr></table></figure><p>很可能是没有正常关闭导致的，那么可以删除 mongod.lock 文件</p><h4 id="16-查看-mongodb-进程："><a href="#16-查看-mongodb-进程：" class="headerlink" title="16 查看 mongodb 进程："></a>16 查看 mongodb 进程：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux |grep mongodb</span><br></pre></td></tr></table></figure><h4 id="17-查看-mongodb-服务的运行日志："><a href="#17-查看-mongodb-服务的运行日志：" class="headerlink" title="17 查看 mongodb 服务的运行日志："></a>17 查看 mongodb 服务的运行日志：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -200f /usr/<span class="built_in">local</span>/mongodb/mongodb3.2.4/bin/data/<span class="built_in">test</span>/logs/mongodb.log</span><br></pre></td></tr></table></figure><h4 id="18-检查端口是否已被启动："><a href="#18-检查端口是否已被启动：" class="headerlink" title="18 检查端口是否已被启动："></a>18 检查端口是否已被启动：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lanp | grep 27017</span><br></pre></td></tr></table></figure><h4 id="19-杀死-mongodb-进程，即可关闭-mongodb-服务："><a href="#19-杀死-mongodb-进程，即可关闭-mongodb-服务：" class="headerlink" title="19 杀死 mongodb 进程，即可关闭 mongodb 服务："></a>19 杀死 mongodb 进程，即可关闭 mongodb 服务：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">kill</span> -15 PID</span><br></pre></td></tr></table></figure><p>PID 可以通过步骤 16 查看到</p><h4 id="20-如果出现如下情况"><a href="#20-如果出现如下情况" class="headerlink" title="20 如果出现如下情况"></a>20 如果出现如下情况</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">warning: Failed to connect to 127.0.0.1:27017, reason: errno:111 Connection refused</span><br></pre></td></tr></table></figure><p>可以采用如下两种方式解决：</p><h5 id="20-1-若数据库出现如上不能连接的原因，可能是-data-目录下的-mongod-lock-文件问题，可以用如下命令修复："><a href="#20-1-若数据库出现如上不能连接的原因，可能是-data-目录下的-mongod-lock-文件问题，可以用如下命令修复：" class="headerlink" title="20.1 若数据库出现如上不能连接的原因，可能是 data 目录下的 mongod.lock 文件问题，可以用如下命令修复："></a>20.1 若数据库出现如上不能连接的原因，可能是 data 目录下的 mongod.lock 文件问题，可以用如下命令修复：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/mongod --repair</span><br></pre></td></tr></table></figure><h5 id="20-2-或者直接删除-mongod-lock"><a href="#20-2-或者直接删除-mongod-lock" class="headerlink" title="20.2 或者直接删除 mongod.lock"></a>20.2 或者直接删除 mongod.lock</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -f /usr/<span class="built_in">local</span>/mongodb/data/db/mongod.lock</span><br></pre></td></tr></table></figure><p>然后再启动 mongodb 服务：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mongod --config mongodb.conf</span><br></pre></td></tr></table></figure><p>如果以上两部依然解决不掉，则是路径文件，我们可以删除<code>/usr/local/mongodb/mongodb3.2.4/bin/data</code> 目录及其子目录，并采用绝对路径的方式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mongod /usr/<span class="built_in">local</span>/mongodb/mongodb3.2.4/bin/mongod --dbpath=/usr/<span class="built_in">local</span>/mongodb/mongodb3.2.4/bin/data/<span class="built_in">test</span>/db --logpath=/usr/<span class="built_in">local</span>/mongodb/mongodb3.2.4/bin/data/<span class="built_in">test</span>/logs/mongodb.log --fork</span><br></pre></td></tr></table></figure><h4 id="21-将-mongodb-服务加入到自启动文件中："><a href="#21-将-mongodb-服务加入到自启动文件中：" class="headerlink" title="21 将 mongodb 服务加入到自启动文件中："></a>21 将 mongodb 服务加入到自启动文件中：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/rc.local</span><br></pre></td></tr></table></figure><p>在文件末尾追加如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/mongodb/mongodb3.2.4/bin/mongod --config mongodb.conf</span><br></pre></td></tr></table></figure><p>保存并退出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">:wq!</span><br></pre></td></tr></table></figure><h4 id="22-客户端常用命令："><a href="#22-客户端常用命令：" class="headerlink" title="22 客户端常用命令："></a>22 客户端常用命令：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.version(); <span class="comment"># 查看 mongodb 的版本</span></span><br><span class="line"></span><br><span class="line">use <span class="built_in">test</span>; <span class="comment"># 进入到指定的数据中，这里是 test 数据库</span></span><br></pre></td></tr></table></figure><h4 id="23-在-usr-local-mongodb-mongodb3-2-4-bin-目录中，键入如下命令，打开一个-mongodb-的客户端程序，即打开一个-mongodb-的-shell-客户端，这个-shell-客户端同时也是一个-JavaScript-编辑器，即可用输入任何的-JavaScript-脚本："><a href="#23-在-usr-local-mongodb-mongodb3-2-4-bin-目录中，键入如下命令，打开一个-mongodb-的客户端程序，即打开一个-mongodb-的-shell-客户端，这个-shell-客户端同时也是一个-JavaScript-编辑器，即可用输入任何的-JavaScript-脚本：" class="headerlink" title="23 在/usr/local/mongodb/mongodb3.2.4/bin/目录中，键入如下命令，打开一个 mongodb 的客户端程序，即打开一个 mongodb 的 shell 客户端，这个 shell 客户端同时也是一个 JavaScript 编辑器，即可用输入任何的 JavaScript 脚本："></a>23 在<code>/usr/local/mongodb/mongodb3.2.4/bin/</code>目录中，键入如下命令，打开一个 mongodb 的客户端程序，即打开一个 mongodb 的 shell 客户端，这个 shell 客户端同时也是一个 JavaScript 编辑器，即可用输入任何的 JavaScript 脚本：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mongo</span><br></pre></td></tr></table></figure><p>默认连接至 test 数据库</p><h4 id="24-在浏览器中输入-IP-27017，如：http-101-201-212-129-27017-可以查看-MongoDB-的版本信息；"><a href="#24-在浏览器中输入-IP-27017，如：http-101-201-212-129-27017-可以查看-MongoDB-的版本信息；" class="headerlink" title="24 在浏览器中输入 IP:27017，如：http://101.201.212.129:27017/ 可以查看 MongoDB 的版本信息；"></a>24 在浏览器中输入 IP:27017，如：<a href="http://101.201.212.129:27017/">http://101.201.212.129:27017/</a> 可以查看 MongoDB 的版本信息；</h4>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>编写高质量JavaScript代码的68个有效方法（译）</title>
      <link href="2017/03/29/%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJavaScript%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95%EF%BC%88%E8%AF%91%EF%BC%89/"/>
      <url>2017/03/29/%E7%BC%96%E5%86%99%E9%AB%98%E8%B4%A8%E9%87%8FJavaScript%E4%BB%A3%E7%A0%81%E7%9A%8468%E4%B8%AA%E6%9C%89%E6%95%88%E6%96%B9%E6%B3%95%EF%BC%88%E8%AF%91%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="1-了解JavaScript"><a href="#1-了解JavaScript" class="headerlink" title="1.了解JavaScript"></a>1.了解JavaScript</h3><p>JavaScript的设计让我们觉得很熟悉。语法让人联想到Java和许多脚本语言中常见的构造（例如：函数，数组，字典和正则表达式）。JavaScript看起来似乎是一个任何有点编程经验或新手程序员都可以快速上手的语言。因为它语言中的核心概念很少。</p><h5 id="知道你正在使用的JavaSctipt版本"><a href="#知道你正在使用的JavaSctipt版本" class="headerlink" title="知道你正在使用的JavaSctipt版本"></a>知道你正在使用的JavaSctipt版本</h5><p>和大多数成功的技术一样，JavaScript随着时间的推移而发展。从最初作为Java在网页互动编程上的补充，最终取代了Java成为Web开发上主流的编程语言。因其受欢迎程度，1997年形成了国际标准，官方命名为ECMAScript。目前已经有了很多实现了ECMAScript标准的JavaScipt版本。</p><p>1999年定稿的第三版ECMAScript标准（通常称为ES3），依然是目前使用最广泛的JavaScript版本。后一代标准是2009发布的第5版（或者叫ES5），ES5引入了许多新功能，并且将一些之前广泛支持却没有被指定的特性标准化。由于ES5还没有被普遍支持，所以我将在本书中标注出哪些语句或块中使用了ES5。</p><p>除了标准版本之外，还有很多非标准的特性，受到一些JavaScript实现的支持。例如,许多JavaScript引擎支持一个<code>const</code>关键字来定义变量,然而ECMAScript标准并没有定义任何关于常量的语法或行为。而且,在不同实现中<code>const</code>的行为也是不同的。在某些情况下,阻止常量变量更新:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.141592653589793</span>;</span><br><span class="line">PI = <span class="string">&quot;modified!&quot;</span>;</span><br><span class="line">PI;  <span class="comment">// 3.141592653589793</span></span><br></pre></td></tr></table></figure><p>还有一些实现中，则直接将<code>const</code>是为<code>var</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.141592653589793</span>;</span><br><span class="line">PI = <span class="string">&quot;modified!&quot;</span>;</span><br><span class="line">PI;  <span class="comment">// &quot;modified!&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一小时入门Vue</title>
      <link href="2017/02/09/%E4%B8%80%E5%B0%8F%E6%97%B6%E5%85%A5%E9%97%A8Vue/"/>
      <url>2017/02/09/%E4%B8%80%E5%B0%8F%E6%97%B6%E5%85%A5%E9%97%A8Vue/</url>
      
        <content type="html"><![CDATA[<h2 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h2><ul><li>我是一个Vue的狂热粉丝，使用Vue半年左右时间，写这个文章主要是为了给自己做个系统的回顾，顺便给同样有需要的人参考一下，如果文中有不对的地方，欢迎留言指出。   </li><li>我一直认为兴趣是最好的老师，在深入学习Vue之前，先跑起来一个简单的Vue的项目，先感受到Vue的魅力，再结合项目看文档会更加简单。   </li><li>这会是一个简单（极其丑陋）的图书馆里系统，包含服务端和客户端。   </li><li>跟着我动手写，光看不写学不好</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>再开始教程之前，我们先配置好环境</p><ul><li>安装node，包括npm <a href="https://nodejs.org/">https://nodejs.org</a></li><li>安装vue-cli   <code>npm install -g vue-cli</code><blockquote><p>vue-cli 是vue.js的脚手架，用于自动生成vue.js模板工程的</p></blockquote></li><li>安装好yarn（非必须，推荐使用） <a href="https://yarnpkg.com/">https://yarnpkg.com</a><blockquote><p>yarn是Facebook推出了一款开源JavaScript包管理器，比npm更可靠，且速度更快</p></blockquote></li></ul><h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><p>首先执行<code>vue init webpack-simple vue-curd</code>，<code>vue-curd</code>是文件夹名，会自动创建，会有3个设置项，分别是项目名、描述和作者，一路回车就行了。由于是教学项目，不会使用有太多的依赖，所以这里我们使用<code>webpack-simple</code>模版来创建，在实际使用中可以使用<code>webpack</code>来创建   </p><p><img src="http://okmneu7zl.bkt.clouddn.com/vue-cli%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE.png"></p><p>现在能看到vue-cli为我们建好了项目，<em><strong>后面文中所有的路径根目录都表示该项目目录</strong></em></p><h2 id="服务端搭建"><a href="#服务端搭建" class="headerlink" title="服务端搭建"></a>服务端搭建</h2><p>这里我们借助json-server这个工具快速搭建后台管理系统的服务端程序：</p><ul><li>执行<code>npm i json-server -g</code>，Mac加上<code>sudo</code></li><li>新建<code>/server</code>目录，用于防止服务端的文件</li><li>新建<code>/server/db.json</code>文件，作为服务端的数据库文件</li><li>在<code>/server/db.json</code>文件中写入以下数据：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;user&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="number">10000</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Jimmy&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;age&quot;</span>: <span class="number">28</span>,</span><br><span class="line">      <span class="attr">&quot;gender&quot;</span>: <span class="string">&quot;male&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="number">10001</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;age&quot;</span>: <span class="number">30</span>,</span><br><span class="line">      <span class="attr">&quot;gender&quot;</span>: <span class="string">&quot;female&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;book&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;前端从入门到精通&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;price&quot;</span>: <span class="number">9300</span>,</span><br><span class="line">      <span class="attr">&quot;owner_id&quot;</span>: <span class="number">10000</span>,</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="number">10000</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;id&quot;</span>: <span class="number">10001</span>,</span><br><span class="line">      <span class="attr">&quot;name&quot;</span>: <span class="string">&quot;Java从入门到放弃&quot;</span>,</span><br><span class="line">      <span class="attr">&quot;price&quot;</span>: <span class="number">1990</span>,</span><br><span class="line">      <span class="attr">&quot;owner_id&quot;</span>: <span class="number">10001</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>最后在<code>/server</code>目录执行<code>json-server db.json -w -p 3000</code>   </li></ul><p>现在打开浏览器，访问网址<code>http://localhost:3000</code>，可以看到如下界面：  </p><p><img src="http://okmneu7zl.bkt.clouddn.com/localhost3000.png"></p><p>点击Routes下面的user会跳转到<code>http://localhost:3000/user</code>，可以看到我们之前在db.json中写入的user数组   </p><p><img src="http://okmneu7zl.bkt.clouddn.com/json.png"></p><p>我们在db.json文件中写入了标准的JSON格式数据，这个json里有一个user数组和一个book数组，这就告诉json-server，我们的数据库里有一个名为user的“表”和一个名为book的“表”，并且表里的数据为xxx，然后json-server就会启动服务器，并且以每个”表”为单位为我们注册一系列标准的RESTFull形式的API接口（路由），以user为例：</p><ul><li>[GET] /user #获取用户列表的接口</li><li>[GET] /user/:id #获取单个用户的接口</li><li>[POST] /user #新增用户的接口</li><li>[PUT] /user/:id #修改用户的接口</li><li>[DELETE] /user/:id #删除用户的接口   </li></ul><p>在获取列表的接口中也可以追加查询参数，来限定查询的结果，比如：</p><ul><li>查询所有男性用户： /user?gender=male</li><li>查询年龄大于等于20并且小于等于29的用户：/user?age_gte=20&amp;age_lte=29</li></ul><p>此外还有分页、排序、匹配、关系查询等查询方式，可以在<a href="https://github.com/typicode/json-server#routes">这里查看更多</a>   </p><p>至此我们就拥有了一套强大的数据接口。</p><h2 id="客户端搭建"><a href="#客户端搭建" class="headerlink" title="客户端搭建"></a>客户端搭建</h2><p>之前我们创建好了项目，但是还没下载依赖，现在根目录执行<code>yarn install</code>   </p><p>安装好依赖后，执行<code>yarn run dev</code>，就能看到下图的欢迎页了   </p><p><img src="http://okmneu7zl.bkt.clouddn.com/vue-welcome.png"></p><h3 id="开始改造模版项目"><a href="#开始改造模版项目" class="headerlink" title="开始改造模版项目"></a>开始改造模版项目</h3><ul><li>删除<code>/src/assets/</code>下的图片</li><li>修改<code>/src/main.js</code>改名为<code>app.js</code>，<em><strong>个人习惯，可以不改，不改的话下两步也跳过</strong></em></li><li>修改<code>/webpack.config.js</code>中第5行<code>entry: &#39;./src/main.js&#39;,</code>为<code>entry: &#39;./src/app.js&#39;,</code>，这个是入口文件。修改第8行<code>publicPath: &#39;/dist/&#39;,</code>为<code>publicPath: &#39;/build/&#39;,</code>，这个是编译后文件的存放路径</li><li>修改<code>/index.html</code>中第9行<code>&lt;script src=&quot;/dist/build.js&quot;&gt;&lt;/script&gt;</code>为<code>&lt;script src=&quot;/build/build.js&quot;&gt;&lt;/script&gt;</code></li><li>将<code>/src/App.vue</code>中的内容删除，只留下下面这些<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>在Vue中<code>&lt;template&gt;</code>中写html，<code>&lt;script&gt;</code>中写脚本，<code>&lt;style&gt;</code>中写样式</li></ul><h3 id="添加用户页面"><a href="#添加用户页面" class="headerlink" title="添加用户页面"></a>添加用户页面</h3><p><code>/src/App.vue</code>添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label&gt;姓名：&lt;/label&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">        &lt;label&gt;年龄：&lt;/label&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;number&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">        &lt;label&gt;性别：&lt;/label&gt;</span><br><span class="line">        &lt;select&gt;</span><br><span class="line">            &lt;option value=<span class="string">&quot;&quot;</span>&gt;请选择&lt;/option&gt;</span><br><span class="line">            &lt;option value=<span class="string">&quot;male&quot;</span>&gt;男&lt;/option&gt;</span><br><span class="line">            &lt;option value=<span class="string">&quot;female&quot;</span>&gt;女&lt;/option&gt;</span><br><span class="line">        &lt;/select&gt;&lt;br&gt;</span><br><span class="line">        &lt;button type=<span class="string">&quot;button&quot;</span>&gt;添加&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>可以看到添加页面的样子了，在<code>&lt;template&gt;</code>中有一点需要注意，<em><strong>每个组件只能有一个根节点</strong></em>，所以我们用<code>&lt;div&gt;</code>包起来   </p><p><img src="http://okmneu7zl.bkt.clouddn.com/1.png"></p><p>现在我们需要获取用户输入的数据，在Vue中可以采取双向绑定的方式来实现，我们先在<code>&lt;script&gt;</code>中添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            form:&#123;</span><br><span class="line">                name:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                age:<span class="string">&#x27;&#x27;</span>,</span><br><span class="line">                gender:<span class="string">&#x27;&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们定义了一个<code>form</code>对象   </p><blockquote><p><code>data</code>是个<code>funciton</code>，要设置的值是<code>retrun</code>回来的一个对象中的属性</p></blockquote><p>下面将实现数据的绑定，改造<code>&lt;template&gt;</code>中代码为如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;label&gt;姓名：&lt;/label&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;text&quot;</span> v-model=<span class="string">&quot;form.name&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;label&gt;年龄：&lt;/label&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;number&quot;</span> v-model=<span class="string">&quot;form.age&quot;</span>&gt;&lt;br&gt;</span><br><span class="line">    &lt;label&gt;性别：&lt;/label&gt;</span><br><span class="line">    &lt;select v-model=<span class="string">&quot;form.gender&quot;</span>&gt;</span><br><span class="line">        &lt;option value=<span class="string">&quot;&quot;</span>&gt;请选择&lt;/option&gt;</span><br><span class="line">        &lt;option value=<span class="string">&quot;male&quot;</span>&gt;男&lt;/option&gt;</span><br><span class="line">        &lt;option value=<span class="string">&quot;female&quot;</span>&gt;女&lt;/option&gt;</span><br><span class="line">    &lt;/select&gt;&lt;br&gt;</span><br><span class="line">    &lt;button type=<span class="string">&quot;button&quot;</span>&gt;添加&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><blockquote><p>通过<code>v-model</code>实现了数据的绑定   </p></blockquote><p>此时<code>data</code>中的值就是用户输入的值了，那么我们如何来确认呢？</p><p>我们来给添加按钮绑定事件，通过点击添加按钮来弹框显示输入的内容，修改<code>&lt;button type=&quot;button&quot;&gt;添加&lt;/button&gt;</code>为<code>&lt;button type=&quot;button&quot; @click=&quot;submit&quot;&gt;添加&lt;/button&gt;</code></p><blockquote><p>Vue中通过<code>@click</code>来监听点击事件</p></blockquote><p>并在<code>&lt;script&gt;</code>中添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123; ... &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">        <span class="function"><span class="title">submit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            alert(<span class="string">`输入的姓名：<span class="subst">$&#123; <span class="built_in">this</span>.form.name &#125;</span>，输入的年龄：<span class="subst">$&#123; <span class="built_in">this</span>.form.age &#125;</span>，选择的性别：<span class="subst">$&#123; <span class="built_in">this</span>.form.gender &#125;</span>`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来试一下吧</p><p><img src="http://okmneu7zl.bkt.clouddn.com/2.png"></p><p>现在，让我们把这条数据存到我们的数据库中吧，改写<code>submit</code>为如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">submit</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    fetch(<span class="string">&#x27;http://localhost:3000/user&#x27;</span>,&#123;</span><br><span class="line">        method: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">        headers: &#123;</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        body: <span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.form)</span><br><span class="line">    &#125;).then(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        alert(<span class="string">&quot;添加成功&quot;</span>)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">response</span> =&gt;</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们使用<code>fetch</code>来提交数据</p><blockquote><p>Fetch被称为下一代Ajax技术,采用Promise方式来处理数据。是一种简洁明了的API，比XMLHttpRequest更加简单易用。</p></blockquote><p>然后看一下<code>http://localhost:3000/user</code>，刚才添加的数据就在里面了   </p><p><img src="http://okmneu7zl.bkt.clouddn.com/3.png"></p><h3 id="表单校验"><a href="#表单校验" class="headerlink" title="表单校验"></a>表单校验</h3><p>我们的现在可以在应用里添加用户了。但是还存在不小的问题：</p><ul><li>用户可以输入任意长的名字</li><li>用户可以输入任意的年龄</li><li>用户可以不选择性别</li></ul><p>盲目信任用户输入的数据，会给系统埋下不小的隐患。这回我们就来把这隐患扼杀在摇篮之中。</p><p>表单验证无非就是对用户输入的数据进行有效性、非空性验证，验证失败会在相应的地方显示错误信息，并阻止用户提交表单。</p><p>我们需要记录每一个字段当前的有效状态，有效时隐藏错误信息，无效时显示错误信息。</p><p>而这个有效/无效，可以在表单值改变的时候进行判断。</p><p>要做校验，在Vue中我们第一时间想到的肯定是<code>computed</code>、<code>watch</code>、<code>get</code>、<code>set</code></p><blockquote><p><a href="https://cn.vuejs.org/v2/guide/computed.html">https://cn.vuejs.org/v2/guide/computed.html</a>   </p></blockquote><p>思路大致上就是在form值发生改变时去同步的执行校验，如果校验失败，显示错误信息，有效则隐藏</p><p>让我们来试试，改造一下代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.name.value&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>年龄：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.age.value&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>性别：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">&quot;form.gender.value&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>添加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">            form:&#123;</span><br><span class="line">                name:&#123;</span><br><span class="line"><span class="javascript">                    value:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    valid:<span class="literal">false</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">                age:&#123;</span><br><span class="line"><span class="javascript">                    value:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    valid:<span class="literal">false</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">                gender:&#123;</span><br><span class="line"><span class="javascript">                    value:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    valid:<span class="literal">false</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">submit</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            fetch(<span class="string">&#x27;http://localhost:3000/user&#x27;</span>,&#123;</span></span><br><span class="line"><span class="javascript">                method: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line">                headers: &#123;</span><br><span class="line"><span class="javascript">                    <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                body: <span class="built_in">JSON</span>.stringify(<span class="built_in">this</span>.form)</span></span><br><span class="line"><span class="javascript">            &#125;).then(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&quot;添加成功&quot;</span>)</span></span><br><span class="line"><span class="javascript">            &#125;).catch(<span class="function"><span class="params">response</span> =&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(response);</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed:&#123;</span><br><span class="line"><span class="javascript">        <span class="string">&#x27;form.name.valid&#x27;</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="built_in">this</span>.form.name.value.length &gt; <span class="number">10</span> ? <span class="literal">false</span> : <span class="literal">true</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>尝试了没有？这段代码是无效的，用<code>watch</code>也是无效的，这里就不写出来了</p><p><del>受ES5的限制，Vuejs不能检测到对象属性的变化</del><code>这句话是错的，下面组件化的原因就改成使代码看着简洁点吧。所以百度出来的东西不一定是对的。。</code></p><p>那么，我们该如何来做呢？</p><p>既然Vue只能检测到data的属性，那么我们可以使用组件化来实现，同时使我们的代码简洁，考虑到之后的修改页面也有类似的页面结构，我们将整个form封成组件</p><blockquote><p>组件（Component）是 Vue.js 最强大的功能之一。组件可以扩展 HTML 元素，封装可重用的代码。在较高层面上，组件是自定义元素， Vue.js 的编译器为它添加特殊功能。在有些情况下，组件也可以是原生 HTML 元素的形式，以 is 特性扩展。</p></blockquote><ul><li>新建<code>/src/components/</code>目录</li><li>在<code>/src/components/</code>下新建<code>form.vue</code>和<code>formItem.vue</code></li><li>将之前的代码搬到<code>formItem.vue</code>，如下：</li></ul><blockquote><p>组件实例的作用域是孤立的。这意味着不能并且不应该在子组件的模板内直接引用父组件的数据。可以使用 props 把数据传给子组件。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123;label&#125;&#125;：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;String&#x27;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;Number&#x27;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;Select&#x27;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;val&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line">        label: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">            <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        type: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">            <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        value: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">            <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用<code>props</code>接收父组件传递过来的参数，用<code>v-if</code>来判断该显示什么，像在<code>data</code>中使用一样用<code>v-model</code>来绑定数据</p><p>下面来写<code>formItem.vue</code>的父组件<code>form.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form-item</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,key) in form&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:value</span>=<span class="string">&quot;item.value&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:type</span>=<span class="string">&quot;item.type&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:label</span>=<span class="string">&quot;item.label&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> formItem <span class="keyword">from</span> <span class="string">&#x27;./formItem.vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line"><span class="javascript">        form: <span class="built_in">Object</span></span></span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        formItem</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我将<code>formItem.vue</code>引入，并通过<code>components</code>在Vue中注册，这里我使用驼峰命名，在使用时直接通过<code>&lt;form-item&gt;</code>来使用</p><p>通过<code>props</code>来获取父组件<code>App.vue</code>传来的数据，然后使用<code>v-for</code>遍历对象的属性，通过<code>:value</code>、<code>:type</code>、<code>:label</code>将值传给子组件<code>formItem.vue</code></p><p>最后修改一下<code>App.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-form</span> <span class="attr">:form</span>=<span class="string">&quot;form&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> form <span class="keyword">from</span> <span class="string">&#x27;./components/form.vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">            form: &#123;</span><br><span class="line">                name: &#123;</span><br><span class="line"><span class="javascript">                    label: <span class="string">&#x27;姓名&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    value: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    type: <span class="string">&#x27;String&#x27;</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">                age: &#123;</span><br><span class="line"><span class="javascript">                    label: <span class="string">&#x27;年龄&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    value: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    type: <span class="string">&#x27;Number&#x27;</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">                gender: &#123;</span><br><span class="line"><span class="javascript">                    label: <span class="string">&#x27;性别&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    value: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    type: <span class="string">&#x27;Select&#x27;</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123; ... &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="javascript">        <span class="string">&#x27;my-form&#x27;</span>: form</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在组件封装好了，但是数据还是没校验。我们先来设定一下规则，继续修改<code>/src/App.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-form</span> <span class="attr">:form</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> form <span class="keyword">from</span> <span class="string">&#x27;./components/form.vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">            form: &#123;</span><br><span class="line">                name: &#123;</span><br><span class="line"><span class="javascript">                    label: <span class="string">&#x27;姓名&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    value: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    type: <span class="string">&#x27;String&#x27;</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">                age: &#123;</span><br><span class="line"><span class="javascript">                    label: <span class="string">&#x27;年龄&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    value: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    type: <span class="string">&#x27;Number&#x27;</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">                gender: &#123;</span><br><span class="line"><span class="javascript">                    label: <span class="string">&#x27;性别&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    value: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    type: <span class="string">&#x27;Select&#x27;</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            rules: &#123;    <span class="comment">//校验规则</span></span></span><br><span class="line">                name: [&#123;</span><br><span class="line">                        max: 10,</span><br><span class="line">                        min: 2,</span><br><span class="line"><span class="javascript">                        message: <span class="string">&#x27;名字必须在2-10个字符之间&#x27;</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="javascript">                        type: <span class="string">&#x27;String&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        message: <span class="string">&#x27;名字格式不正确&#x27;</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                age: [&#123;</span><br><span class="line">                        max: 100,</span><br><span class="line">                        min: 0,</span><br><span class="line"><span class="javascript">                        message: <span class="string">&#x27;年龄必须在0-100岁之间&#x27;</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="javascript">                        type: <span class="string">&#x27;Number&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        message: <span class="string">&#x27;年龄只能是数字&#x27;</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                gender: [&#123;</span><br><span class="line"><span class="javascript">                    value: [<span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;female&#x27;</span>],</span></span><br><span class="line"><span class="javascript">                    message: <span class="string">&#x27;请选择性别&#x27;</span></span></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            validateState: <span class="literal">true</span> <span class="comment">//表单校验状态</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123; ... &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="javascript">        <span class="string">&#x27;my-form&#x27;</span>: form</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>components</code>中，这次我们没有和<code>form.vue</code>中一样注册组件，而采取自定义名称的方式<code>my-form</code></p><p>在这里，我们设定每个属性的校验规则都是一个数组，根据不同的情况可以显示不同的错误信息</p><ul><li><code>max</code>字符串最大长度或number最大值</li><li><code>min</code>字符串最小长度或number最小值</li><li><code>type</code>指定类型</li><li><code>value</code>值只能是该数组中的值</li><li><code>message</code>错误信息</li></ul><p>然后通过<code>:rules</code>将规则传给<code>form.vue</code>，下面是<code>form.vue</code>的代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &lt;form-item</span><br><span class="line">    v-for=&quot;(item,key) in form&quot;</span><br><span class="line">    :field=&quot;item.field&quot;</span><br><span class="line">    :value=&quot;item.value&quot;</span><br><span class="line">    :type=&quot;item.type&quot;</span><br><span class="line">    :rule=&quot;item.rule&quot;</span><br><span class="line">    :label=&quot;item.label&quot;&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> formItem <span class="keyword">from</span> <span class="string">&#x27;./formItem.vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line"><span class="javascript">        form: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">        rules: <span class="built_in">Object</span></span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> form = <span class="built_in">this</span>.form</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> rules = <span class="built_in">this</span>.rules</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> form) &#123;</span></span><br><span class="line">            form[key].rule = rules[key]</span><br><span class="line">            form[key].field = key</span><br><span class="line"><span class="javascript">            form[key].validate = <span class="literal">false</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.form = form</span></span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        formItem</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>每个 Vue 实例在被创建之前都要经过一系列的初始化过程。例如，实例需要配置数据观测(data observer)、编译模版、挂载实例到 DOM ，然后在数据变化时更新 DOM 。在这个过程中，实例也会调用一些<em><strong>生命周期钩子</strong></em> ，这就给我们提供了执行自定义逻辑的机会。例如<code>created</code>这个钩子在实例被创建之后被调用</p></blockquote><p>生命周期：</p><p><img src="http://okmneu7zl.bkt.clouddn.com/lifecycle.png"></p><p>在组件<code>created</code>中，我们将rules整合到form中，方便后面使用，并添加field(属性名)，validate（校验状态)字段</p><p>在<code>&lt;form-item&gt;</code>中，像之前一样将值传给<code>formItem.vue</code></p><p>下面来看下<code>formItem.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123;label&#125;&#125;：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;String&#x27;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;val&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;Number&#x27;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;val&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;Select&#x27;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;val&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            message: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            val: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        field: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="built_in">String</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        label: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">            <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        type: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">            <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        value: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">            <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        rule: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="built_in">Array</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">val</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> _this = <span class="built_in">this</span> <span class="comment">//试试不这么做会怎样，注释掉这行，将下面的_this都换成this，看看this指的是谁</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> valid_msg = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> validateState = <span class="literal">true</span></span></span><br><span class="line">            if (_this.rule) &#123;</span><br><span class="line"><span class="javascript">                _this.rule.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(v)</span></span><br><span class="line">                    if (keys) &#123;</span><br><span class="line"><span class="javascript">                        keys.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">k</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">if</span> (k != <span class="string">&#x27;message&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">let</span> valide = <span class="built_in">eval</span>(k)</span></span><br><span class="line">                                if (!valide(_this.val, v[k])) &#123;</span><br><span class="line"><span class="javascript">                                    valid_msg = v.message ? v.message : <span class="string">&#x27;系统异常&#x27;</span></span></span><br><span class="line"><span class="javascript">                                    validateState = <span class="literal">false</span></span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;)</span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        validateState = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">                        valid_msg = <span class="string">&#x27;系统异常&#x27;</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            _this.message = valid_msg</span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">value</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.val = <span class="built_in">this</span>.value</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params">v, r</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="keyword">typeof</span> v == <span class="string">&#x27;string&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> v.length &gt; r ? <span class="literal">false</span> : <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> v == <span class="string">&#x27;number&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> v &gt; r ? <span class="literal">false</span> : <span class="literal">true</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">min</span>(<span class="params">v, r</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="keyword">typeof</span> v == <span class="string">&#x27;string&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> v.length &lt; r ? <span class="literal">false</span> : <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> v == <span class="string">&#x27;number&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> v &lt; r ? <span class="literal">false</span> : <span class="literal">true</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">v, r</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">typeof</span> v == r.toLowerCase() ? <span class="literal">true</span> : <span class="literal">false</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">value</span>(<span class="params">v, r</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> r.indexOf(v) != -<span class="number">1</span> ? <span class="literal">true</span> : <span class="literal">false</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em><strong>尝试一下注释中说的</strong></em>，看看this指的是什么</p><p>到现在，我们已经能够实现校验了，但是问题又来了，现在<code>App.vue</code>中的<code>form</code>里面的属性值是没有的（动手试试），如<code>form.name.value</code>值一直是空的</p><blockquote><p>prop 是单向绑定的：当父组件的属性变化时，将传导给子组件，但是不会反过来。这是为了防止子组件无意修改了父组件的状态——这会让应用的数据流难以理解。</p></blockquote><p>那么我们如何将<code>formItem.vue</code>中的值传给<code>App.vue</code>，这里是最终形态的<code>formItem.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123;label&#125;&#125;：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;String&#x27;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;val&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;Number&#x27;&quot;</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;val&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-if</span>=<span class="string">&quot;type === &#x27;Select&#x27;&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;val&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            message: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            val: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        field: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="built_in">String</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        label: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">            <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        type: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="built_in">String</span>,</span></span><br><span class="line"><span class="javascript">            <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        value: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="literal">null</span>,</span></span><br><span class="line"><span class="javascript">            <span class="keyword">default</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">        rule: &#123;</span><br><span class="line"><span class="javascript">            type: <span class="built_in">Array</span></span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">val</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> _this = <span class="built_in">this</span> <span class="comment">//试试不这么做会怎样，注释掉这行，将下面的_this都换成this，看看this指的是谁</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> valid_msg = <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> validateState = <span class="literal">true</span></span></span><br><span class="line">            if (_this.rule) &#123;</span><br><span class="line"><span class="javascript">                _this.rule.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(v)</span></span><br><span class="line">                    if (keys) &#123;</span><br><span class="line"><span class="javascript">                        keys.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">k</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">if</span> (k != <span class="string">&#x27;message&#x27;</span>) &#123;</span></span><br><span class="line"><span class="javascript">                                <span class="keyword">let</span> valide = <span class="built_in">eval</span>(k)</span></span><br><span class="line">                                if (!valide(_this.val, v[k])) &#123;</span><br><span class="line"><span class="javascript">                                    valid_msg = v.message ? v.message : <span class="string">&#x27;系统异常&#x27;</span></span></span><br><span class="line"><span class="javascript">                                    validateState = <span class="literal">false</span></span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;)</span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        validateState = <span class="literal">false</span></span></span><br><span class="line"><span class="javascript">                        valid_msg = <span class="string">&#x27;系统异常&#x27;</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            _this.message = valid_msg</span><br><span class="line"><span class="javascript">            _this.$emit(<span class="string">&quot;transferValue&quot;</span>, [_this.field, _this.val,validateState])</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">value</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.val = <span class="built_in">this</span>.value</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">max</span>(<span class="params">v, r</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="keyword">typeof</span> v == <span class="string">&#x27;string&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> v.length &gt; r ? <span class="literal">false</span> : <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> v == <span class="string">&#x27;number&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> v &gt; r ? <span class="literal">false</span> : <span class="literal">true</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">min</span>(<span class="params">v, r</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="keyword">typeof</span> v == <span class="string">&#x27;string&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> v.length &lt; r ? <span class="literal">false</span> : <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> v == <span class="string">&#x27;number&#x27;</span>)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> v &lt; r ? <span class="literal">false</span> : <span class="literal">true</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">v, r</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> <span class="keyword">typeof</span> v == r.toLowerCase() ? <span class="literal">true</span> : <span class="literal">false</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">value</span>(<span class="params">v, r</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> r.indexOf(v) != -<span class="number">1</span> ? <span class="literal">true</span> : <span class="literal">false</span></span></span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们使用自定义事件<code>$emit</code>将值传递出去，这里事件名是<code>transferValue</code>，在父组件中，只要监听<code>transferValue</code>事件就行了</p><p>下面是完整的<code>form.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &lt;form-item</span><br><span class="line">    v-for=&quot;(item,key) in form&quot;</span><br><span class="line">    v-on:transferValue=&quot;transferValue&quot;</span><br><span class="line">    :field=&quot;item.field&quot;</span><br><span class="line">    :value=&quot;item.value&quot;</span><br><span class="line">    :type=&quot;item.type&quot;</span><br><span class="line">    :rule=&quot;item.rule&quot;</span><br><span class="line">    :label=&quot;item.label&quot;&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> formItem <span class="keyword">from</span> <span class="string">&#x27;./formItem.vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line">    props: &#123;</span><br><span class="line"><span class="javascript">        form: <span class="built_in">Object</span>,</span></span><br><span class="line"><span class="javascript">        rules: <span class="built_in">Object</span></span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> form = <span class="built_in">this</span>.form</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> rules = <span class="built_in">this</span>.rules</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> form) &#123;</span></span><br><span class="line">            form[key].rule = rules[key]</span><br><span class="line">            form[key].field = key</span><br><span class="line"><span class="javascript">            form[key].validate = <span class="literal">false</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.form = form</span></span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">transferValue</span>(<span class="params">args</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> [field, value, validate] = [...args]</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.form[field].validate = validate</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> flag = <span class="literal">true</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> <span class="built_in">this</span>.form) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (!<span class="built_in">this</span>.form[key].validate)</span></span><br><span class="line"><span class="javascript">                    flag = <span class="literal">false</span></span></span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$emit(<span class="string">&#x27;changeValue&#x27;</span>, [field, value, flag])</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">        formItem</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们看一下<code>&lt;form-item&gt;</code>中，<code>v-on:transferValue=&quot;transferValue&quot;</code>就是上面说的监听事件，后面的<code>transferValue</code>是<code>methods</code>中的方法名</p><p>下面是完整的<code>App.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-form</span> <span class="attr">:form</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">v-on:changeValue</span>=<span class="string">&quot;changeValue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> form <span class="keyword">from</span> <span class="string">&#x27;./components/form.vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">            form: &#123;</span><br><span class="line">                name: &#123;</span><br><span class="line"><span class="javascript">                    label: <span class="string">&#x27;姓名&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    value: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    type: <span class="string">&#x27;String&#x27;</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">                age: &#123;</span><br><span class="line"><span class="javascript">                    label: <span class="string">&#x27;年龄&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    value: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    type: <span class="string">&#x27;Number&#x27;</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">                gender: &#123;</span><br><span class="line"><span class="javascript">                    label: <span class="string">&#x27;性别&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    value: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    type: <span class="string">&#x27;Select&#x27;</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            rules: &#123;     <span class="comment">//校验规则</span></span></span><br><span class="line">                name: [&#123;</span><br><span class="line">                        max: 10,</span><br><span class="line">                        min: 2,</span><br><span class="line"><span class="javascript">                        message: <span class="string">&#x27;名字必须在2-10个字符之间&#x27;</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="javascript">                        type: <span class="string">&#x27;String&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        message: <span class="string">&#x27;名字格式不正确&#x27;</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                age: [&#123;</span><br><span class="line">                        max: 100,</span><br><span class="line">                        min: 0,</span><br><span class="line"><span class="javascript">                        message: <span class="string">&#x27;年龄必须在0-100岁之间&#x27;</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="javascript">                        type: <span class="string">&#x27;Number&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        message: <span class="string">&#x27;年龄只能是数字&#x27;</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                gender: [&#123;</span><br><span class="line"><span class="javascript">                    value: [<span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;female&#x27;</span>],</span></span><br><span class="line"><span class="javascript">                    message: <span class="string">&#x27;请选择性别&#x27;</span></span></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            validateState: <span class="literal">true</span> <span class="comment">//表单校验状态</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">changeValue</span>(<span class="params">args</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> [field, value, validateState] = [...args]</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.form[field].value = value</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.validateState = validateState</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">submit</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(<span class="built_in">this</span>.validateState)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> form = <span class="built_in">this</span>.form</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> parms = &#123;</span></span><br><span class="line">                    name: form.name.value,</span><br><span class="line">                    age: form.age.value,</span><br><span class="line">                    gender: form.gender.value</span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                fetch(<span class="string">&#x27;http://localhost:3000/user&#x27;</span>, &#123;</span></span><br><span class="line"><span class="javascript">                    method: <span class="string">&#x27;POST&#x27;</span>,</span></span><br><span class="line">                    headers: &#123;</span><br><span class="line"><span class="javascript">                        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line"><span class="javascript">                    body: <span class="built_in">JSON</span>.stringify(parms)</span></span><br><span class="line"><span class="javascript">                &#125;).then(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;添加成功&quot;</span>)</span></span><br><span class="line"><span class="javascript">                &#125;).catch(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">console</span>.log(response);</span></span><br><span class="line">                &#125;)</span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&#x27;数据错误，请修改后提交&#x27;</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="javascript">        <span class="string">&#x27;my-form&#x27;</span>: form</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在，来回顾下流程：</p><ul><li><code>formItem.vue</code>中<code>watch</code>了<code>val</code></li><li>在<code>val</code>发生变化时，遍历对应的<code>rule</code></li><li>当有不匹配规则时，将错误信息改成<code>rule</code>中对应的错误信息</li><li>将属性名、输入值、校验状态通过<code>$emit</code>发送给<code>form.vue</code></li><li><code>form.vue</code>中将通过<code>transferValue</code>收到传递的参数</li><li>将<code>form</code>中对应属性名的属性校验状态修改为传递来的值</li><li>遍历<code>form</code>中所有属性的校验状态，最后将属性名、输入值、整个<code>form</code>的校验状态通过<code>changeValue</code>传给<code>App.vue</code></li><li><code>App.vue</code>中通过<code>changeValue</code>接受参数，将<code>form</code>对应属性的值更新，并修改整个<code>form</code>的校验状态<code>validateState</code></li><li>最后在<code>submit</code>中判断<code>validateState</code>，来判断是否允许提交</li></ul><p>现在我们有了一个完整的添加页面了</p><h3 id="加入路由及列表页面"><a href="#加入路由及列表页面" class="headerlink" title="加入路由及列表页面"></a>加入路由及列表页面</h3><p>现在，我们需要做一个列表页面来展示数据库中的数据，那么，该写在哪呢？添加页面我们目前是直接写在<code>App.vue</code>里的</p><p>之前我们只使用了<code>json-server</code>的<code>POST</code>请求，现在我们还要用到<code>GET</code>请求，所以对我们所有的<code>request</code>进行封装</p><ul><li>新建<code>/src/services/</code>目录并新建<code>request.js</code></li><li>将下面的代码复制到<code>request.js</code>中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">method, url, body</span>) </span>&#123;</span><br><span class="line">    method = method.toUpperCase();</span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">        body = <span class="literal">undefined</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        body = body &amp;&amp; <span class="built_in">JSON</span>.stringify(body);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fetch(url, &#123;</span><br><span class="line">            method,</span><br><span class="line">            headers: &#123;</span><br><span class="line">                <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            body</span><br><span class="line">        &#125;)</span><br><span class="line">        .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.status &gt;= <span class="number">200</span> &amp;&amp; res.status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> res.json();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                alert(<span class="string">&#x27;系统异常&#x27;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> get = <span class="function"><span class="params">url</span> =&gt;</span> request(<span class="string">&#x27;GET&#x27;</span>, url);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> post = <span class="function">(<span class="params">url, body</span>) =&gt;</span> request(<span class="string">&#x27;POST&#x27;</span>, url, body);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> put = <span class="function">(<span class="params">url, body</span>) =&gt;</span> request(<span class="string">&#x27;PUT&#x27;</span>, url, body);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> del = <span class="function">(<span class="params">url, body</span>) =&gt;</span> request(<span class="string">&#x27;DELETE&#x27;</span>, url, body);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>新建目录<code>/src/views</code></li><li>新建文件<code>/src/views/list.vue</code></li><li>新建文件<code>/src/views/add.vue</code></li><li>将<code>/src/App.vue</code>中的代码复制到<code>/src/views/add.vue</code></li><li>修改<code>add.vue</code>如下：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> form <span class="keyword">from</span> <span class="string">&#x27;../components/form.vue&#x27;</span>   <span class="comment">//注意修改路径为../</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; post &#125; <span class="keyword">from</span> <span class="string">&#x27;../services/request.js&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123; ... &#125;,</span></span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">changeValue</span>(<span class="params">args</span>)</span> &#123; ... &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">submit</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(<span class="built_in">this</span>.validateState)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> form = <span class="built_in">this</span>.form</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> parms = &#123; ... &#125;</span></span><br><span class="line"><span class="javascript">                post(<span class="string">&#x27;http://localhost:3000/user&#x27;</span>,parms).then(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;添加成功&quot;</span>)</span></span><br><span class="line">                &#125;)</span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123; ... &#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em><strong>注意：</strong></em> 修改路径<code>./</code>为<code>../</code></p><p>将下面的代码复制到<code>list.vue</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户ID<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>用户名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>性别<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index+1&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.gender&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.age&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; get &#125; <span class="keyword">from</span> <span class="string">&#x27;../services/request.js&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">            list: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        get(<span class="string">&#x27;http://localhost:3000/user&#x27;</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.list = response</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在，我们拥有了一个list页面，一个add页面。但是，我们并不能看到，为什么？<br>回顾一下：</p><ul><li>我们在<code>/webpack.config.js</code>中配置了入口是<code>./src/app.js</code></li><li>然后我们在<code>/app.js</code>引入了<code>/App.vue</code></li></ul><p>然后咧？<code>list.vue</code>和<code>add.vue</code>怎么办？</p><p>这里我们引入<code>vue-router</code>路由</p><blockquote><p>用 Vue.js + vue-router 创建单页应用，是非常简单的。使用 Vue.js 时，我们就已经把组件组合成一个应用了，当你要把 vue-router 加进来，只需要配置组件和路由映射，然后告诉 vue-router 在哪里渲染它们</p></blockquote><p>终端在项目路径下执行<code>npm install vue-router -S</code></p><p><code>vue-router</code>添加到了<code>package.json</code>的<code>dependencies</code>中</p><p><img src="http://okmneu7zl.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-14%20%E4%B8%8B%E5%8D%881.40.44.png"></p><blockquote><p><code>devDependencies</code>  里面的插件只用于开发环境，不用于生产环境，而 <code>dependencies</code>  是需要发布到生产环境的。</p></blockquote><ul><li>新建<code>/src/router</code>目录，并在目录中新建<code>index.js</code>，写入以下代码：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&#x27;../views/list.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Add <span class="keyword">from</span> <span class="string">&#x27;../views/add.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    mode: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">    base: __dirname,</span><br><span class="line">    routes: [&#123;</span><br><span class="line">            name: <span class="string">&#x27;list&#x27;</span>,       <span class="comment">//名称</span></span><br><span class="line">            path: <span class="string">&#x27;/&#x27;</span>,          <span class="comment">//路径</span></span><br><span class="line">            component: List     <span class="comment">//组件</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">            path: <span class="string">&#x27;/add&#x27;</span>,</span><br><span class="line">            component: Add</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;     <span class="comment">//在每次路由跳转之前都会先执行其中的代码，再通过调用next()执行后续操作</span></span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;&#125;)      <span class="comment">//每次路由跳转之后都会执行其中的代码</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我们给列表页指定路径为<code>/</code>，添加页为<code>/add</code>，那么，我们在浏览器中输入<code>http://localhost:8080</code>时，默认的就是列表页，<code>http://localhost:8080/add</code>时，就是添加页</p><ul><li>修改<code>/src/app.js</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>将<code>/src/App.vue</code>修改为如下：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 路由匹配到的组件将渲染在这里 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">class</span>=<span class="string">&quot;view&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>路由匹配到的组件将在<code>&lt;router-view&gt;</code>中渲染</p><p>好了，试试吧，现在可以看到效果了</p><p><img src="http://okmneu7zl.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-02-14%20%E4%B8%8B%E5%8D%882.07.58.png"></p><p>但是我们现在只能通过在浏览器输入地址来切换页面，这可不行，我们来加个按钮</p><p>在<code>list.vue</code>中添加如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">       ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/add&quot;</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>add.vue</code>中添加如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-form</span> <span class="attr">:form</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">v-on:changeValue</span>=<span class="string">&quot;changeValue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>返回列表<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>&lt;router-link&gt;</code>中<code>to</code>写的是要跳转的路径</p><p>好了，添加和列表页完成了，下面来做编辑页面</p><h3 id="编辑页面和路由传参"><a href="#编辑页面和路由传参" class="headerlink" title="编辑页面和路由传参"></a>编辑页面和路由传参</h3><ul><li>新建<code>src/views/edit.vue</code>，并将<code>add.vue</code>中的代码复制过来</li><li>在<code>/src/router/index.js</code>中添加<code>edit</code>组件的路由映射，代码如下</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> List <span class="keyword">from</span> <span class="string">&#x27;../views/list.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Add <span class="keyword">from</span> <span class="string">&#x27;../views/add.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Edit <span class="keyword">from</span> <span class="string">&#x27;../views/edit.vue&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">    mode: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">    base: __dirname,</span><br><span class="line">    routes: [&#123;</span><br><span class="line">            name: <span class="string">&#x27;list&#x27;</span>,       <span class="comment">//名称</span></span><br><span class="line">            path: <span class="string">&#x27;/&#x27;</span>,          <span class="comment">//路径</span></span><br><span class="line">            component: List     <span class="comment">//组件</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">&#x27;add&#x27;</span>,</span><br><span class="line">            path: <span class="string">&#x27;/add&#x27;</span>,</span><br><span class="line">            component: Add</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            name: <span class="string">&#x27;edit&#x27;</span>,</span><br><span class="line">            path: <span class="string">&#x27;/edit/:id&#x27;</span>,</span><br><span class="line">            component: Edit</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;     <span class="comment">//在每次路由跳转之前都会先执行其中的代码，再通过调用next()执行后续操作</span></span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;&#125;)      <span class="comment">//每次路由跳转之后都会执行其中的代码</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>:id</code>是什么？下面讲到</p><ul><li>在<code>/src/views/list.vue</code>中添加如下编辑按钮，代码如下</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index+1&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.gender&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.age&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;toEdit(item.id)&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/add&quot;</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; get &#125; <span class="keyword">from</span> <span class="string">&#x27;../services/request.js&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123; ... &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123; ... &#125;,</span></span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">toEdit</span>(<span class="params">id</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$router.push(&#123;</span></span><br><span class="line"><span class="javascript">                name: <span class="string">&#x27;edit&#x27;</span>,</span></span><br><span class="line">                params: &#123;</span><br><span class="line">                    id: id</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里我们使用了<code>router</code>的另一种跳转方式，编程式路由</p><p>其中<code>name</code>就是我们在<code>/src/router/index.js</code>中设置的<code>name</code>，还记得吗？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name: <span class="string">&#x27;edit&#x27;</span>,</span><br><span class="line">    path: <span class="string">&#x27;/edit/:id&#x27;</span>,</span><br><span class="line">    component: Edit</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>params</code>就是我们在路由跳转时传递给<code>edit.vue</code>页面的参数，<code>id</code>对应的就是上面<code>path: &#39;/edit/:id&#39;,</code>中的<code>id</code></p><p>下面来处理编辑页面，代码修改如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-form</span> <span class="attr">:form</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">v-on:changeValue</span>=<span class="string">&quot;changeValue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>返回列表<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> form <span class="keyword">from</span> <span class="string">&#x27;../components/form.vue&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; get , put &#125; <span class="keyword">from</span> <span class="string">&#x27;../services/request.js&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">            form: &#123;</span><br><span class="line">                name: &#123;</span><br><span class="line"><span class="javascript">                    label: <span class="string">&#x27;姓名&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    value: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    type: <span class="string">&#x27;String&#x27;</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">                age: &#123;</span><br><span class="line"><span class="javascript">                    label: <span class="string">&#x27;年龄&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    value: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    type: <span class="string">&#x27;Number&#x27;</span></span></span><br><span class="line">                &#125;,</span><br><span class="line">                gender: &#123;</span><br><span class="line"><span class="javascript">                    label: <span class="string">&#x27;性别&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    value: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                    type: <span class="string">&#x27;Select&#x27;</span></span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            rules: &#123;     <span class="comment">//校验规则</span></span></span><br><span class="line">                name: [&#123;</span><br><span class="line">                        max: 10,</span><br><span class="line">                        min: 2,</span><br><span class="line"><span class="javascript">                        message: <span class="string">&#x27;名字必须在2-10个字符之间&#x27;</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="javascript">                        type: <span class="string">&#x27;String&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        message: <span class="string">&#x27;名字格式不正确&#x27;</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                age: [&#123;</span><br><span class="line">                        max: 100,</span><br><span class="line">                        min: 0,</span><br><span class="line"><span class="javascript">                        message: <span class="string">&#x27;年龄必须在0-100岁之间&#x27;</span></span></span><br><span class="line">                    &#125;,</span><br><span class="line">                    &#123;</span><br><span class="line"><span class="javascript">                        type: <span class="string">&#x27;Number&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                        message: <span class="string">&#x27;年龄只能是数字&#x27;</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                ],</span><br><span class="line">                gender: [&#123;</span><br><span class="line"><span class="javascript">                    value: [<span class="string">&#x27;male&#x27;</span>, <span class="string">&#x27;female&#x27;</span>],</span></span><br><span class="line"><span class="javascript">                    message: <span class="string">&#x27;请选择性别&#x27;</span></span></span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            validateState: <span class="literal">true</span>, <span class="comment">//表单校验状态</span></span></span><br><span class="line"><span class="javascript">            id:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.id = <span class="built_in">this</span>.$route.params.id  <span class="comment">//路由中传递过来的参数</span></span></span><br><span class="line"><span class="javascript">        get(<span class="string">`http://localhost:3000/user/<span class="subst">$&#123;<span class="built_in">this</span>.id&#125;</span>`</span>).then(<span class="function"><span class="params">response</span> =&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> response) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(key != <span class="string">&#x27;id&#x27;</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.form[key].value = response[key]</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.form);</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">changeValue</span>(<span class="params">args</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> [field, value, validateState] = [...args]</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.form[field].value = value</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.validateState = validateState</span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">submit</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span>(<span class="built_in">this</span>.validateState)&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> form = <span class="built_in">this</span>.form</span></span><br><span class="line"><span class="javascript">                <span class="keyword">let</span> parms = &#123;</span></span><br><span class="line">                    name: form.name.value,</span><br><span class="line">                    age: form.age.value,</span><br><span class="line">                    gender: form.gender.value</span><br><span class="line">                &#125;</span><br><span class="line"><span class="javascript">                put(<span class="string">`http://localhost:3000/user/<span class="subst">$&#123;<span class="built_in">this</span>.id&#125;</span>`</span>,parms).then(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    alert(<span class="string">&quot;修改成功&quot;</span>)</span></span><br><span class="line">                &#125;)</span><br><span class="line"><span class="javascript">            &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(<span class="string">&#x27;数据错误，请修改后提交&#x27;</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line"><span class="javascript">        <span class="string">&#x27;my-form&#x27;</span>: form</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编辑页面和添加的区别在于进入页面时需要通过<code>this.$route.params.id</code>获取列表页传过来的<code>id</code>，然后通过<code>id</code>查询出该用户的信息，并填充在form中</p><p>这里我们还修改了<code>import &#123; get , put &#125; from &#39;../services/request.js&#39;</code>和<code>submit()</code>方法，注意不要漏改了，或者直接整个复制过去</p><p>好了，现在编辑页面也完成了</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>现在添加删除功能，有了前面的编辑，删除相信你不看我的代码也能写了，自己先试试吧</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(item,index) in list&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;index+1&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.id&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.gender&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123;item.age&#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;toEdit(item.id)&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">&quot;toDel(item.id)&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/add&quot;</span>&gt;</span>添加用户<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; get , del &#125; <span class="keyword">from</span> <span class="string">&#x27;../services/request.js&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123; ... &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">created</span>(<span class="params"></span>)</span> &#123; ... &#125;,</span></span><br><span class="line">    methods: &#123;</span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">toEdit</span>(<span class="params">id</span>)</span> &#123; ... &#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">toDel</span>(<span class="params">id</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            del(<span class="string">`http://localhost:3000/user/<span class="subst">$&#123;id&#125;</span>`</span>).then(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="javascript">                get(<span class="string">&#x27;http://localhost:3000/user&#x27;</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="built_in">this</span>.list = response</span></span><br><span class="line">                &#125;)</span><br><span class="line"><span class="javascript">                alert(<span class="string">&#x27;删除成功&#x27;</span>)</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>现在我们完成用户的增删改查所有功能了，但是现在所有人都可以直接操作数据，这肯定不行，我们还需要加入登陆验证才行</p><h3 id="登陆和状态管理-Vuex"><a href="#登陆和状态管理-Vuex" class="headerlink" title="登陆和状态管理(Vuex)"></a>登陆和状态管理(Vuex)</h3><p><em><strong>未完待续</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mongoose入门</title>
      <link href="2017/02/07/Mongoose%E5%85%A5%E9%97%A8/"/>
      <url>2017/02/07/Mongoose%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="安装Node-js和MongoDB"><a href="#安装Node-js和MongoDB" class="headerlink" title="安装Node.js和MongoDB"></a>安装Node.js和MongoDB</h3><p>安装Node.js，地址：<a href="https://nodejs.org/">https://nodejs.org/</a><br>安装MongoDB，地址：<a href="https://www.mongodb.com/download-center?jmp=nav#community">https://www.mongodb.com/</a>    </p><h3 id="启动MongoDB"><a href="#启动MongoDB" class="headerlink" title="启动MongoDB"></a>启动MongoDB</h3><p>cd到mongodb下的bin文件夹，执行<code>./mongod</code>即可，但是我们执行后会出如下错误<br><img src="http://okmneu7zl.bkt.clouddn.com/WX20170131-131657.png"><br>这里提示我们没有/data/db文件夹，需要我们自己来新建，这里我在mongodb-3.4.0下新建了mydata文件夹，并通过<code>./mongod --dbpath ../mydata</code>启动了MongoDB，<code>--datapath</code>是用来指定路径的<br><img src="http://okmneu7zl.bkt.clouddn.com/WX20170131-133558@2x.png"><br>那么让我们来体验一下mongodb吧，首先要新建一个tab，然后同样cd到bin目录下，执行<code>./mongo</code><br><img src="http://okmneu7zl.bkt.clouddn.com/WX20170131-134433.png"><br>然后我们切回之前的tab可以看到有一个新的连接<br><img src="http://okmneu7zl.bkt.clouddn.com/WX20170131-134649.png">   </p><h3 id="MongoDB基础命令"><a href="#MongoDB基础命令" class="headerlink" title="MongoDB基础命令"></a>MongoDB基础命令</h3><p><img src="http://okmneu7zl.bkt.clouddn.com/WX20170131-135808.png"><br>因为我们后期基本不会在shell里来操作，所有这里只讲几个基本的，下面的test可以随意命名，是集合名   </p><ul><li><code>db.test.insert()</code>在集合中插入一条数据   </li><li><code>db.test.find()</code>查找集合中所有的，可以加入参数，如<code>db.test.find(&#123;name:&quot;Jimmy&quot;&#125;)</code>  </li><li><code>db.test.remove(&#123;&#125;)</code>删除集合中所有元素，<code>&#123;&#125;</code>必须写   </li><li><code>show collections</code>查看所有集合   </li></ul><h3 id="mongoose的安装"><a href="#mongoose的安装" class="headerlink" title="mongoose的安装"></a>mongoose的安装</h3><p>新建一个文件夹，通过<code>npm init</code>初始化，通过<code>npm install mongoose --save</code>安装mongoose<br><img src="http://okmneu7zl.bkt.clouddn.com/WX20170131-142334.png">   </p><h3 id="通过mongoose连接数据库"><a href="#通过mongoose连接数据库" class="headerlink" title="通过mongoose连接数据库"></a>通过mongoose连接数据库</h3><p>新建一个js文件，复制以下代码并在shell运行<code>node xxx.js</code>，xxx为你的文件名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://localhost/test&quot;</span>)</span><br></pre></td></tr></table></figure><p>运行之后在之前的mongod的tab中看到有了一个新的连接   </p><h2 id="Mongoose入门"><a href="#Mongoose入门" class="headerlink" title="Mongoose入门"></a>Mongoose入门</h2><h3 id="创建类Class的方式"><a href="#创建类Class的方式" class="headerlink" title="创建类Class的方式"></a>创建类Class的方式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> User = mongoose.model(<span class="string">&quot;User&quot;</span>,userSchema)</span><br></pre></td></tr></table></figure><p><code>&quot;User&quot;</code>表示类名，在数据库中集合名会自动转化为小写加s<code>users</code>      </p><p><code>userSchema</code>定义了对象的原型   ·</p><p><em><strong>举个栗子</strong></em>      </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://localhost/test&quot;</span>)</span><br><span class="line"></span><br><span class="line">userSchema = <span class="keyword">new</span> mongoose.Schema(&#123;  <span class="comment">//如果只需要指定类型的话可以直接写，如果需要其他条件，需要写成对象的形式</span></span><br><span class="line">    name:<span class="built_in">String</span>,</span><br><span class="line">    qq:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">default</span>:<span class="string">&quot;740534248&quot;</span> <span class="comment">//默认</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">&quot;User&quot;</span>,userSchema)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> User(&#123;</span><br><span class="line">    name:<span class="string">&quot;YongMaple&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line">user.save()</span><br></pre></td></tr></table></figure><h3 id="指定对象的属性类型"><a href="#指定对象的属性类型" class="headerlink" title="指定对象的属性类型"></a>指定对象的属性类型</h3><ul><li><p>javascript内置类型</p><ul><li>String</li><li>Number</li><li>Boolean</li><li>Date</li><li>Array   </li></ul></li><li><p>node.js内置类型</p><ul><li>Buffer</li></ul></li><li><p>mongoose特有类型</p><ul><li>Mixed</li><li>ObjectId</li></ul></li></ul><p><em><strong>举个栗子</strong></em>   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose  = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://localhost/test&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ObjSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    str : <span class="built_in">String</span>,</span><br><span class="line">    num : <span class="built_in">Number</span>,</span><br><span class="line">    bool : <span class="built_in">Boolean</span>,</span><br><span class="line">    arr : <span class="built_in">Array</span>,    <span class="comment">//[]</span></span><br><span class="line">    arr2 : [<span class="built_in">Date</span>],</span><br><span class="line">    arr3 : [<span class="built_in">String</span>],</span><br><span class="line">    time : <span class="built_in">Date</span>,</span><br><span class="line"></span><br><span class="line">    buf : Buffer,</span><br><span class="line"></span><br><span class="line">    mxo : mongoose.Schema.Types.Mixed,  <span class="comment">//&#123;&#125;    混合数据类型</span></span><br><span class="line">    oid : mongoose.Schema.Types.ObjectId    <span class="comment">//唯一的</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> obj = mongoose.model(<span class="string">&quot;obj&quot;</span>,ObjSchema)</span><br><span class="line"><span class="keyword">const</span> o = <span class="keyword">new</span> obj(&#123;</span><br><span class="line">    time : <span class="keyword">new</span> <span class="built_in">Date</span>( <span class="number">42342342344</span>),  <span class="comment">//内部自动转化为Date类型，转化失败将报错</span></span><br><span class="line">    arr3 : [<span class="number">1234</span>,<span class="string">&quot;jimmy&quot;</span>,<span class="keyword">new</span> <span class="built_in">Date</span>],     <span class="comment">//内部自动转化 String</span></span><br><span class="line">    buf : <span class="keyword">new</span> Buffer([<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]),</span><br><span class="line"></span><br><span class="line">    oid : mongoose.Types.ObjectId()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">o.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="自定义类型"><a href="#自定义类型" class="headerlink" title="自定义类型"></a>自定义类型</h3><p>使用自定义类型，需要：</p><ul><li>继承mongoose.SchemaType(key,options,typeName)</li><li>重写cast(value)方法</li><li>加入mongoose.Schema.Types</li></ul><p><em><strong>举个栗子</strong></em><br>创建User.js文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//es5版</span></span><br><span class="line"><span class="comment">// function User(key,options)&#123;</span></span><br><span class="line"><span class="comment">//     mongoose.SchemaType.call(this,key,options,&quot;User&quot;)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// User.prototype = Object.create(mongoose.SchemaType.prototype)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// User.prototype.cast = function(val)&#123;</span></span><br><span class="line"><span class="comment">//     if(val.loginname &amp;&amp; val.password &amp;&amp; val.loginname.length &gt; 3)&#123;</span></span><br><span class="line"><span class="comment">//         return &#123;</span></span><br><span class="line"><span class="comment">//             loginname : val.loginname,</span></span><br><span class="line"><span class="comment">//             password : val.password</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;else&#123;</span></span><br><span class="line"><span class="comment">//         throw new Error(&quot;user has error!&quot;)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// mongoose.Schema.Types.User = User;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// module.exports = User;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//es6版</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">mongoose</span>.<span class="title">SchemaType</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">key,opts</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>(key,opts,<span class="string">&quot;User&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">cast</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(val.loginname &amp;&amp; val.password &amp;&amp; val.loginname.length &gt; <span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                loginname : val.loginname,</span><br><span class="line">                password : val.password</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;user has error!&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再创建一个demo.js文件来使用上面的User.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://localhost/test&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> User = <span class="built_in">require</span>(<span class="string">&quot;./User&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> People = mongoose.model(<span class="string">&quot;People&quot;</span>,<span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    user:User</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o = <span class="keyword">new</span> People(&#123;</span><br><span class="line">    user:&#123;</span><br><span class="line">        loginname:<span class="string">&quot;jimmy&quot;</span>,</span><br><span class="line">        password:<span class="string">&quot;123456&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">o.save(<span class="function"><span class="keyword">function</span> <span class="title">callback</span>(<span class="params">err,result</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="所有类型都具有的配置"><a href="#所有类型都具有的配置" class="headerlink" title="所有类型都具有的配置"></a>所有类型都具有的配置</h3><ul><li>强制不得为空（验证器）   <ul><li>required:true</li></ul></li><li>设置属性默认值   <ul><li>default:”qq740534248”</li></ul></li><li>是否包括在查询结果中   <ul><li>select:false</li></ul></li><li>getter 和 setter 拦截器   <ul><li>get:v =&gt; v   </li><li>set:v =&gt; v   </li></ul></li></ul><p><em><strong>举个栗子</strong></em>   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://localhost/test&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Obj = mongoose.model(<span class="string">&quot;Obj&quot;</span>,<span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    str:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">default</span>:<span class="string">&quot;YongMaple&quot;</span>,</span><br><span class="line">        <span class="function"><span class="title">get</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`my name is <span class="subst">$&#123;v&#125;</span>`</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="title">set</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">123</span>+v</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    loginname:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        required:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    str2:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        select:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o = <span class="keyword">new</span> Obj(&#123;</span><br><span class="line">    str:<span class="string">&quot;Jimmy&quot;</span>,</span><br><span class="line">    str2:<span class="string">&quot;111111&quot;</span>,</span><br><span class="line">    loginname:<span class="string">&quot;333333&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(o.str);     <span class="comment">//my name is 123Jimmy</span></span><br><span class="line"></span><br><span class="line">o.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">    Obj.findOne(&#123;&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result);    <span class="comment">//&#123; _id: 58993a84a184201ce8ebf5f5, __v: 0, str: &#x27;123Jimmy&#x27; &#125;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对属性的验证和转换"><a href="#对属性的验证和转换" class="headerlink" title="对属性的验证和转换"></a>对属性的验证和转换</h3><p><strong>验证</strong></p><ul><li>枚举<ul><li>enum:Array</li></ul></li><li>正则表达式验证<ul><li>match</li></ul></li><li>限制字符串最大和最小长度<ul><li>maxlength &amp; minlength   </li></ul></li><li>Number和Date的最大最小值<ul><li>max &amp; min   </li></ul></li></ul><p><strong>转换</strong></p><ul><li>字母大小写转化<ul><li>lowercase &amp; uppercase</li></ul></li><li>去除字符串前后空白字符<ul><li>trim:true/false</li></ul></li></ul><p><em><strong>举个栗子</strong></em>   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose =<span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://localhost/test&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baseDateNum = <span class="built_in">Date</span>.now()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Obj = mongoose.model(<span class="string">&quot;Obj&quot;</span>,<span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line"></span><br><span class="line">    str:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        enum:[<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    qq:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        match:<span class="regexp">/^\d*$/</span>,</span><br><span class="line">        maxlength:<span class="number">20</span>,</span><br><span class="line">        minlength:<span class="number">5</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    lowerstr:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        lowercase:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    upperstr:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        uppercase:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    trimstr:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        trim:<span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    num:&#123;</span><br><span class="line">        type:<span class="built_in">Number</span>,</span><br><span class="line">        min:<span class="number">6</span>,</span><br><span class="line">        max:<span class="number">20</span></span><br><span class="line">    &#125;,</span><br><span class="line">    date:&#123;</span><br><span class="line">        type:<span class="built_in">Date</span>,</span><br><span class="line">        min:<span class="keyword">new</span> <span class="built_in">Date</span>(baseDateNum - <span class="number">1000</span>),</span><br><span class="line">        max:<span class="keyword">new</span> <span class="built_in">Date</span>(baseDateNum + <span class="number">2000</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> o = <span class="keyword">new</span> Obj(&#123;</span><br><span class="line">    str:<span class="string">&quot;bbb&quot;</span>,</span><br><span class="line">    qq:<span class="string">&quot;740534248&quot;</span>,</span><br><span class="line">    lowerstr:<span class="string">&quot;aaaAAAA&quot;</span>,</span><br><span class="line">    upperstr:<span class="string">&quot;bbbBBBB&quot;</span>,</span><br><span class="line">    trimstr:<span class="string">&quot;    aaa  aaff&quot;</span>,</span><br><span class="line">    num:<span class="number">6</span>,</span><br><span class="line">    date:<span class="keyword">new</span> <span class="built_in">Date</span>(baseDateNum+<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(o);</span><br><span class="line"><span class="keyword">const</span> err = o.validateSync()    <span class="comment">//同步校验，后面会讲</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(err);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="自定义验证器"><a href="#自定义验证器" class="headerlink" title="自定义验证器"></a>自定义验证器</h3><p>有三种方式来自定义验证器</p><ul><li>validate:{ validator:Function }</li><li>Class.schema.path(xxx).validate(fn)    //xxx 表示要获取的属性名，然后对其验证</li><li>validator(v,[callback])同步验证器，加入第二个参数callback变为异步验证器   </li></ul><p><em><strong>举个栗子</strong></em>   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://localhost/test&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">&quot;User&quot;</span>,<span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    name:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        <span class="comment">// validate:&#123;   //同步验证器，也可以是数组形式，同时多个验证器</span></span><br><span class="line">        <span class="comment">//     validator(value)&#123;</span></span><br><span class="line">        <span class="comment">//         return value.length &lt;= 9</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">User.schema.path(<span class="string">&quot;name&quot;</span>).validate(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v.length &lt;= <span class="number">9</span></span><br><span class="line">&#125;)</span><br><span class="line">User.schema.path(<span class="string">&quot;name&quot;</span>).validate(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;  <span class="comment">//可以加入多个</span></span><br><span class="line">    <span class="keyword">return</span> v.length &gt; <span class="number">3</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> User(&#123;</span><br><span class="line">    name:<span class="string">&quot;1234&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> err = u.validateSync()</span><br><span class="line"><span class="built_in">console</span>.log(err);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em><strong>再举个异步的栗子</strong></em>   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://localhost/test&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">&quot;User&quot;</span>,<span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    loginname:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        validate:&#123;</span><br><span class="line">            <span class="function"><span class="title">validator</span>(<span class="params">value,cb</span>)</span>&#123;</span><br><span class="line">                User.findOne(&#123;<span class="attr">loginname</span>:value&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</span><br><span class="line">                    cb(!result)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> user = <span class="keyword">new</span> User(&#123;</span><br><span class="line">    loginname:<span class="string">&quot;hahahaha&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line">user.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);   <span class="comment">//运行2遍，第二遍会抛出异常</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="获取错误信息"><a href="#获取错误信息" class="headerlink" title="获取错误信息"></a>获取错误信息</h3><ul><li>doc.validate( error =&gt; error )    <em><strong>异步获得错误信息</strong></em></li><li>error = doc.validateSync()        <em><strong>获取同步错误信息</strong></em></li><li>doc.save( error =&gt; error )        <em><strong>回调获得错误信息</strong></em></li><li>promise = doc.save()              <em><strong>promise方式获得错误信息</strong></em></li><li>Class.update( query , update , { runValidators:true } , callback)   </li></ul><p><em><strong>举个栗子</strong></em>   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://localhost/test&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">&quot;User&quot;</span>,<span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    loginname:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        required:<span class="literal">true</span>,</span><br><span class="line">        validate:&#123;</span><br><span class="line">            <span class="function"><span class="title">validator</span>(<span class="params">value,cb</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    cb(<span class="literal">false</span>)</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> User(&#123;</span><br><span class="line">    loginname:<span class="string">&quot;aaa11&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//1 只能获得同步</span></span><br><span class="line"><span class="keyword">const</span> err = u.validateSync()</span><br><span class="line"><span class="built_in">console</span>.log(err);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 同步异步都能</span></span><br><span class="line"><span class="comment">// u.validate(function(err)&#123;</span></span><br><span class="line"><span class="comment">//     console.log(err);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3 同步异步都能  有可能是底层传上来的错误</span></span><br><span class="line"><span class="comment">// u.save(function(err)&#123;</span></span><br><span class="line"><span class="comment">//     console.log(err);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4 同步异步都能  有可能是底层传上来的错误</span></span><br><span class="line"><span class="comment">// const promise = u.save()</span></span><br><span class="line"><span class="comment">// promise.catch(err =&gt; console.log(err))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//5 同步异步都能  有可能是底层传上来的错误</span></span><br><span class="line"><span class="comment">// User.update(&#123;&#125;,&#123;loginname:&quot;123aaa&quot;&#125;,&#123;runValidators:true&#125;,function(err)&#123;</span></span><br><span class="line"><span class="comment">//     console.log(err);</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure><h3 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h3><ul><li>err.errors    <em><strong>错误集合</strong></em></li><li>err.errors.qq   <em><strong>得到qq属性值的错误信息</strong></em></li><li>{ path , value , message } = err.errors.qq   </li></ul><p><em><strong>举个栗子</strong></em>   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://localhost/test&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">&quot;User&quot;</span>,<span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    loginname:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        required:[<span class="literal">true</span>,<span class="string">&quot;必须输入 &#123;PATH&#125; - &#123;VALUE&#125;&quot;</span>], <span class="comment">//除了enum以外所有内置验证器都是这样写</span></span><br><span class="line">        enum:&#123;<span class="attr">values</span>:[<span class="string">&quot;aaa&quot;</span>,<span class="string">&quot;bbb&quot;</span>],<span class="attr">message</span>:<span class="string">&quot;没在枚举中。。。 &#123;PATH&#125; - &#123;VALUE&#125;&quot;</span>&#125;,     <span class="comment">//枚举时，自定义错误信息比较特殊，是对象形式</span></span><br><span class="line">        validate:&#123;      <span class="comment">//自定义校验器要这样写，也是对象</span></span><br><span class="line">            <span class="function"><span class="title">validator</span>(<span class="params">value,cb</span>)</span>&#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                    cb(<span class="literal">false</span>)   <span class="comment">//模拟异步错误</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;,</span><br><span class="line">            message:<span class="string">&quot;校验错误 &#123;PATH&#125; - &#123;VALUE&#125;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    password:&#123;</span><br><span class="line">        type:<span class="built_in">String</span>,</span><br><span class="line">        required:[<span class="literal">true</span>,<span class="string">&quot;密码必须填写&quot;</span>],</span><br><span class="line">        minlength:[<span class="number">6</span>,<span class="string">&quot;密码至少6位&quot;</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> u = <span class="keyword">new</span> User(&#123;</span><br><span class="line">    loginname:<span class="string">&quot;aaa11&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">u.validate(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line"><span class="comment">//     const &#123;path,value,message&#125; = err.errors.loginname</span></span><br><span class="line"><span class="comment">//     console.log(path);</span></span><br><span class="line"><span class="comment">//     console.log(value);</span></span><br><span class="line"><span class="comment">//     console.log(message);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(err &amp;&amp; err.errors)&#123;</span><br><span class="line">        <span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(err.errors)</span><br><span class="line">        <span class="keyword">let</span> str = <span class="string">&quot;&quot;</span></span><br><span class="line">        keys.map(<span class="function">(<span class="params">v,i</span>) =&gt;</span> &#123;</span><br><span class="line">            str += <span class="string">`<span class="subst">$&#123;v&#125;</span>:<span class="subst">$&#123;err.errors[v]&#125;</span>\n`</span></span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">console</span>.log(str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>例子中<code>&#123;PATH&#125;</code>和<code>&#123;VALUE&#125;</code>是属性名和属性值</p><h3 id="加入方法"><a href="#加入方法" class="headerlink" title="加入方法"></a>加入方法</h3><ul><li>加入实例方法 schema.methods.xxx</li><li>加入静态方法 schema.statics.xxx</li><li>加入虚拟方法 getter/setter方法<ul><li>virtual(‘xxx’).get(handle)   </li><li>virtual(‘xxx’).set(handle)   </li></ul></li></ul><p><em><strong>举个栗子</strong></em>   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://localhost/test&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    firstName: <span class="built_in">String</span>,</span><br><span class="line">    secondName: <span class="built_in">String</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//methods和statics的区别在于this是谁</span></span><br><span class="line">userSchema.methods.getAllName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;.&#x27;</span> + <span class="built_in">this</span>.secondName   <span class="comment">//这里的this指的是对象本身</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">userSchema.statics.getAll = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;             <span class="comment">//可以加入回调函数  function(cb)&#123;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.find(&#123;&#125;)     <span class="comment">//这里的this指的是User类   可以加入回调函数  this.find(&#123;&#125;,cb)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">userSchema.virtual(<span class="string">&quot;allname&quot;</span>).get(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27;.&#x27;</span> + <span class="built_in">this</span>.secondName</span><br><span class="line">&#125;)  <span class="comment">//getter method</span></span><br><span class="line"></span><br><span class="line">userSchema.virtual(<span class="string">&quot;allname&quot;</span>).set(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//Yong.Maple</span></span><br><span class="line">    <span class="keyword">const</span> names = v.split(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.firstName = names[<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">this</span>.secondName = names[<span class="number">1</span>];</span><br><span class="line">&#125;);  <span class="comment">//setter method</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">&quot;User&quot;</span>,userSchema)</span><br><span class="line"></span><br><span class="line"><span class="comment">// const u = new User(&#123;</span></span><br><span class="line"><span class="comment">//     firstName:&quot;Yong &quot;,</span></span><br><span class="line"><span class="comment">//     secondName:&quot;Maple&quot;</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// console.log(u.getAllName());</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// User.remove(&#123;&#125;).then(()=&gt;&#123;</span></span><br><span class="line"><span class="comment">//     User.insertMany([</span></span><br><span class="line"><span class="comment">//         &#123;firstName:&quot;Yong&quot;,secondName:&quot;Maple&quot;&#125;,</span></span><br><span class="line"><span class="comment">//         &#123;firstName:&quot;Zhang&quot;,secondName:&quot;San&quot;&#125;,</span></span><br><span class="line"><span class="comment">//         &#123;firstName:&quot;Li&quot;,secondName:&quot;Si&quot;&#125;</span></span><br><span class="line"><span class="comment">//     ]).then(()=&gt;&#123;</span></span><br><span class="line"><span class="comment">//         User.getAll().then(result=&gt; console.log(result))</span></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">new</span> User(&#123;</span><br><span class="line">    allname:<span class="string">&quot;Yong.Maple&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line">user.save()</span><br><span class="line"><span class="built_in">console</span>.log(user);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对象的增删改"><a href="#对象的增删改" class="headerlink" title="对象的增删改"></a>对象的增删改</h3><ul><li>obj.save / Class.create / Class.insertMany</li><li>obj.remove / Class.remove</li><li>obj.update / Class.update    </li></ul><p><em><strong>举个栗子</strong></em>   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://localhost/test&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">&quot;User&quot;</span>,&#123;</span><br><span class="line">    name:&#123;<span class="attr">type</span>:<span class="built_in">String</span>,<span class="attr">maxlength</span>:<span class="number">10</span>&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">User.remove(&#123;&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// --------------save</span></span><br><span class="line">    <span class="comment">// const user = new User(&#123;name:&quot;JiaYongfeng&quot;&#125;)</span></span><br><span class="line">    <span class="comment">// const promise = user.save()</span></span><br><span class="line">    <span class="comment">// promise</span></span><br><span class="line">    <span class="comment">// .then(u =&gt; console.log(u))</span></span><br><span class="line">    <span class="comment">// .catch(err =&gt; console.log(err))</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// user.save(function (err,u)&#123;</span></span><br><span class="line">    <span class="comment">//     console.log(err,u);</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------------create     成功的保存，失败的抛出异常</span></span><br><span class="line">    <span class="comment">// User.create(&#123;name:&quot;Jia&quot;&#125;,&#123;name:&quot;Yong&quot;&#125;)</span></span><br><span class="line">    <span class="comment">// .then(function(u1,u2)&#123;</span></span><br><span class="line">    <span class="comment">//     console.log(u1,u2);</span></span><br><span class="line">    <span class="comment">// &#125;).catch(err =&gt; console.log(err))</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// User.create([&#123;name:&quot;Jia&quot;&#125;,&#123;name:&quot;Yong1111&quot;&#125;])</span></span><br><span class="line">    <span class="comment">// .then(function(arr)&#123;</span></span><br><span class="line">    <span class="comment">//     console.log(arr);</span></span><br><span class="line">    <span class="comment">// &#125;).catch(err =&gt; console.log(err))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ------------------insertMany     必须是数组，一条失败，全部失败</span></span><br><span class="line">    <span class="comment">// User.insertMany([&#123;name:&quot;Jia&quot;&#125;,&#123;name:&quot;Yong&quot;&#125;])</span></span><br><span class="line">    <span class="comment">// .then(function(arr)&#123;</span></span><br><span class="line">    <span class="comment">//     console.log(arr);</span></span><br><span class="line">    <span class="comment">// &#125;).catch(err =&gt; console.log(err))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// --------------------remove</span></span><br><span class="line">    <span class="comment">// User.insertMany([&#123;name:&quot;Jia22&quot;&#125;,&#123;name:&quot;Jia33&quot;&#125;,&#123;name:&quot;Jiasasd&quot;&#125;,&#123;name:&quot;Yong&quot;&#125;])</span></span><br><span class="line">    <span class="comment">// .then(function(arr)&#123;</span></span><br><span class="line">    <span class="comment">//     User.remove(&#123;name:/^Jia\d*$/&#125;).then(r =&gt; console.log(r))</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// User.remove(&#123;name:&quot;Jia&quot;&#125;).then(r =&gt; console.log(r))</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// arr[0].remove()</span></span><br><span class="line">        <span class="comment">//     .then(obj =&gt; User.create(&#123;name:obj.name + &quot; ----- reborn&quot;&#125;))</span></span><br><span class="line">        <span class="comment">//     .catch(err =&gt; console.log(err))</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// arr[0].remove(function(err,obj)&#123;</span></span><br><span class="line">        <span class="comment">//     console.log(err,obj);</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#125;).catch(err =&gt; console.log(err))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// -----------------------update</span></span><br><span class="line">    User.insertMany([&#123;<span class="attr">name</span>:<span class="string">&quot;Jia22&quot;</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;Jia33&quot;</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;Jiasasd&quot;</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;Yong&quot;</span>&#125;])</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">arr</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        User.update(&#123;&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;YongFeng&quot;</span>&#125;,&#123;<span class="attr">multi</span>:<span class="literal">true</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;      <span class="comment">//默认只修改第一个符合条件的值,需要修改多个要加&#123;multi:true&#125;</span></span><br><span class="line">            <span class="built_in">console</span>.log(err,result);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// console.log(&quot;before update  ==&gt;&quot;,arr[0]);</span></span><br><span class="line">        <span class="comment">// arr[0].update(&#123;name:&quot;123123123123fsdsdfddfsdfdsasdas&quot;&#125;,&#123;runValidators:true&#125;).then(function(result)&#123;</span></span><br><span class="line">        <span class="comment">//     console.log(result);</span></span><br><span class="line">        <span class="comment">// &#125;).catch(err =&gt; console.log(err))</span></span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="字段更改参数"><a href="#字段更改参数" class="headerlink" title="字段更改参数"></a>字段更改参数</h3><ul><li>$inc 加法运算</li><li>$mul 乘法运算</li><li>$min / $max 数值和日期的限定</li><li>$currentDate 设定当前日期</li></ul><p><em><strong>举个栗子</strong></em>   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://localhost/test&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Topic = mongoose.model(<span class="string">&quot;Topic&quot;</span>, <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    title: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    body: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    money: &#123;</span><br><span class="line">        type: <span class="built_in">Number</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="number">0.5</span></span><br><span class="line">    &#125;,</span><br><span class="line">    accessNum: &#123;</span><br><span class="line">        type: <span class="built_in">Number</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    createTime: <span class="built_in">Date</span>,</span><br><span class="line">    updateTime: <span class="built_in">Date</span></span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">Topic.remove(&#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> date = <span class="keyword">new</span> <span class="built_in">Date</span></span><br><span class="line">    <span class="keyword">var</span> topic = <span class="keyword">new</span> Topic(&#123;</span><br><span class="line">        title: <span class="string">&quot;aa&quot;</span>,</span><br><span class="line">        body: <span class="string">&quot;content&quot;</span>,</span><br><span class="line">        createTime: date,</span><br><span class="line">        updateTime: date</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    topic.save(<span class="function"><span class="keyword">function</span>(<span class="params">err, result</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        Topic.update(&#123;&#125;, &#123;</span><br><span class="line">            title: <span class="string">&quot;my js&quot;</span>,</span><br><span class="line"></span><br><span class="line">            $currentDate:&#123;  <span class="comment">//使用当前时间修改updateTime的值</span></span><br><span class="line">                updateTime:<span class="literal">true</span></span><br><span class="line">            &#125;,</span><br><span class="line"></span><br><span class="line">            $min: &#123; <span class="comment">//最小值，和平时理解的不一样，必须小于15，不超过15变成15</span></span><br><span class="line">                accessNum: <span class="number">15</span>   <span class="comment">//15</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// $max: &#123; //最大值，和平时理解的不一样，必须大于15，不满15变成15</span></span><br><span class="line">            <span class="comment">//     accessNum: 15   //15</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//每个参数只能在一个算法当中</span></span><br><span class="line">            <span class="comment">// $mul: &#123; //乘</span></span><br><span class="line">            <span class="comment">//     money: 3    //1.5</span></span><br><span class="line">            <span class="comment">// &#125;,</span></span><br><span class="line">            <span class="comment">// $inc: &#123; //加</span></span><br><span class="line">            <span class="comment">//     accessNum: 2    //2</span></span><br><span class="line">            <span class="comment">// &#125;</span></span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数组类型字段的更改参数"><a href="#数组类型字段的更改参数" class="headerlink" title="数组类型字段的更改参数"></a>数组类型字段的更改参数</h3><ul><li>$pop 删除一条数据</li><li>$addToSet 添加去重数据</li><li>$pull / $pullAll 清除</li><li>$push 加入数据</li></ul><p><em><strong>举个栗子</strong></em>   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://localhost/test&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Topic = mongoose.model(<span class="string">&quot;Topic&quot;</span>, &#123;</span><br><span class="line">    arr: []</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Topic.remove(&#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    Topic.create(&#123;</span><br><span class="line">        arr: [<span class="number">11</span>, <span class="number">22</span>,<span class="number">11</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>]</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  $pop删除一个</span></span><br><span class="line">        <span class="comment">// Topic.update(&#123;&#125;, &#123;</span></span><br><span class="line">        <span class="comment">//     $pop: &#123;</span></span><br><span class="line">        <span class="comment">//         arr: 1  //[11, 22, 33, 44, 55]  正数从后往前，负数从前往后</span></span><br><span class="line">        <span class="comment">//         //arr: -1 //[ 22, 33, 44, 55, 66]</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;).exec()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//  $addToSet添加不重复</span></span><br><span class="line">        <span class="comment">// Topic.update(&#123;&#125;, &#123;</span></span><br><span class="line">        <span class="comment">//     $addToSet: &#123;</span></span><br><span class="line">        <span class="comment">//         // arr: 66     //如果重复，无法添加</span></span><br><span class="line">        <span class="comment">//         // arr: [77,88]    //[11, 22, 33, 44, 55, 66, [77,88]]并不是预期的效果</span></span><br><span class="line">        <span class="comment">//         arr: &#123;</span></span><br><span class="line">        <span class="comment">//             $each: [77, 88]     //[ 11, 22, 33, 44, 55, 66, 77, 88 ]</span></span><br><span class="line">        <span class="comment">//         &#125;</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;).exec()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//  $pull删除一种数据</span></span><br><span class="line">        <span class="comment">// Topic.update(&#123;&#125;,&#123;</span></span><br><span class="line">        <span class="comment">//     $pull:&#123;</span></span><br><span class="line">        <span class="comment">//         arr:11  //[ 22, 33, 44, 55, 66 ]</span></span><br><span class="line">        <span class="comment">//         // arr:[11,22] //无效的</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;).exec()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//  $pullAll删除多种数据</span></span><br><span class="line">        <span class="comment">// Topic.update(&#123;&#125;,&#123;</span></span><br><span class="line">        <span class="comment">//     $pullAll:&#123;</span></span><br><span class="line">        <span class="comment">//         arr:[11,22]  //[ 33, 44, 55, 66 ]</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;).exec()</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//  $push添加数据，可以重复</span></span><br><span class="line">        Topic.update(&#123;&#125;,&#123;</span><br><span class="line">            $push:&#123;</span><br><span class="line">                <span class="comment">// arr:66  //[ 11, 22, 11, 33, 44, 55, 66, 66 ]</span></span><br><span class="line">                arr:&#123;</span><br><span class="line">                    $each: [<span class="number">77</span>, <span class="number">88</span>],</span><br><span class="line">                    $position:<span class="number">0</span>,     <span class="comment">//从指定位置开始添加[ 77, 88, 11, 22, 11, 33, 44, 55, 66 ]</span></span><br><span class="line">                    $slice:-<span class="number">3</span>        <span class="comment">//截取数组，正数从前截取，负数从后截取</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).exec()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="对象的基础查询"><a href="#对象的基础查询" class="headerlink" title="对象的基础查询"></a>对象的基础查询</h3><ul><li>find(conditions , [projection] , [options] , [callback])</li><li>findById</li><li>findByIdAndRemove / findByIdAndUpdate</li><li>findOne</li><li>findOneAndRemove / findOneAndUpdate</li></ul><p><em><strong>举个栗子</strong></em>   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://localhost/test&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Topic = mongoose.model(<span class="string">&quot;Topic&quot;</span>, &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        maxlength: <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">    arr.push(&#123;</span><br><span class="line">        name: <span class="string">&quot;Jimmy&quot;</span> + i</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">Topic.remove(&#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Topic.create(arr).then(<span class="function"><span class="keyword">function</span>(<span class="params">objs</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> id = objs[<span class="number">0</span>].id</span><br><span class="line">        <span class="comment">// Topic.findById(id, function(err, t) &#123;</span></span><br><span class="line">        <span class="comment">//     console.log(t);</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Topic.findByIdAndRemove(id, function(err, t) &#123;</span></span><br><span class="line">        <span class="comment">//     console.log(t);</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Topic.findByIdAndUpdate(id, &#123;</span></span><br><span class="line">        <span class="comment">//     name: &quot;hahahaha111111111&quot;</span></span><br><span class="line">        <span class="comment">// &#125;, &#123;</span></span><br><span class="line">        <span class="comment">//     runValidators: true</span></span><br><span class="line">        <span class="comment">// &#125;, function(err, t) &#123;</span></span><br><span class="line">        <span class="comment">//     console.log(err, t);</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line">        <span class="comment">// 上面这个和这个一样的效果</span></span><br><span class="line">        <span class="comment">// Topic.findByIdAndUpdate(id, &#123;</span></span><br><span class="line">        <span class="comment">//     name: &quot;hahahaha111111111&quot;</span></span><br><span class="line">        <span class="comment">// &#125;, &#123;</span></span><br><span class="line">        <span class="comment">//     runValidators: true</span></span><br><span class="line">        <span class="comment">// &#125;).then(function(t) &#123;</span></span><br><span class="line">        <span class="comment">//     console.log(t);</span></span><br><span class="line">        <span class="comment">// &#125;).catch(err =&gt; console.log(err))</span></span><br><span class="line">        <span class="comment">// 效果还是一样的，错误交由外部处理</span></span><br><span class="line">        <span class="comment">// return Topic.findByIdAndUpdate(id, &#123;</span></span><br><span class="line">        <span class="comment">//     name: &quot;hahahaha111111111&quot;</span></span><br><span class="line">        <span class="comment">// &#125;, &#123;</span></span><br><span class="line">        <span class="comment">//     runValidators: true</span></span><br><span class="line">        <span class="comment">// &#125;).then(function(t) &#123;</span></span><br><span class="line">        <span class="comment">//     console.log(t);</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Topic.findOne(&#123;name:/^Jimmy1\d$/&#125;,function(err,t)&#123;  //返回满足条件的第一个</span></span><br><span class="line">        <span class="comment">//     console.log(t);</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Topic.find(&#123;&#125;,function(err,ts)&#123;</span></span><br><span class="line">        <span class="comment">//     console.log(ts);</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line">        <span class="comment">// Topic.find(&#123;name:/^Jimmy1\d$/&#125;,function(err,ts)&#123;</span></span><br><span class="line">        <span class="comment">//     console.log(ts);</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line">        <span class="comment">// Topic.find(&#123;name:/^Jimmy1\d$/&#125;,&quot;_id name&quot;,function(err,ts)&#123;  //第二个参数决定返回结果带有的属性，用空格分割，如果在属性前加-，则表示不返回这个属性</span></span><br><span class="line">        <span class="comment">//     console.log(ts);</span></span><br><span class="line">        <span class="comment">// &#125;)</span></span><br><span class="line">        Topic.find(&#123;<span class="attr">name</span>:<span class="regexp">/^Jimmy1\d$/</span>&#125;,<span class="literal">null</span>,&#123;<span class="attr">skip</span>:<span class="number">5</span>,<span class="attr">limit</span>:<span class="number">3</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,ts</span>)</span>&#123; <span class="comment">//第三个参数是对结果的筛选，skip指跳过几个，limit指最多返回几个，结合这两个可以实现翻页功能</span></span><br><span class="line">            <span class="built_in">console</span>.log(ts);</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="比较式查询"><a href="#比较式查询" class="headerlink" title="比较式查询"></a>比较式查询</h3><ul><li>大小判断<ul><li>$eq 等于</li><li>$gt 大于</li><li>$gte 大于等于</li><li>$lt 小于</li><li>$lte 小于等于</li></ul></li><li>$ne 不是</li><li>$in 包含</li><li>$nin 不包含</li></ul><p><em><strong>举个栗子</strong></em>   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://localhost/test&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Topic = mongoose.model(<span class="string">&quot;Topic&quot;</span>, &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        maxlength: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    num: <span class="built_in">Number</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">    arr.push(&#123;</span><br><span class="line">        name: <span class="string">&quot;Jimmy&quot;</span> + i,</span><br><span class="line">        num: i</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">Topic.remove(&#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Topic.create(arr).then(<span class="function"><span class="keyword">function</span>(<span class="params">objs</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        Topic.find(&#123;</span><br><span class="line">            num: &#123;</span><br><span class="line">                <span class="comment">// $lt: 20,    //小于20</span></span><br><span class="line">                <span class="comment">// $lte:20,    //小于等于20</span></span><br><span class="line">                <span class="comment">// $gt:10,      //大于10</span></span><br><span class="line">                <span class="comment">// $gte:10,     //大于等于10</span></span><br><span class="line">                <span class="comment">// $in: [11, 15], //值等于11或15</span></span><br><span class="line">                <span class="comment">// $nin: [11, 15], //值不等于11或15</span></span><br><span class="line">                <span class="comment">// $ne: 2, //不等于2的，只能一个值</span></span><br><span class="line">                $eq: <span class="number">2</span>, <span class="comment">//等于2的</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, ts</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(ts);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="逻辑式查询"><a href="#逻辑式查询" class="headerlink" title="逻辑式查询"></a>逻辑式查询</h3><ul><li>$or 或</li><li>$nor ($or相反)</li><li>$and 和</li><li>$not 否</li></ul><p><em><strong>举个栗子</strong></em>   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://localhost/test&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Topic = mongoose.model(<span class="string">&quot;Topic&quot;</span>, &#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        maxlength: <span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    num: <span class="built_in">Number</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> arr = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">    arr.push(&#123;</span><br><span class="line">        name: <span class="string">&quot;Jimmy&quot;</span> + i,</span><br><span class="line">        num: i</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line">Topic.remove(&#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Topic.create(arr).then(<span class="function"><span class="keyword">function</span>(<span class="params">objs</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        Topic.find(&#123;</span><br><span class="line">            <span class="comment">// $or: [&#123;     //满足一个条件就会返回</span></span><br><span class="line">            <span class="comment">//     name: &quot;Jimmy1&quot;</span></span><br><span class="line">            <span class="comment">// &#125;, &#123;</span></span><br><span class="line">            <span class="comment">//     num: 4</span></span><br><span class="line">            <span class="comment">// &#125;,&#123;</span></span><br><span class="line">            <span class="comment">//     num: 6</span></span><br><span class="line">            <span class="comment">// &#125;]</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// $nor: [&#123;        //不满足所有条件就返回</span></span><br><span class="line">            <span class="comment">//     name: &quot;Jimmy1&quot;</span></span><br><span class="line">            <span class="comment">// &#125;, &#123;</span></span><br><span class="line">            <span class="comment">//     num: 4</span></span><br><span class="line">            <span class="comment">// &#125;, &#123;</span></span><br><span class="line">            <span class="comment">//     num: 6</span></span><br><span class="line">            <span class="comment">// &#125;]</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">// $and: [&#123;        //满足所有条件才返回</span></span><br><span class="line">            <span class="comment">//     name: /^Jimmy1\d$/</span></span><br><span class="line">            <span class="comment">// &#125;, &#123;</span></span><br><span class="line">            <span class="comment">//     num: &#123;</span></span><br><span class="line">            <span class="comment">//         $lte:15</span></span><br><span class="line">            <span class="comment">//     &#125;</span></span><br><span class="line">            <span class="comment">// &#125;]</span></span><br><span class="line">            <span class="comment">// $and: [&#123;        //可以混合使用</span></span><br><span class="line">            <span class="comment">//     $or: [&#123;</span></span><br><span class="line">            <span class="comment">//         name: &quot;Jimmy1&quot;</span></span><br><span class="line">            <span class="comment">//     &#125;, &#123;</span></span><br><span class="line">            <span class="comment">//         num: 4</span></span><br><span class="line">            <span class="comment">//     &#125;, &#123;</span></span><br><span class="line">            <span class="comment">//         num: 6</span></span><br><span class="line">            <span class="comment">//     &#125;]</span></span><br><span class="line">            <span class="comment">// &#125;, &#123;</span></span><br><span class="line">            <span class="comment">//     num: 4</span></span><br><span class="line">            <span class="comment">// &#125;]</span></span><br><span class="line"></span><br><span class="line">            num: &#123;</span><br><span class="line">                $not: &#123; <span class="comment">//不满足条件的返回</span></span><br><span class="line">                    $gte: <span class="number">10</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, ts</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(ts);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="数组专用查询"><a href="#数组专用查询" class="headerlink" title="数组专用查询"></a>数组专用查询</h3><ul><li>$all 是否包含查询条件</li><li>$elemMatch 数组元素查询条件</li><li>$size 数组大小查询条件</li><li>$where 其他</li></ul><p><em><strong>举个栗子</strong></em>   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://localhost/test&quot;</span>)</span><br><span class="line"><span class="comment">//$all&amp;$elemMatch</span></span><br><span class="line"><span class="comment">// const Topic = mongoose.model(&quot;Topic&quot;, &#123;</span></span><br><span class="line"><span class="comment">//     arr: []</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//$all</span></span><br><span class="line"><span class="comment">// Topic.remove(&#123;&#125;, function() &#123;</span></span><br><span class="line"><span class="comment">//     Topic.create([&#123;</span></span><br><span class="line"><span class="comment">//             arr: [11, 22, 33]</span></span><br><span class="line"><span class="comment">//         &#125;,</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             arr: [33, 44, 55]</span></span><br><span class="line"><span class="comment">//         &#125;,</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             arr: [55, 66, 77, 88]</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     ]).then(function() &#123;</span></span><br><span class="line"><span class="comment">//         Topic.find(&#123;</span></span><br><span class="line"><span class="comment">//             arr: &#123;</span></span><br><span class="line"><span class="comment">//                 $all: [33, 44] //都存在的返回</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         &#125;).then((result) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//             console.log(result);</span></span><br><span class="line"><span class="comment">//         &#125;)</span></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//$elemMatch</span></span><br><span class="line"><span class="comment">// function generatorArr(size) &#123;</span></span><br><span class="line"><span class="comment">//     let arr = []</span></span><br><span class="line"><span class="comment">//     for (let i = 0; i &lt; size; i++) &#123;</span></span><br><span class="line"><span class="comment">//         arr.push(&#123;</span></span><br><span class="line"><span class="comment">//             name: &quot;Jimmy&quot; + i,</span></span><br><span class="line"><span class="comment">//             num: i</span></span><br><span class="line"><span class="comment">//         &#125;)</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">//     return arr</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Topic.remove(&#123;&#125;, function() &#123;</span></span><br><span class="line"><span class="comment">//     Topic.create([&#123;</span></span><br><span class="line"><span class="comment">//             arr: generatorArr(5)</span></span><br><span class="line"><span class="comment">//         &#125;,</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             arr: generatorArr(10)</span></span><br><span class="line"><span class="comment">//         &#125;,</span></span><br><span class="line"><span class="comment">//         &#123;</span></span><br><span class="line"><span class="comment">//             arr: generatorArr(15)</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     ]).then(function() &#123;</span></span><br><span class="line"><span class="comment">//         Topic.find(&#123;</span></span><br><span class="line"><span class="comment">//             arr: &#123;</span></span><br><span class="line"><span class="comment">//                 // $elemMatch: &#123;       //匹配数组内部元素的数据</span></span><br><span class="line"><span class="comment">//                 //     name: &quot;Jimmy9&quot;</span></span><br><span class="line"><span class="comment">//                 // &#125;</span></span><br><span class="line"><span class="comment">//                 $size: 5        //匹配数组length</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         &#125;).then((result) =&gt; &#123;</span></span><br><span class="line"><span class="comment">//             console.log(result);</span></span><br><span class="line"><span class="comment">//         &#125;)</span></span><br><span class="line"><span class="comment">//     &#125;)</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//$where</span></span><br><span class="line"><span class="keyword">const</span> Topic = mongoose.model(<span class="string">&quot;Topic&quot;</span>, &#123;</span><br><span class="line">    obj: &#123;&#125;</span><br><span class="line">&#125;)</span><br><span class="line">Topic.remove(&#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Topic.create([&#123;</span><br><span class="line">        obj: &#123;</span><br><span class="line">            name: <span class="string">&quot;java&quot;</span>,</span><br><span class="line">            num: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        obj: &#123;</span><br><span class="line">            name: <span class="string">&quot;javascript&quot;</span>,</span><br><span class="line">            num: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        obj: &#123;</span><br><span class="line">            name: <span class="string">&quot;nodejs&quot;</span>,</span><br><span class="line">            num: <span class="number">3</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;]).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        Topic.find(&#123;</span><br><span class="line">            <span class="comment">// $where: &quot;this.obj.name === &#x27;java&#x27;&quot;      //直接写js</span></span><br><span class="line">            $where: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="regexp">/^java\w*$/</span>.test(<span class="built_in">this</span>.obj.name) &amp;&amp; <span class="built_in">this</span>.obj.num === <span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="literal">null</span>, &#123; <span class="comment">//同样可以混合使用</span></span><br><span class="line">            limit: <span class="number">2</span>,</span><br><span class="line">            skip: <span class="number">0</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(result);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Query查询风格"><a href="#Query查询风格" class="headerlink" title="Query查询风格"></a>Query查询风格</h3><p>另一种风格的写法，作为了解，下面例子将会改写上面的例子<br><em><strong>举个栗子</strong></em>   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Topic.create([&#123;</span><br><span class="line">        arr: [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        arr: [<span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        arr: [<span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">88</span>]</span><br><span class="line">    &#125;</span><br><span class="line">]).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> query = Topic.find()</span><br><span class="line">    query.where(<span class="string">&quot;arr&quot;</span>)</span><br><span class="line">        .all([<span class="number">33</span>,<span class="number">44</span>])</span><br><span class="line">        .limit(<span class="number">3</span>)</span><br><span class="line">        .skip(<span class="number">10</span>)</span><br><span class="line">        .select(<span class="string">&quot;name age&quot;</span>)</span><br><span class="line">        .exec(<span class="function"><span class="keyword">function</span> (<span class="params">err,result</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(result)</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//elemMatch的query写法</span></span><br><span class="line">Topic.create([&#123;</span><br><span class="line">        arr: generatorArr(<span class="number">5</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        arr: generatorArr(<span class="number">10</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        arr: generatorArr(<span class="number">15</span>)</span><br><span class="line">    &#125;</span><br><span class="line">]).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    Topic.find()</span><br><span class="line">    .where(<span class="string">&quot;arr&quot;</span>)</span><br><span class="line">    .elemMatch(&#123;<span class="attr">name</span>:<span class="string">&quot;Jimmy9&quot;</span>&#125;)</span><br><span class="line">    .exec(<span class="function"><span class="keyword">function</span> (<span class="params">err,result</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//另一种写法</span></span><br><span class="line">    Topic.find()</span><br><span class="line">    .where(<span class="string">&quot;arr&quot;</span>)</span><br><span class="line">    .elemMatch(<span class="function"><span class="keyword">function</span> (<span class="params">elem</span>)</span>&#123;</span><br><span class="line">        elem.where(<span class="string">&quot;name&quot;</span>).eq(<span class="string">&quot;Jimmy9&quot;</span>).where(<span class="string">&quot;num&quot;</span>).gte() ....</span><br><span class="line">    &#125;)</span><br><span class="line">    .exec(<span class="function"><span class="keyword">function</span> (<span class="params">err,result</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(result)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>具体可以查看文档<a href="http://mongoosejs.com/docs/queries.html">http://mongoosejs.com/docs/queries.html</a></p><h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>会触发中间件的：</p><ul><li>validate</li><li>doc.save</li><li>Class.create / Class.insertMany</li><li>doc.update</li><li>doc.remove</li><li>find</li><li>findOne</li><li>findAndRemove / findOneAndUpdate</li></ul><p><em><strong>举个栗子</strong></em>   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>)</span><br><span class="line"></span><br><span class="line">mongoose.connect(<span class="string">&quot;mongodb://localhost/test&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">    name: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        maxlength: <span class="number">5</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">userSchema.pre(<span class="string">&quot;validate&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;pre validate&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.errors);</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">userSchema.post(<span class="string">&quot;validate&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// console.log(this.errors?this.errors.name.message:this.errors);</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;post validate&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// userSchema.pre(&quot;save&quot;, function(next) &#123;</span></span><br><span class="line"><span class="comment">//     console.log(&quot;pre save one&quot;);</span></span><br><span class="line"><span class="comment">//     next()</span></span><br><span class="line"><span class="comment">// &#125;)</span></span><br><span class="line">userSchema.pre(<span class="string">&quot;save&quot;</span>,<span class="literal">true</span>, <span class="function"><span class="keyword">function</span>(<span class="params">next,done</span>) </span>&#123;    <span class="comment">//默认不加true，加true表示并行,在执行完所有的pre之后在执行后面的，没什么卵用的功能，完全能用next来控制</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;pre save one&quot;</span>);</span><br><span class="line">    next()</span><br><span class="line">    <span class="built_in">setTimeout</span>(done,<span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">userSchema.pre(<span class="string">&quot;save&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;pre save two&quot;</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(next,<span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">userSchema.post(<span class="string">&quot;save&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;post save&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">userSchema.pre(<span class="string">&quot;update&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;pre update&quot;</span>);</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">userSchema.post(<span class="string">&quot;update&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;post update&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">userSchema.pre(<span class="string">&quot;remove&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;pre remove&quot;</span>);</span><br><span class="line">    next()</span><br><span class="line">&#125;)</span><br><span class="line">userSchema.post(<span class="string">&quot;remove&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;post remove&quot;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">&quot;User&quot;</span>, userSchema)</span><br><span class="line"></span><br><span class="line">User.remove(&#123;&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> user = <span class="keyword">new</span> User(&#123;</span><br><span class="line">        name: <span class="string">&quot;Jia&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    user.save(<span class="function"><span class="keyword">function</span>(<span class="params">err, u</span>) </span>&#123;</span><br><span class="line">        u.update(&#123;</span><br><span class="line">            name: <span class="string">&quot;Jimmy&quot;</span></span><br><span class="line">        &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            u.remove()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><em><strong>END</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
            <tag> mongoose </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IOS设置document.title无效的解决办法</title>
      <link href="2017/02/04/IOS%E8%AE%BE%E7%BD%AEdocument-title%E6%97%A0%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
      <url>2017/02/04/IOS%E8%AE%BE%E7%BD%AEdocument-title%E6%97%A0%E6%95%88%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="问题原因："><a href="#问题原因：" class="headerlink" title="问题原因："></a>问题原因：</h2><p>因为浏览器首次加载页面初始化title后，就再也不监听 document.title的change事件。</p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>修改title之后，给页面加上一个内容为空的iframe，随后立即删除这个iframe，这时候会刷新title。但是如果简单的这样设置，一般是会有闪动的，所以可以设置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setTitle: <span class="function"><span class="keyword">function</span>(<span class="params">title</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> $body = $(<span class="string">&#x27;body&#x27;</span>)</span><br><span class="line">    <span class="built_in">document</span>.title = title</span><br><span class="line">    <span class="keyword">let</span> $iframe = $(<span class="string">&#x27;&lt;iframe src=&quot;/favicon.ico&quot;&gt;&lt;/iframe&gt;&#x27;</span>)</span><br><span class="line">    $iframe.on(<span class="string">&#x27;load&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        $iframe.off(<span class="string">&#x27;load&#x27;</span>).remove()</span><br><span class="line">      &#125;, <span class="number">0</span>)</span><br><span class="line">    &#125;).appendTo($body)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>参考地址：<a href="http://www.cnblogs.com/lihanying/p/6227192.html">http://www.cnblogs.com/lihanying/p/6227192.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> title </tag>
            
            <tag> ios </tag>
            
            <tag> 手机端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>iTerm2配色修改</title>
      <link href="2017/02/04/iTerm2%E9%85%8D%E8%89%B2%E4%BF%AE%E6%94%B9/"/>
      <url>2017/02/04/iTerm2%E9%85%8D%E8%89%B2%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<ol><li>首先<code>sudo vim ~/.bash_profile</code>，输入密码后按e进入编辑，看别人的帖子是不需要sudo的。。。但是我需要</li><li>然后i进入编辑模式，加入下面这段，然后<code>esc</code>输入<code>:wq</code>保存   <span id="more"></span><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#enables colorin the terminal bash <span class="keyword">shell</span> export</span><br><span class="line">export CLICOLOR=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">#sets <span class="keyword">up</span> thecolor scheme <span class="keyword">for</span> <span class="keyword">list</span> export</span><br><span class="line">export LSCOLORS=gxfxcxdxbxegedabagacad</span><br><span class="line"></span><br><span class="line">#sets <span class="keyword">up</span> theprompt color (currently <span class="keyword">a</span> green similar <span class="keyword">to</span> linux terminal)</span><br><span class="line">export PS1=<span class="string">&#x27;\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;36m\]\w\[\033[00m\]\$ &#x27;</span></span><br><span class="line"></span><br><span class="line">#enables colorfor iTerm</span><br><span class="line">export TERM=xterm-color</span><br></pre></td></tr></table></figure></li><li>然后修改<code>preference-&gt;profiles-&gt;Terminal-&gt;xterm-new</code><br><img src="http://okmneu7zl.bkt.clouddn.com/WX20170204-095600.png">   </li><li>去挑选喜欢的配色方案，我在这里找的<a href="http://iterm2colorschemes.com/">http://iterm2colorschemes.com/</a></li><li>下载到你喜欢的配色后，导入<br><img src="http://okmneu7zl.bkt.clouddn.com/WX20170204-095639.png"><br>导入后选择你的配色，然后注销mac，再打开就发现配色变了，之后再换配色只要直接改就行了</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
            <tag> iTerm2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Retina视网膜屏幕适配</title>
      <link href="2017/01/19/Retina%E8%A7%86%E7%BD%91%E8%86%9C%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D/"/>
      <url>2017/01/19/Retina%E8%A7%86%E7%BD%91%E8%86%9C%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<p>直接上代码：</p><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#bbb</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.hairlines</span> <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">border-width</span>: .<span class="number">5px</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">window</span>.devicePixelRatio &amp;&amp; devicePixelRatio &gt;= <span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> testElem = <span class="built_in">document</span>.createElement(<span class="string">&#x27;div&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        testElem.style.border = <span class="string">&#x27;.5px solid transparent&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.body.appendChild(testElem);</span></span><br><span class="line">        if (testElem.offsetHeight == 1)&#123;</span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.querySelector(<span class="string">&#x27;html&#x27;</span>).classList.add(<span class="string">&#x27;hairlines&#x27;</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.body.removeChild(testElem);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>window.devicePixelRatio是设备上物理像素和设备独立像素(device-independent pixels (dips))的比例。<br>公式表示就是：window.devicePixelRatio = 物理像素 / dips  </p></blockquote><blockquote><p>offsetHeight = clientHeight + 滚动条 + 边框   </p></blockquote><p>如果是retina屏，会先创建个div来测试浏览器是否能探测到0.5px，如果可以会才会使用0.5px的样式   </p><p>原文地址：<a href="http://dieulot.net/css-retina-hairline">http://dieulot.net/css-retina-hairline</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 手机端 </tag>
            
            <tag> 适配 </tag>
            
            <tag> Retina </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6-遍历对象属性</title>
      <link href="2017/01/19/ES6-%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7/"/>
      <url>2017/01/19/ES6-%E9%81%8D%E5%8E%86%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&#x27;leo&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.age = <span class="number">22</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">getAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="built_in">Symbol</span>(<span class="string">&#x27;fullname&#x27;</span>)]()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B.prototype.getClass = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> B;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.keys 能够得到自身的可枚举的属性,但得不到原型链上的属性.</span></span><br><span class="line"><span class="comment">// 得不到 Symbols 属性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(B.prototype));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.getOwnPropertyNames(b) 能够得到自身属性,</span></span><br><span class="line"><span class="comment">// 包括不可枚举的属性,但得不到原型链上的属性.</span></span><br><span class="line"><span class="comment">// 得不到 Symbols 属性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(B.prototype));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以得到自身的 Symbols 属性,包括不可枚举的属性.</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(B.prototype));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以得到自身和继承的原型链上的属性,但必须是可枚举属性.</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> b)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断是否可枚举，enumerable为true可枚举</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(B.prototype,<span class="string">&#x27;getAge&#x27;</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6-Object.assign</title>
      <link href="2017/01/19/ES6-Object-assign/"/>
      <url>2017/01/19/ES6-Object-assign/</url>
      
        <content type="html"><![CDATA[<p>Object.assign将可以枚举的属性赋值给对象</p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> skey = <span class="built_in">Symbol</span>(<span class="string">&#x27;testname&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="built_in">Object</span>.assign(obj, &#123;<span class="attr">name</span>: <span class="string">&#x27;leo&#x27;</span>&#125;, &#123;<span class="attr">age</span>: <span class="number">30</span>&#125;,&#123;[skey]:<span class="string">&#x27;ok good&#x27;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj === obj2, obj);</span><br><span class="line"><span class="built_in">console</span>.log(obj[skey]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DEFAULT_OPTIONS = &#123;</span><br><span class="line">    name: <span class="string">&#x27;leo&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> options = <span class="built_in">Object</span>.assign(&#123;&#125;, DEFAULT_OPTIONS, opts);</span><br><span class="line">    <span class="built_in">console</span>.log(options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line">test(&#123;<span class="attr">name</span>:<span class="string">&#x27;zengliang&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6-Object.is</title>
      <link href="2017/01/19/ES6-Object-is/"/>
      <url>2017/01/19/ES6-Object-is/</url>
      
        <content type="html"><![CDATA[<p>Object.is相当于全等又有些区别</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(&#123;&#125;,&#123;&#125;) , &#123;&#125; === &#123;&#125; ); <span class="comment">//fasle false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>,<span class="literal">NaN</span>) , <span class="literal">NaN</span> === <span class="literal">NaN</span>);  <span class="comment">//true false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(+<span class="number">0</span>,-<span class="number">0</span>) , +<span class="number">0</span> === -<span class="number">0</span>);  <span class="comment">//false true</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6-对象属性的新写法</title>
      <link href="2017/01/19/ES6-%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%9A%84%E6%96%B0%E5%86%99%E6%B3%95/"/>
      <url>2017/01/19/ES6-%E5%AF%B9%E8%B1%A1%E5%B1%9E%E6%80%A7%E7%9A%84%E6%96%B0%E5%86%99%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = <span class="string">&#x27;leo&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">getName</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.age = <span class="number">22</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">getAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="built_in">Symbol</span>(<span class="string">&#x27;fullname&#x27;</span>)]()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B.prototype.getClass = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> B;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.keys 能够得到自身的可枚举的属性,但得不到原型链上的属性.</span></span><br><span class="line"><span class="comment">// 得不到 Symbols 属性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(B.prototype));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.getOwnPropertyNames(b) 能够得到自身属性,</span></span><br><span class="line"><span class="comment">// 包括不可枚举的属性,但得不到原型链上的属性.</span></span><br><span class="line"><span class="comment">// 得不到 Symbols 属性</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyNames(B.prototype));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以得到自身的 Symbols 属性,包括不可枚举的属性.</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(B.prototype));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以得到自身和继承的原型链上的属性,但必须是可枚举属性.</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> b)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 判断是否可枚举，enumerable为true可枚举</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(B.prototype,<span class="string">&#x27;getAge&#x27;</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS-forEach和map</title>
      <link href="2017/01/18/JS-forEach%E5%92%8Cmap/"/>
      <url>2017/01/18/JS-forEach%E5%92%8Cmap/</url>
      
        <content type="html"><![CDATA[<p>第1个是遍历的数组内容；<br>第2个是对应的数组索引;<br>第3个是数组本身   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>举个栗子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>)</span>&#123;<span class="keyword">return</span> v &gt; <span class="number">3</span>;&#125;);</span><br><span class="line"><span class="comment">//[false, false, false, true, true]</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>)</span>&#123;<span class="keyword">return</span> v &gt; <span class="number">3</span>;&#125;);</span><br><span class="line"><span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p><strong>map()方法</strong>：<br>若这个回调函数有返回值，map()方法会产生一个新数组，这个新数组由原数组元素对应的回调函数的返回值构成。<br>若没有返回值，则新数组的所有元素为undefined。<br><strong>forEach方法</strong>：<br>仅仅为每个数组元素执行回调函数。   </p><p>再举一个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].map(<span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> v+<span class="number">1</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(result);    <span class="comment">//[2, 3, 4, 5, 6]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">v, i</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v,i)    <span class="comment">//1 0</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JS </tag>
            
            <tag> 基础 </tag>
            
            <tag> forEach </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS-sort</title>
      <link href="2017/01/18/JS-sort/"/>
      <url>2017/01/18/JS-sort/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr=<span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>);</span><br><span class="line">arr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> b-a</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(arrSimple2.join());</span><br></pre></td></tr></table></figure><p><strong>解释</strong>：a,b表示数组中的任意两个元素，若return &gt; 0 b前a后；reutrn &lt; 0 a前b后；a=b时存在浏览器兼容<br><strong>简化一下</strong>：a-b输出从小到大排序，b-a输出从大到小排序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objectList = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Persion</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">objectList.push(<span class="keyword">new</span> Persion(<span class="string">&#x27;jack&#x27;</span>, <span class="number">20</span>));</span><br><span class="line">objectList.push(<span class="keyword">new</span> Persion(<span class="string">&#x27;tony&#x27;</span>, <span class="number">25</span>));</span><br><span class="line">objectList.push(<span class="keyword">new</span> Persion(<span class="string">&#x27;stone&#x27;</span>, <span class="number">26</span>));</span><br><span class="line">objectList.push(<span class="keyword">new</span> Persion(<span class="string">&#x27;mandy&#x27;</span>, <span class="number">23</span>));</span><br><span class="line"><span class="comment">//按年龄从小到大排序</span></span><br><span class="line">objectList.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.age - b.age</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; objectList.length; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;age:&#x27;</span> + objectList[i].age + <span class="string">&#x27; name:&#x27;</span> + objectList[i].name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以对对象的属性进行排序</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JS </tag>
            
            <tag> 基础 </tag>
            
            <tag> sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS-match和exec</title>
      <link href="2017/01/18/JS-match%E5%92%8Cexec/"/>
      <url>2017/01/18/JS-match%E5%92%8Cexec/</url>
      
        <content type="html"><![CDATA[<p>举个栗子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> order = <span class="string">&#x27;is2&#x27;</span></span><br><span class="line"><span class="keyword">var</span> arr = order.match(<span class="regexp">/\d+/</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="comment">//[&quot;2&quot;, index: 2, input: &quot;is2&quot;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="regexp">/\d+/</span>.exec(order);</span><br><span class="line"><span class="built_in">console</span>.log(arr2)</span><br><span class="line"><span class="comment">//[&quot;2&quot;, index: 2, input: &quot;is2&quot;]</span></span><br></pre></td></tr></table></figure><p>值得注意的是match和exec返回的结果都是数组</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JS </tag>
            
            <tag> 基础 </tag>
            
            <tag> match </tag>
            
            <tag> exec </tag>
            
            <tag> 正则 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS-includes和indexOf</title>
      <link href="2017/01/18/JS-includes%E5%92%8CindexOf/"/>
      <url>2017/01/18/JS-includes%E5%92%8CindexOf/</url>
      
        <content type="html"><![CDATA[<p>举个栗子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;hahaha123&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">&#x27;1&#x27;</span>));     <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">&#x27;1&#x27;</span>));      <span class="comment">//6</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="number">1</span>));       <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.indexOf(<span class="number">1</span>));        <span class="comment">//0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JS </tag>
            
            <tag> 基础 </tag>
            
            <tag> includes </tag>
            
            <tag> indexOf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS-join拼接</title>
      <link href="2017/01/18/JS-join%E6%8B%BC%E6%8E%A5/"/>
      <url>2017/01/18/JS-join%E6%8B%BC%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>)</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">&quot;George&quot;</span></span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">&quot;John&quot;</span></span><br><span class="line">arr[<span class="number">2</span>] = <span class="string">&quot;Thomas&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.join(<span class="string">&#x27; &#x27;</span>))  <span class="comment">//George John Thomas</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JS </tag>
            
            <tag> 基础 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 拼接 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS-arguments</title>
      <link href="2017/01/18/JS-arguments/"/>
      <url>2017/01/18/JS-arguments/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a,b</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>);         <span class="comment">//[&quot;123&quot;]</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length);  <span class="comment">//1</span></span><br><span class="line">    <span class="built_in">console</span>.log(test.length);       <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line">test(<span class="string">&#x27;123&#x27;</span>)</span><br></pre></td></tr></table></figure><p>通过arguments可以获取传入的参数，function.length可以获取本该传入的参数</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JS </tag>
            
            <tag> 基础 </tag>
            
            <tag> 参数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS-数组比较</title>
      <link href="2017/01/18/JS-%E6%95%B0%E7%BB%84%E6%AF%94%E8%BE%83/"/>
      <url>2017/01/18/JS-%E6%95%B0%E7%BB%84%E6%AF%94%E8%BE%83/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> y = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(x == y);     <span class="comment">//false</span></span><br><span class="line"><span class="built_in">console</span>.log(x === y );   <span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>javascript不能直接用==或者===来判断两个数组是否相等，无论是相等还是全等都不行。<br>要判断数组是否相等，要先将数组转换为字符串，再作比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> y = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(x.toString() == y.toString())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JS </tag>
            
            <tag> 基础 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 比较 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS-String转数字类型</title>
      <link href="2017/01/18/JS-String%E8%BD%AC%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B/"/>
      <url>2017/01/18/JS-String%E8%BD%AC%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="需要将string转成数字时，如果需要保留小数，只要用-就行了"><a href="#需要将string转成数字时，如果需要保留小数，只要用-就行了" class="headerlink" title="需要将string转成数字时，如果需要保留小数，只要用+就行了"></a>需要将string转成数字时，如果需要保留小数，只要用+就行了</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(str))</span><br><span class="line"><span class="comment">//转整数时没问题</span></span><br><span class="line"><span class="keyword">var</span> str1 = <span class="string">&#x27;123.45&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(+str1)</span><br><span class="line"><span class="comment">//只要用+就行了</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> JS </tag>
            
            <tag> 基础 </tag>
            
            <tag> 转换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6-set</title>
      <link href="2017/01/18/ES6-set/"/>
      <url>2017/01/18/ES6-set/</url>
      
        <content type="html"><![CDATA[<h4 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h4><p>set是类数组</p><h4 id="可以用来做什么？"><a href="#可以用来做什么？" class="headerlink" title="可以用来做什么？"></a>可以用来做什么？</h4><p>可以用来给数组去重</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr =  [<span class="string">&#x27;jiayongfeng&#x27;</span>,<span class="string">&#x27;jimmy&#x27;</span>,<span class="string">&#x27;jimmy&#x27;</span>]</span><br><span class="line"><span class="keyword">let</span> newArr = <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(arr))</span><br><span class="line"><span class="built_in">console</span>.log(newArr)</span><br></pre></td></tr></table></figure><h4 id="怎么用？"><a href="#怎么用？" class="headerlink" title="怎么用？"></a>怎么用？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;<span class="attr">name</span>:<span class="string">&#x27;jiayongfeng&#x27;</span>,<span class="attr">age</span>:<span class="string">&#x27;28&#x27;</span>&#125;</span><br><span class="line"><span class="keyword">let</span> st = <span class="keyword">new</span> <span class="built_in">Set</span>()  </span><br><span class="line">st.add(user)        <span class="comment">//添加</span></span><br><span class="line">st.delete(user)     <span class="comment">//删除</span></span><br><span class="line">st.has(user)        <span class="comment">//判断有无</span></span><br><span class="line">st.clear()          <span class="comment">//清空</span></span><br><span class="line"><span class="built_in">console</span>.log(st.size)    <span class="comment">//查看数量</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> o <span class="keyword">of</span> st)&#123;       <span class="comment">//遍历</span></span><br><span class="line">    <span class="built_in">console</span>.log(o)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6-map</title>
      <link href="2017/01/18/ES6-map/"/>
      <url>2017/01/18/ES6-map/</url>
      
        <content type="html"><![CDATA[<h4 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h4><p>map是键值对的类数组</p><h4 id="可以用来做什么？"><a href="#可以用来做什么？" class="headerlink" title="可以用来做什么？"></a>可以用来做什么？</h4><p>对象中的key必须是<code>string</code>，map中key可以是任意值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = &#123;</span><br><span class="line">    name : <span class="string">&#x27;jiayongfeng&#x27;</span>,</span><br><span class="line">    age : <span class="number">28</span>,</span><br><span class="line">    <span class="string">&#x27;english name&#x27;</span>:<span class="string">&#x27;jimmy&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">    [user,<span class="string">&#x27;shuai&#x27;</span>],     <span class="comment">//key可以是对象</span></span><br><span class="line">    [<span class="string">&#x27;qq&#x27;</span>,<span class="string">&#x27;740534248&#x27;</span>]</span><br><span class="line">])</span><br></pre></td></tr></table></figure><h4 id="怎么用？"><a href="#怎么用？" class="headerlink" title="怎么用？"></a>怎么用？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">map.set(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;jiayongfeng&#x27;</span>)   <span class="comment">//赋值</span></span><br><span class="line">map.set(<span class="string">&#x27;age&#x27;</span>,<span class="number">28</span>)</span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&#x27;age&#x27;</span>))     <span class="comment">//取值</span></span><br><span class="line"><span class="built_in">console</span>.log(map.size)           <span class="comment">//查看大小</span></span><br><span class="line">map.delete(<span class="string">&#x27;age&#x27;</span>)               <span class="comment">//删除</span></span><br><span class="line">map.has(<span class="string">&#x27;name&#x27;</span>)                 <span class="comment">//判断有无</span></span><br><span class="line">map.clear()                     <span class="comment">//清空</span></span><br><span class="line"><span class="comment">//值得注意NaN在map和set是全等的</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>)    <span class="comment">//false</span></span><br><span class="line">map.set(<span class="literal">NaN</span>,<span class="string">&#x27;1111&#x27;</span>);</span><br><span class="line">map.set(<span class="literal">NaN</span>,<span class="string">&#x27;2222&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="literal">NaN</span>));    <span class="comment">//2222</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> o <span class="keyword">of</span> map)&#123;              <span class="comment">//遍历</span></span><br><span class="line">    <span class="built_in">console</span>.log(o)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> keys = map.keys()           <span class="comment">//获取所有的key</span></span><br><span class="line"><span class="keyword">let</span> values = map.values()       <span class="comment">//获取所有的value</span></span><br><span class="line"><span class="keyword">let</span> entries = map.entries()     <span class="comment">//获取所有的键值对</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> o <span class="keyword">of</span> entries)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(o)              <span class="comment">//等同于上面的遍历</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _this = &#123;</span><br><span class="line">    des : <span class="string">&#x27;shuai&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line">map.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">k, v</span>) </span>&#123;       <span class="comment">//遍历，同时可以传入this</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.des,k, v);</span><br><span class="line">&#125;,_this);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6-Array</title>
      <link href="2017/01/18/ES6-Array/"/>
      <url>2017/01/18/ES6-Array/</url>
      
        <content type="html"><![CDATA[<h4 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from"></a>Array.from</h4><p>类似数组的数据结构转换为数组<br>可以把带有length属性的对象和实现了iterator接口的对象转换为数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="built_in">Array</span>.from(&#123;</span><br><span class="line"><span class="string">&#x27;0&#x27;</span>:<span class="string">&#x27;qq 740534248&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;1&#x27;</span>:<span class="string">&#x27;jimmy&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;length&#x27;</span>:<span class="number">2</span></span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">item,index</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">return</span> item + <span class="string">&#x27;---&#x27;</span> + index</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//必须是这种样子的对象，其他的不行</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;me&#x27;</span>,<span class="string">&#x27;book&#x27;</span>,<span class="string">&#x27;leo&#x27;</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(set));</span><br></pre></td></tr></table></figure><p>querySelectorAll查询出的类数组也能转换</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> list = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;li&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(list)  <span class="comment">//NodeList[5]</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(list));  <span class="comment">//ArrayList[5]</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of"></a>Array.of</h4><p>用来构建数组，防止Array(7)这种情况发生</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.of(<span class="number">7</span>);       <span class="comment">// [7]</span></span><br><span class="line"><span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">7</span>);          <span class="comment">// [ , , , , , , ]</span></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);    <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><h4 id="find"><a href="#find" class="headerlink" title="find"></a>find</h4><p>找到符合函数的第一个值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [  <span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span> ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> value = arr.find(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,arr</span>)</span>&#123; <span class="comment">//值，索引，原数组</span></span><br><span class="line">   <span class="keyword">return</span> value &gt; <span class="number">33</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(value); <span class="comment">//44</span></span><br></pre></td></tr></table></figure><h4 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex"></a>findIndex</h4><p>找到符合函数的第一个值的索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [  <span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span> ];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> value = arr.findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">value,index,arr</span>)</span>&#123; <span class="comment">//值，索引，原数组</span></span><br><span class="line">   <span class="keyword">return</span> value &gt; <span class="number">33</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(value); <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>IndexOf比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">22</span>,<span class="literal">NaN</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr2.indexOf(<span class="literal">NaN</span>))  <span class="comment">//-1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr2.findIndex(<span class="function"><span class="keyword">function</span>(<span class="params">v</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="built_in">Object</span>.is(<span class="literal">NaN</span>,v);</span><br><span class="line">&#125;));    <span class="comment">//1</span></span><br></pre></td></tr></table></figure><h4 id="copyWithin"><a href="#copyWithin" class="headerlink" title="copyWithin"></a>copyWithin</h4><p>copyWithin(position,start,end);<br>要被替换的开始位置，用于替换的起始位置，用于替换的结束位置（不包含）<br>也可以用负数，代表从后往前数第几个，如-3代表正数第4个</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ar arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//arr.copyWithin(1,5,7);  //[ 1, 6, 7, 4, 5, 6, 7 ]</span></span><br><span class="line">arr.copyWithin(<span class="number">2</span>,-<span class="number">3</span>,<span class="number">6</span>); <span class="comment">//[ 1, 2, 5, 6, 5, 6, 7 ]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><h4 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h4><p>填充数组<br>fill(value,start,end)<br>用来填充的值，被填充的起始位置，被填充的结束位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>];</span><br><span class="line"><span class="comment">//arr.fill(10)</span></span><br><span class="line"><span class="built_in">console</span>.log(arr)    <span class="comment">//[10,10,10,10,10,10,10]</span></span><br><span class="line">arr.fill(<span class="number">10</span>,<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr)    <span class="comment">//[1,2,10,10,10,6,7]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript 源代码阅读工具</title>
      <link href="2017/01/17/JavaScript-%E6%BA%90%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E5%B7%A5%E5%85%B7/"/>
      <url>2017/01/17/JavaScript-%E6%BA%90%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h4 id="lambda-view"><a href="#lambda-view" class="headerlink" title="lambda-view"></a>lambda-view</h4><p><a href="https://github.com/Jianru-Lin/lambda-view">https://github.com/Jianru-Lin/lambda-view</a></p><p>命令行输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lv &#x2F;path&#x2F;somewhere&#x2F;xyz.js</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lv http:&#x2F;&#x2F;vuejs.org&#x2F;js&#x2F;vue.js</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 源代码查看 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Atom使用eslint需要安装的包</title>
      <link href="2017/01/17/Atom%E4%BD%BF%E7%94%A8eslint%E9%9C%80%E8%A6%81%E5%AE%89%E8%A3%85%E7%9A%84%E5%8C%85/"/>
      <url>2017/01/17/Atom%E4%BD%BF%E7%94%A8eslint%E9%9C%80%E8%A6%81%E5%AE%89%E8%A3%85%E7%9A%84%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;dependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;eslint&quot;</span>: <span class="string">&quot;^3.13.1&quot;</span>,</span><br><span class="line">    <span class="string">&quot;eslint-config-airbnb&quot;</span>: <span class="string">&quot;^14.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;eslint-plugin-import&quot;</span>: <span class="string">&quot;^2.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;eslint-plugin-jsx-a11y&quot;</span>: <span class="string">&quot;^3.0.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;eslint-plugin-react&quot;</span>: <span class="string">&quot;^6.9.0&quot;</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint --save</span><br><span class="line">eslint -v</span><br><span class="line">eslint --init</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint-config-airbnb --save</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint-plugin-import --save</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint-plugin-jsx-a11y --save</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install eslint-plugin-react --save</span><br></pre></td></tr></table></figure><p>.eslintrc.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="string">&quot;extends&quot;</span>: <span class="string">&quot;airbnb&quot;</span>,    <span class="comment">//使用airbnb前端编码规范</span></span><br><span class="line">    <span class="string">&quot;installedESLint&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">&quot;rules&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;indent&quot;</span>: [<span class="string">&quot;error&quot;</span>, <span class="number">4</span>]  <span class="comment">//缩进4个空格</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Atom </tag>
            
            <tag> eslint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>带数字字符串排序</title>
      <link href="2017/01/17/%E5%B8%A6%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F/"/>
      <url>2017/01/17/%E5%B8%A6%E6%95%B0%E5%AD%97%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="今天组里在Q群发了一个问题："><a href="#今天组里在Q群发了一个问题：" class="headerlink" title="今天组里在Q群发了一个问题："></a>今天组里在Q群发了一个问题：</h4><p>为一个给定字符串排序，这个字符串里的每一个单词都包含一个数字，请按数字大小给这些单词排序。</p><p>例如：is2 Thi1s T4est 3a 的结果是 Thi1s is2 3a T4est<br>然后出现了3种解题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;is2 Thi1s T4est 3a&#x27;</span></span><br><span class="line"><span class="keyword">var</span> newArr = a.split(<span class="string">&#x27; &#x27;</span>).map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line"> <span class="built_in">console</span>.log(item)</span><br><span class="line"> <span class="keyword">var</span> arr = item.match(<span class="regexp">/\d+/</span>)</span><br><span class="line"> <span class="keyword">return</span> arr</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> str = newArr.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> +a[<span class="number">0</span>] &gt; +b[<span class="number">0</span>]</span><br><span class="line">&#125;).map(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> item[<span class="string">&#x27;input&#x27;</span>]</span><br><span class="line">&#125;).join(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str)</span><br></pre></td></tr></table></figure><p>将原字符串用’ ‘分割成数组，然后遍历，返回由match后生成的数组组成的数组<br>将新的数组按照match数组第0个元素（匹配正则的数字）排序，然后遍历返回match数组input元素（原来的String），最后拼接成字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> words = <span class="string">&#x27;is2 Thi1s T4est 3a&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">orderNew</span>(<span class="params">words</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ordered = [];</span><br><span class="line">  <span class="keyword">var</span> arr = words.split(<span class="string">&#x27; &#x27;</span>);  </span><br><span class="line"></span><br><span class="line">    arr.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> match = <span class="regexp">/\d+/</span>.exec(item);</span><br><span class="line">        ordered[<span class="built_in">parseInt</span>(match[<span class="number">0</span>])] = item;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> ordered.join(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(orderNew(words));</span><br></pre></td></tr></table></figure><p>同样的将原字符串用’ ‘分割成数组，然后遍历<br>遍历时将原数组元素放入新数组第[macth数组第0个元素（匹配正则的数字）]个元素<br>最后将新数组拼接成字符串<br>因为是数字排序，所有将找到的数据当成索引用，但是可能存在问题，如果有重复数字时，会覆盖掉</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> words = <span class="string">&#x27;is2 Thi1s T4est 3a&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">order</span>(<span class="params">words</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> words.split(<span class="string">&#x27; &#x27;</span>).sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a.match(<span class="regexp">/\d+/</span>) - b.match(<span class="regexp">/\d+/</span>);</span><br><span class="line">   &#125;).join(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(order(words));</span><br></pre></td></tr></table></figure><p>更加简化，将原字符串分割后直接按照数组元素匹配正则后的结果排序后，拼接</p>]]></content>
      
      
      <categories>
          
          <category> 思维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Vue生命周期的一些理解记录</title>
      <link href="2017/01/17/%E5%85%B3%E4%BA%8EVue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3%E8%AE%B0%E5%BD%95/"/>
      <url>2017/01/17/%E5%85%B3%E4%BA%8EVue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>今天遇到个问题，大致是这样的：从父组件向子组件传值，第三层数据终端报错undefined，先上测试代码：</p><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line">&lt;template lang=<span class="string">&quot;html&quot;</span>&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;son :data=<span class="string">&quot;data1&quot;</span>&gt;&lt;/son&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Son <span class="keyword">from</span> <span class="string">&#x27;../son/index.vue&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            data1:&#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data1=&#123;</span><br><span class="line">            name:<span class="string">&#x27;最外层&#x27;</span>,</span><br><span class="line">            value1:&#123;</span><br><span class="line">                name:<span class="string">&#x27;第一层&#x27;</span>,</span><br><span class="line">                value2:&#123;</span><br><span class="line">                    name:<span class="string">&#x27;第二层&#x27;</span>,</span><br><span class="line">                    value3:&#123;</span><br><span class="line">                        name:<span class="string">&#x27;第三层&#x27;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">        Son</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line">&lt;template lang=<span class="string">&quot;html&quot;</span>&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">      最外层</span><br><span class="line">      &#123;&#123;data.name&#125;&#125;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">          第一层</span><br><span class="line">          &#123;&#123;data.value1.name&#125;&#125;</span><br><span class="line">          &lt;div&gt;</span><br><span class="line">              第二层</span><br><span class="line">              &#123;&#123;data.value1.value2.name&#125;&#125;</span><br><span class="line">              &lt;div&gt;</span><br><span class="line">                  第三层</span><br><span class="line">                  &#123;&#123;data.value1.value2.value3.name&#125;&#125;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    props:[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>解决办法是将<code>mounted</code>中的赋值过程，改在<code>beforeMount</code>或者<code>created</code>中进行。或者先给<code>data</code>一个空的数据结构。<br>原因是子组件渲染时，<code>data</code>的赋值还没进行，所以属性都是undefined</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>扩展运算符(…)结合的使用</title>
      <link href="2017/01/17/%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6-%E2%80%A6-%E7%BB%93%E5%90%88%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2017/01/17/%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6-%E2%80%A6-%E7%BB%93%E5%90%88%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>引入mapActions</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; mapActions, mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br></pre></td></tr></table></figure><p>在<code>methods</code>中写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...mapActions([</span><br><span class="line">  <span class="string">&#x27;SET_MAIL_LIST&#x27;</span></span><br><span class="line">]),</span><br></pre></td></tr></table></figure><p>数组中的所有方法会被引入，在使用时只要</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.SET_MAIL_LIST(&#123;mailList&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac拼音输入法</title>
      <link href="2017/01/17/Mac%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%B3%95/"/>
      <url>2017/01/17/Mac%E6%8B%BC%E9%9F%B3%E8%BE%93%E5%85%A5%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ol><li>中英文切换<br>mac自身输入法：<strong>Command＋空格</strong></li><li>汉字输入切换下一页（用鼠标去点，太low了吧）<br>假如你输入的文字不再第一页，这是需要我们切换页，上一页，是键盘上的“<strong>［</strong>”，下一页是键盘上的“<strong>］</strong>”。<br>mac自身的输入法，也可以使用上下箭头来操作，但是，总是要低头找这个箭头，不方便。</li><li>输入特殊符号<br>如果你记住了某个特殊字符的快捷键，那么，你只需使用 <strong>shift+option+键盘上的任何字符</strong>，来输入。如：<strong>shift+option+p</strong>是符号：∏<br>当然，所有特殊符号都记住，是不可能的事情 ，所以，你也可以调出mac的特殊符号集，快捷键是<strong>control+coomand+空格</strong>，快去试试看，找到你想要的</li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发工具 </tag>
            
            <tag> Mac </tag>
            
            <tag> 输入法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Atom已安装package记录</title>
      <link href="2017/01/17/Atom%E5%B7%B2%E5%AE%89%E8%A3%85package%E8%AE%B0%E5%BD%95/"/>
      <url>2017/01/17/Atom%E5%B7%B2%E5%AE%89%E8%A3%85package%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h3 id="platformio-ide-terminal"><a href="#platformio-ide-terminal" class="headerlink" title="platformio-ide-terminal"></a>platformio-ide-terminal</h3><blockquote><p>命令行工具<br>快捷键：control+`呼出</p></blockquote><h3 id="activate-power-mode"><a href="#activate-power-mode" class="headerlink" title="activate-power-mode"></a>activate-power-mode</h3><blockquote><p>炫酷的打字特效</p></blockquote><h3 id="atom-beautify"><a href="#atom-beautify" class="headerlink" title="atom-beautify"></a>atom-beautify</h3><blockquote><p>美化、整理代码</p></blockquote><h3 id="atom-ctags"><a href="#atom-ctags" class="headerlink" title="atom-ctags"></a>atom-ctags</h3><blockquote><p>强化版的自动完成，借助于autocomplete-plus</p></blockquote><h3 id="atom-ternjs"><a href="#atom-ternjs" class="headerlink" title="atom-ternjs"></a>atom-ternjs</h3><blockquote><p>JS代码智能提示</p></blockquote><h3 id="autocomplete-paths"><a href="#autocomplete-paths" class="headerlink" title="autocomplete-paths"></a>autocomplete-paths</h3><blockquote><p>文件路径智能提示</p></blockquote><h3 id="color-picker"><a href="#color-picker" class="headerlink" title="color-picker"></a>color-picker</h3><blockquote><p>颜色拾取器<br>快捷键：commod+shift+c</p></blockquote><h3 id="docblockr"><a href="#docblockr" class="headerlink" title="docblockr"></a>docblockr</h3><blockquote><p>代码注释自动生成</p></blockquote><h3 id="file-icons"><a href="#file-icons" class="headerlink" title="file-icons"></a>file-icons</h3><blockquote><p>文件图标</p></blockquote><h3 id="git-plus"><a href="#git-plus" class="headerlink" title="git-plus"></a>git-plus</h3><blockquote><p>git插件</p></blockquote><h3 id="highlight-selected"><a href="#highlight-selected" class="headerlink" title="highlight-selected"></a>highlight-selected</h3><blockquote><p>选中高亮</p></blockquote><h3 id="language-vue"><a href="#language-vue" class="headerlink" title="language-vue"></a>language-vue</h3><blockquote><p>识别Vue</p></blockquote><h3 id="linter"><a href="#linter" class="headerlink" title="linter"></a>linter</h3><blockquote><p>代码校验基础工具</p></blockquote><h3 id="linter-csslint"><a href="#linter-csslint" class="headerlink" title="linter-csslint"></a>linter-csslint</h3><blockquote><p>校验css</p></blockquote><h3 id="linter-eslint"><a href="#linter-eslint" class="headerlink" title="linter-eslint"></a>linter-eslint</h3><blockquote><p>校验js，配合.eslintrc使用</p></blockquote><h3 id="linter-sass-lint"><a href="#linter-sass-lint" class="headerlink" title="linter-sass-lint"></a>linter-sass-lint</h3><blockquote><p>校验sass</p></blockquote><h3 id="minimap"><a href="#minimap" class="headerlink" title="minimap"></a>minimap</h3><blockquote><p>右边小地图</p></blockquote><h3 id="minimap-find-and-replace"><a href="#minimap-find-and-replace" class="headerlink" title="minimap-find-and-replace"></a>minimap-find-and-replace</h3><blockquote><p>在小地图上显示搜索匹配</p></blockquote><h3 id="minimap-highlight-selected"><a href="#minimap-highlight-selected" class="headerlink" title="minimap-highlight-selected"></a>minimap-highlight-selected</h3><blockquote><p>在小地图上显示选中的</p></blockquote><h3 id="pigments"><a href="#pigments" class="headerlink" title="pigments"></a>pigments</h3><blockquote><p>根据色值直接显示颜色</p></blockquote><h3 id="simplified-chinese-menu"><a href="#simplified-chinese-menu" class="headerlink" title="simplified-chinese-menu"></a>simplified-chinese-menu</h3><blockquote><p>中文汉化包</p></blockquote><h3 id="vue-autocomplete"><a href="#vue-autocomplete" class="headerlink" title="vue-autocomplete"></a>vue-autocomplete</h3><blockquote><p>Vue自动完成</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Atom </tag>
            
            <tag> 开发工具 </tag>
            
            <tag> 配置 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
